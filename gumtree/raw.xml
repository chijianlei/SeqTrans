<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="0.9.5" language="Java" filename="C:\Users\CHIJIA~1\AppData\Local\Temp\gumtree1433082459011983028" pos:tabs="1"><comment type="block" pos:line="1" pos:column="1">/*
 * The MIT License
 *
 * Copyright (c) 2004-2010, Sun Microsystems, Inc., Kohsuke Kawaguchi, Yahoo! Inc., CloudBees, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */</comment>
<package pos:line="24" pos:column="1">package <name><name pos:line="24" pos:column="9">hudson<pos:position pos:line="24" pos:column="15"/></name><operator pos:line="24" pos:column="15">.<pos:position pos:line="24" pos:column="16"/></operator><name pos:line="24" pos:column="16">model<pos:position pos:line="24" pos:column="21"/></name></name>;<pos:position pos:line="24" pos:column="22"/></package>

<import pos:line="26" pos:column="1">import <name><name pos:line="26" pos:column="8">com<pos:position pos:line="26" pos:column="11"/></name><operator pos:line="26" pos:column="11">.<pos:position pos:line="26" pos:column="12"/></operator><name pos:line="26" pos:column="12">google<pos:position pos:line="26" pos:column="18"/></name><operator pos:line="26" pos:column="18">.<pos:position pos:line="26" pos:column="19"/></operator><name pos:line="26" pos:column="19">common<pos:position pos:line="26" pos:column="25"/></name><operator pos:line="26" pos:column="25">.<pos:position pos:line="26" pos:column="26"/></operator><name pos:line="26" pos:column="26">collect<pos:position pos:line="26" pos:column="33"/></name><operator pos:line="26" pos:column="33">.<pos:position pos:line="26" pos:column="34"/></operator><name pos:line="26" pos:column="34">ImmutableList<pos:position pos:line="26" pos:column="47"/></name></name>;<pos:position pos:line="26" pos:column="48"/></import>
<import pos:line="27" pos:column="1">import <name><name pos:line="27" pos:column="8">com<pos:position pos:line="27" pos:column="11"/></name><operator pos:line="27" pos:column="11">.<pos:position pos:line="27" pos:column="12"/></operator><name pos:line="27" pos:column="12">google<pos:position pos:line="27" pos:column="18"/></name><operator pos:line="27" pos:column="18">.<pos:position pos:line="27" pos:column="19"/></operator><name pos:line="27" pos:column="19">common<pos:position pos:line="27" pos:column="25"/></name><operator pos:line="27" pos:column="25">.<pos:position pos:line="27" pos:column="26"/></operator><name pos:line="27" pos:column="26">collect<pos:position pos:line="27" pos:column="33"/></name><operator pos:line="27" pos:column="33">.<pos:position pos:line="27" pos:column="34"/></operator><name pos:line="27" pos:column="34">ImmutableSortedSet<pos:position pos:line="27" pos:column="52"/></name></name>;<pos:position pos:line="27" pos:column="53"/></import>
<import pos:line="28" pos:column="1">import <name><name pos:line="28" pos:column="8">hudson<pos:position pos:line="28" pos:column="14"/></name><operator pos:line="28" pos:column="14">.<pos:position pos:line="28" pos:column="15"/></operator><name pos:line="28" pos:column="15">AbortException<pos:position pos:line="28" pos:column="29"/></name></name>;<pos:position pos:line="28" pos:column="30"/></import>
<import pos:line="29" pos:column="1">import <name><name pos:line="29" pos:column="8">hudson<pos:position pos:line="29" pos:column="14"/></name><operator pos:line="29" pos:column="14">.<pos:position pos:line="29" pos:column="15"/></operator><name pos:line="29" pos:column="15">EnvVars<pos:position pos:line="29" pos:column="22"/></name></name>;<pos:position pos:line="29" pos:column="23"/></import>
<import pos:line="30" pos:column="1">import <name><name pos:line="30" pos:column="8">hudson<pos:position pos:line="30" pos:column="14"/></name><operator pos:line="30" pos:column="14">.<pos:position pos:line="30" pos:column="15"/></operator><name pos:line="30" pos:column="15">FilePath<pos:position pos:line="30" pos:column="23"/></name></name>;<pos:position pos:line="30" pos:column="24"/></import>
<import pos:line="31" pos:column="1">import <name><name pos:line="31" pos:column="8">hudson<pos:position pos:line="31" pos:column="14"/></name><operator pos:line="31" pos:column="14">.<pos:position pos:line="31" pos:column="15"/></operator><name pos:line="31" pos:column="15">Functions<pos:position pos:line="31" pos:column="24"/></name></name>;<pos:position pos:line="31" pos:column="25"/></import>
<import pos:line="32" pos:column="1">import <name><name pos:line="32" pos:column="8">hudson<pos:position pos:line="32" pos:column="14"/></name><operator pos:line="32" pos:column="14">.<pos:position pos:line="32" pos:column="15"/></operator><name pos:line="32" pos:column="15">Launcher<pos:position pos:line="32" pos:column="23"/></name></name>;<pos:position pos:line="32" pos:column="24"/></import>
<import pos:line="33" pos:column="1">import <name><name pos:line="33" pos:column="8">jenkins<pos:position pos:line="33" pos:column="15"/></name><operator pos:line="33" pos:column="15">.<pos:position pos:line="33" pos:column="16"/></operator><name pos:line="33" pos:column="16">util<pos:position pos:line="33" pos:column="20"/></name><operator pos:line="33" pos:column="20">.<pos:position pos:line="33" pos:column="21"/></operator><name pos:line="33" pos:column="21">SystemProperties<pos:position pos:line="33" pos:column="37"/></name></name>;<pos:position pos:line="33" pos:column="38"/></import>
<import pos:line="34" pos:column="1">import <name><name pos:line="34" pos:column="8">hudson<pos:position pos:line="34" pos:column="14"/></name><operator pos:line="34" pos:column="14">.<pos:position pos:line="34" pos:column="15"/></operator><name pos:line="34" pos:column="15">console<pos:position pos:line="34" pos:column="22"/></name><operator pos:line="34" pos:column="22">.<pos:position pos:line="34" pos:column="23"/></operator><name pos:line="34" pos:column="23">ModelHyperlinkNote<pos:position pos:line="34" pos:column="41"/></name></name>;<pos:position pos:line="34" pos:column="42"/></import>
<import pos:line="35" pos:column="1">import <name><name pos:line="35" pos:column="8">hudson<pos:position pos:line="35" pos:column="14"/></name><operator pos:line="35" pos:column="14">.<pos:position pos:line="35" pos:column="15"/></operator><name pos:line="35" pos:column="15">model<pos:position pos:line="35" pos:column="20"/></name><operator pos:line="35" pos:column="20">.<pos:position pos:line="35" pos:column="21"/></operator><name pos:line="35" pos:column="21">Fingerprint<pos:position pos:line="35" pos:column="32"/></name><operator pos:line="35" pos:column="32">.<pos:position pos:line="35" pos:column="33"/></operator><name pos:line="35" pos:column="33">BuildPtr<pos:position pos:line="35" pos:column="41"/></name></name>;<pos:position pos:line="35" pos:column="42"/></import>
<import pos:line="36" pos:column="1">import <name><name pos:line="36" pos:column="8">hudson<pos:position pos:line="36" pos:column="14"/></name><operator pos:line="36" pos:column="14">.<pos:position pos:line="36" pos:column="15"/></operator><name pos:line="36" pos:column="15">model<pos:position pos:line="36" pos:column="20"/></name><operator pos:line="36" pos:column="20">.<pos:position pos:line="36" pos:column="21"/></operator><name pos:line="36" pos:column="21">Fingerprint<pos:position pos:line="36" pos:column="32"/></name><operator pos:line="36" pos:column="32">.<pos:position pos:line="36" pos:column="33"/></operator><name pos:line="36" pos:column="33">RangeSet<pos:position pos:line="36" pos:column="41"/></name></name>;<pos:position pos:line="36" pos:column="42"/></import>
<import pos:line="37" pos:column="1">import <name><name pos:line="37" pos:column="8">hudson<pos:position pos:line="37" pos:column="14"/></name><operator pos:line="37" pos:column="14">.<pos:position pos:line="37" pos:column="15"/></operator><name pos:line="37" pos:column="15">model<pos:position pos:line="37" pos:column="20"/></name><operator pos:line="37" pos:column="20">.<pos:position pos:line="37" pos:column="21"/></operator><name pos:line="37" pos:column="21">labels<pos:position pos:line="37" pos:column="27"/></name><operator pos:line="37" pos:column="27">.<pos:position pos:line="37" pos:column="28"/></operator><name pos:line="37" pos:column="28">LabelAtom<pos:position pos:line="37" pos:column="37"/></name></name>;<pos:position pos:line="37" pos:column="38"/></import>
<import pos:line="38" pos:column="1">import <name><name pos:line="38" pos:column="8">hudson<pos:position pos:line="38" pos:column="14"/></name><operator pos:line="38" pos:column="14">.<pos:position pos:line="38" pos:column="15"/></operator><name pos:line="38" pos:column="15">model<pos:position pos:line="38" pos:column="20"/></name><operator pos:line="38" pos:column="20">.<pos:position pos:line="38" pos:column="21"/></operator><name pos:line="38" pos:column="21">listeners<pos:position pos:line="38" pos:column="30"/></name><operator pos:line="38" pos:column="30">.<pos:position pos:line="38" pos:column="31"/></operator><name pos:line="38" pos:column="31">RunListener<pos:position pos:line="38" pos:column="42"/></name></name>;<pos:position pos:line="38" pos:column="43"/></import>
<import pos:line="39" pos:column="1">import <name><name pos:line="39" pos:column="8">hudson<pos:position pos:line="39" pos:column="14"/></name><operator pos:line="39" pos:column="14">.<pos:position pos:line="39" pos:column="15"/></operator><name pos:line="39" pos:column="15">model<pos:position pos:line="39" pos:column="20"/></name><operator pos:line="39" pos:column="20">.<pos:position pos:line="39" pos:column="21"/></operator><name pos:line="39" pos:column="21">listeners<pos:position pos:line="39" pos:column="30"/></name><operator pos:line="39" pos:column="30">.<pos:position pos:line="39" pos:column="31"/></operator><name pos:line="39" pos:column="31">SCMListener<pos:position pos:line="39" pos:column="42"/></name></name>;<pos:position pos:line="39" pos:column="43"/></import>
<import pos:line="40" pos:column="1">import <name><name pos:line="40" pos:column="8">hudson<pos:position pos:line="40" pos:column="14"/></name><operator pos:line="40" pos:column="14">.<pos:position pos:line="40" pos:column="15"/></operator><name pos:line="40" pos:column="15">remoting<pos:position pos:line="40" pos:column="23"/></name><operator pos:line="40" pos:column="23">.<pos:position pos:line="40" pos:column="24"/></operator><name pos:line="40" pos:column="24">ChannelClosedException<pos:position pos:line="40" pos:column="46"/></name></name>;<pos:position pos:line="40" pos:column="47"/></import>
<import pos:line="41" pos:column="1">import <name><name pos:line="41" pos:column="8">hudson<pos:position pos:line="41" pos:column="14"/></name><operator pos:line="41" pos:column="14">.<pos:position pos:line="41" pos:column="15"/></operator><name pos:line="41" pos:column="15">remoting<pos:position pos:line="41" pos:column="23"/></name><operator pos:line="41" pos:column="23">.<pos:position pos:line="41" pos:column="24"/></operator><name pos:line="41" pos:column="24">RequestAbortedException<pos:position pos:line="41" pos:column="47"/></name></name>;<pos:position pos:line="41" pos:column="48"/></import>
<import pos:line="42" pos:column="1">import <name><name pos:line="42" pos:column="8">hudson<pos:position pos:line="42" pos:column="14"/></name><operator pos:line="42" pos:column="14">.<pos:position pos:line="42" pos:column="15"/></operator><name pos:line="42" pos:column="15">scm<pos:position pos:line="42" pos:column="18"/></name><operator pos:line="42" pos:column="18">.<pos:position pos:line="42" pos:column="19"/></operator><name pos:line="42" pos:column="19">ChangeLogParser<pos:position pos:line="42" pos:column="34"/></name></name>;<pos:position pos:line="42" pos:column="35"/></import>
<import pos:line="43" pos:column="1">import <name><name pos:line="43" pos:column="8">hudson<pos:position pos:line="43" pos:column="14"/></name><operator pos:line="43" pos:column="14">.<pos:position pos:line="43" pos:column="15"/></operator><name pos:line="43" pos:column="15">scm<pos:position pos:line="43" pos:column="18"/></name><operator pos:line="43" pos:column="18">.<pos:position pos:line="43" pos:column="19"/></operator><name pos:line="43" pos:column="19">ChangeLogSet<pos:position pos:line="43" pos:column="31"/></name></name>;<pos:position pos:line="43" pos:column="32"/></import>
<import pos:line="44" pos:column="1">import <name><name pos:line="44" pos:column="8">hudson<pos:position pos:line="44" pos:column="14"/></name><operator pos:line="44" pos:column="14">.<pos:position pos:line="44" pos:column="15"/></operator><name pos:line="44" pos:column="15">scm<pos:position pos:line="44" pos:column="18"/></name><operator pos:line="44" pos:column="18">.<pos:position pos:line="44" pos:column="19"/></operator><name pos:line="44" pos:column="19">ChangeLogSet<pos:position pos:line="44" pos:column="31"/></name><operator pos:line="44" pos:column="31">.<pos:position pos:line="44" pos:column="32"/></operator><name pos:line="44" pos:column="32">Entry<pos:position pos:line="44" pos:column="37"/></name></name>;<pos:position pos:line="44" pos:column="38"/></import>
<import pos:line="45" pos:column="1">import <name><name pos:line="45" pos:column="8">hudson<pos:position pos:line="45" pos:column="14"/></name><operator pos:line="45" pos:column="14">.<pos:position pos:line="45" pos:column="15"/></operator><name pos:line="45" pos:column="15">scm<pos:position pos:line="45" pos:column="18"/></name><operator pos:line="45" pos:column="18">.<pos:position pos:line="45" pos:column="19"/></operator><name pos:line="45" pos:column="19">NullChangeLogParser<pos:position pos:line="45" pos:column="38"/></name></name>;<pos:position pos:line="45" pos:column="39"/></import>
<import pos:line="46" pos:column="1">import <name><name pos:line="46" pos:column="8">hudson<pos:position pos:line="46" pos:column="14"/></name><operator pos:line="46" pos:column="14">.<pos:position pos:line="46" pos:column="15"/></operator><name pos:line="46" pos:column="15">scm<pos:position pos:line="46" pos:column="18"/></name><operator pos:line="46" pos:column="18">.<pos:position pos:line="46" pos:column="19"/></operator><name pos:line="46" pos:column="19">SCM<pos:position pos:line="46" pos:column="22"/></name></name>;<pos:position pos:line="46" pos:column="23"/></import>
<import pos:line="47" pos:column="1">import <name><name pos:line="47" pos:column="8">hudson<pos:position pos:line="47" pos:column="14"/></name><operator pos:line="47" pos:column="14">.<pos:position pos:line="47" pos:column="15"/></operator><name pos:line="47" pos:column="15">scm<pos:position pos:line="47" pos:column="18"/></name><operator pos:line="47" pos:column="18">.<pos:position pos:line="47" pos:column="19"/></operator><name pos:line="47" pos:column="19">SCMRevisionState<pos:position pos:line="47" pos:column="35"/></name></name>;<pos:position pos:line="47" pos:column="36"/></import>
<import pos:line="48" pos:column="1">import <name><name pos:line="48" pos:column="8">hudson<pos:position pos:line="48" pos:column="14"/></name><operator pos:line="48" pos:column="14">.<pos:position pos:line="48" pos:column="15"/></operator><name pos:line="48" pos:column="15">slaves<pos:position pos:line="48" pos:column="21"/></name><operator pos:line="48" pos:column="21">.<pos:position pos:line="48" pos:column="22"/></operator><name pos:line="48" pos:column="22">NodeProperty<pos:position pos:line="48" pos:column="34"/></name></name>;<pos:position pos:line="48" pos:column="35"/></import>
<import pos:line="49" pos:column="1">import <name><name pos:line="49" pos:column="8">hudson<pos:position pos:line="49" pos:column="14"/></name><operator pos:line="49" pos:column="14">.<pos:position pos:line="49" pos:column="15"/></operator><name pos:line="49" pos:column="15">slaves<pos:position pos:line="49" pos:column="21"/></name><operator pos:line="49" pos:column="21">.<pos:position pos:line="49" pos:column="22"/></operator><name pos:line="49" pos:column="22">WorkspaceList<pos:position pos:line="49" pos:column="35"/></name></name>;<pos:position pos:line="49" pos:column="36"/></import>
<import pos:line="50" pos:column="1">import <name><name pos:line="50" pos:column="8">hudson<pos:position pos:line="50" pos:column="14"/></name><operator pos:line="50" pos:column="14">.<pos:position pos:line="50" pos:column="15"/></operator><name pos:line="50" pos:column="15">slaves<pos:position pos:line="50" pos:column="21"/></name><operator pos:line="50" pos:column="21">.<pos:position pos:line="50" pos:column="22"/></operator><name pos:line="50" pos:column="22">WorkspaceList<pos:position pos:line="50" pos:column="35"/></name><operator pos:line="50" pos:column="35">.<pos:position pos:line="50" pos:column="36"/></operator><name pos:line="50" pos:column="36">Lease<pos:position pos:line="50" pos:column="41"/></name></name>;<pos:position pos:line="50" pos:column="42"/></import>
<import pos:line="51" pos:column="1">import <name><name pos:line="51" pos:column="8">hudson<pos:position pos:line="51" pos:column="14"/></name><operator pos:line="51" pos:column="14">.<pos:position pos:line="51" pos:column="15"/></operator><name pos:line="51" pos:column="15">slaves<pos:position pos:line="51" pos:column="21"/></name><operator pos:line="51" pos:column="21">.<pos:position pos:line="51" pos:column="22"/></operator><name pos:line="51" pos:column="22">OfflineCause<pos:position pos:line="51" pos:column="34"/></name></name>;<pos:position pos:line="51" pos:column="35"/></import>
<import pos:line="52" pos:column="1">import <name><name pos:line="52" pos:column="8">hudson<pos:position pos:line="52" pos:column="14"/></name><operator pos:line="52" pos:column="14">.<pos:position pos:line="52" pos:column="15"/></operator><name pos:line="52" pos:column="15">tasks<pos:position pos:line="52" pos:column="20"/></name><operator pos:line="52" pos:column="20">.<pos:position pos:line="52" pos:column="21"/></operator><name pos:line="52" pos:column="21">BuildStep<pos:position pos:line="52" pos:column="30"/></name></name>;<pos:position pos:line="52" pos:column="31"/></import>
<import pos:line="53" pos:column="1">import <name><name pos:line="53" pos:column="8">hudson<pos:position pos:line="53" pos:column="14"/></name><operator pos:line="53" pos:column="14">.<pos:position pos:line="53" pos:column="15"/></operator><name pos:line="53" pos:column="15">tasks<pos:position pos:line="53" pos:column="20"/></name><operator pos:line="53" pos:column="20">.<pos:position pos:line="53" pos:column="21"/></operator><name pos:line="53" pos:column="21">BuildStepMonitor<pos:position pos:line="53" pos:column="37"/></name></name>;<pos:position pos:line="53" pos:column="38"/></import>
<import pos:line="54" pos:column="1">import <name><name pos:line="54" pos:column="8">hudson<pos:position pos:line="54" pos:column="14"/></name><operator pos:line="54" pos:column="14">.<pos:position pos:line="54" pos:column="15"/></operator><name pos:line="54" pos:column="15">tasks<pos:position pos:line="54" pos:column="20"/></name><operator pos:line="54" pos:column="20">.<pos:position pos:line="54" pos:column="21"/></operator><name pos:line="54" pos:column="21">BuildTrigger<pos:position pos:line="54" pos:column="33"/></name></name>;<pos:position pos:line="54" pos:column="34"/></import>
<import pos:line="55" pos:column="1">import <name><name pos:line="55" pos:column="8">hudson<pos:position pos:line="55" pos:column="14"/></name><operator pos:line="55" pos:column="14">.<pos:position pos:line="55" pos:column="15"/></operator><name pos:line="55" pos:column="15">tasks<pos:position pos:line="55" pos:column="20"/></name><operator pos:line="55" pos:column="20">.<pos:position pos:line="55" pos:column="21"/></operator><name pos:line="55" pos:column="21">BuildWrapper<pos:position pos:line="55" pos:column="33"/></name></name>;<pos:position pos:line="55" pos:column="34"/></import>
<import pos:line="56" pos:column="1">import <name><name pos:line="56" pos:column="8">hudson<pos:position pos:line="56" pos:column="14"/></name><operator pos:line="56" pos:column="14">.<pos:position pos:line="56" pos:column="15"/></operator><name pos:line="56" pos:column="15">tasks<pos:position pos:line="56" pos:column="20"/></name><operator pos:line="56" pos:column="20">.<pos:position pos:line="56" pos:column="21"/></operator><name pos:line="56" pos:column="21">Builder<pos:position pos:line="56" pos:column="28"/></name></name>;<pos:position pos:line="56" pos:column="29"/></import>
<import pos:line="57" pos:column="1">import <name><name pos:line="57" pos:column="8">hudson<pos:position pos:line="57" pos:column="14"/></name><operator pos:line="57" pos:column="14">.<pos:position pos:line="57" pos:column="15"/></operator><name pos:line="57" pos:column="15">tasks<pos:position pos:line="57" pos:column="20"/></name><operator pos:line="57" pos:column="20">.<pos:position pos:line="57" pos:column="21"/></operator><name pos:line="57" pos:column="21">Fingerprinter<pos:position pos:line="57" pos:column="34"/></name><operator pos:line="57" pos:column="34">.<pos:position pos:line="57" pos:column="35"/></operator><name pos:line="57" pos:column="35">FingerprintAction<pos:position pos:line="57" pos:column="52"/></name></name>;<pos:position pos:line="57" pos:column="53"/></import>
<import pos:line="58" pos:column="1">import <name><name pos:line="58" pos:column="8">hudson<pos:position pos:line="58" pos:column="14"/></name><operator pos:line="58" pos:column="14">.<pos:position pos:line="58" pos:column="15"/></operator><name pos:line="58" pos:column="15">tasks<pos:position pos:line="58" pos:column="20"/></name><operator pos:line="58" pos:column="20">.<pos:position pos:line="58" pos:column="21"/></operator><name pos:line="58" pos:column="21">Publisher<pos:position pos:line="58" pos:column="30"/></name></name>;<pos:position pos:line="58" pos:column="31"/></import>
<import pos:line="59" pos:column="1">import <name><name pos:line="59" pos:column="8">hudson<pos:position pos:line="59" pos:column="14"/></name><operator pos:line="59" pos:column="14">.<pos:position pos:line="59" pos:column="15"/></operator><name pos:line="59" pos:column="15">util<pos:position pos:line="59" pos:column="19"/></name><operator pos:line="59" pos:column="19">.<pos:position pos:line="59" pos:column="20"/></operator><name pos:line="59" pos:column="20">*<pos:position pos:line="59" pos:column="21"/></name></name>;<pos:position pos:line="59" pos:column="22"/></import>
<import pos:line="60" pos:column="1">import <name><name pos:line="60" pos:column="8">jenkins<pos:position pos:line="60" pos:column="15"/></name><operator pos:line="60" pos:column="15">.<pos:position pos:line="60" pos:column="16"/></operator><name pos:line="60" pos:column="16">model<pos:position pos:line="60" pos:column="21"/></name><operator pos:line="60" pos:column="21">.<pos:position pos:line="60" pos:column="22"/></operator><name pos:line="60" pos:column="22">Jenkins<pos:position pos:line="60" pos:column="29"/></name></name>;<pos:position pos:line="60" pos:column="30"/></import>
<import pos:line="61" pos:column="1">import <name><name pos:line="61" pos:column="8">org<pos:position pos:line="61" pos:column="11"/></name><operator pos:line="61" pos:column="11">.<pos:position pos:line="61" pos:column="12"/></operator><name pos:line="61" pos:column="12">kohsuke<pos:position pos:line="61" pos:column="19"/></name><operator pos:line="61" pos:column="19">.<pos:position pos:line="61" pos:column="20"/></operator><name pos:line="61" pos:column="20">stapler<pos:position pos:line="61" pos:column="27"/></name><operator pos:line="61" pos:column="27">.<pos:position pos:line="61" pos:column="28"/></operator><name pos:line="61" pos:column="28">HttpResponse<pos:position pos:line="61" pos:column="40"/></name></name>;<pos:position pos:line="61" pos:column="41"/></import>
<import pos:line="62" pos:column="1">import <name><name pos:line="62" pos:column="8">org<pos:position pos:line="62" pos:column="11"/></name><operator pos:line="62" pos:column="11">.<pos:position pos:line="62" pos:column="12"/></operator><name pos:line="62" pos:column="12">kohsuke<pos:position pos:line="62" pos:column="19"/></name><operator pos:line="62" pos:column="19">.<pos:position pos:line="62" pos:column="20"/></operator><name pos:line="62" pos:column="20">stapler<pos:position pos:line="62" pos:column="27"/></name><operator pos:line="62" pos:column="27">.<pos:position pos:line="62" pos:column="28"/></operator><name pos:line="62" pos:column="28">Stapler<pos:position pos:line="62" pos:column="35"/></name></name>;<pos:position pos:line="62" pos:column="36"/></import>
<import pos:line="63" pos:column="1">import <name><name pos:line="63" pos:column="8">org<pos:position pos:line="63" pos:column="11"/></name><operator pos:line="63" pos:column="11">.<pos:position pos:line="63" pos:column="12"/></operator><name pos:line="63" pos:column="12">kohsuke<pos:position pos:line="63" pos:column="19"/></name><operator pos:line="63" pos:column="19">.<pos:position pos:line="63" pos:column="20"/></operator><name pos:line="63" pos:column="20">stapler<pos:position pos:line="63" pos:column="27"/></name><operator pos:line="63" pos:column="27">.<pos:position pos:line="63" pos:column="28"/></operator><name pos:line="63" pos:column="28">StaplerRequest<pos:position pos:line="63" pos:column="42"/></name></name>;<pos:position pos:line="63" pos:column="43"/></import>
<import pos:line="64" pos:column="1">import <name><name pos:line="64" pos:column="8">org<pos:position pos:line="64" pos:column="11"/></name><operator pos:line="64" pos:column="11">.<pos:position pos:line="64" pos:column="12"/></operator><name pos:line="64" pos:column="12">kohsuke<pos:position pos:line="64" pos:column="19"/></name><operator pos:line="64" pos:column="19">.<pos:position pos:line="64" pos:column="20"/></operator><name pos:line="64" pos:column="20">stapler<pos:position pos:line="64" pos:column="27"/></name><operator pos:line="64" pos:column="27">.<pos:position pos:line="64" pos:column="28"/></operator><name pos:line="64" pos:column="28">StaplerResponse<pos:position pos:line="64" pos:column="43"/></name></name>;<pos:position pos:line="64" pos:column="44"/></import>
<import pos:line="65" pos:column="1">import <name><name pos:line="65" pos:column="8">org<pos:position pos:line="65" pos:column="11"/></name><operator pos:line="65" pos:column="11">.<pos:position pos:line="65" pos:column="12"/></operator><name pos:line="65" pos:column="12">kohsuke<pos:position pos:line="65" pos:column="19"/></name><operator pos:line="65" pos:column="19">.<pos:position pos:line="65" pos:column="20"/></operator><name pos:line="65" pos:column="20">stapler<pos:position pos:line="65" pos:column="27"/></name><operator pos:line="65" pos:column="27">.<pos:position pos:line="65" pos:column="28"/></operator><name pos:line="65" pos:column="28">export<pos:position pos:line="65" pos:column="34"/></name><operator pos:line="65" pos:column="34">.<pos:position pos:line="65" pos:column="35"/></operator><name pos:line="65" pos:column="35">Exported<pos:position pos:line="65" pos:column="43"/></name></name>;<pos:position pos:line="65" pos:column="44"/></import>
<import pos:line="66" pos:column="1">import <name><name pos:line="66" pos:column="8">org<pos:position pos:line="66" pos:column="11"/></name><operator pos:line="66" pos:column="11">.<pos:position pos:line="66" pos:column="12"/></operator><name pos:line="66" pos:column="12">xml<pos:position pos:line="66" pos:column="15"/></name><operator pos:line="66" pos:column="15">.<pos:position pos:line="66" pos:column="16"/></operator><name pos:line="66" pos:column="16">sax<pos:position pos:line="66" pos:column="19"/></name><operator pos:line="66" pos:column="19">.<pos:position pos:line="66" pos:column="20"/></operator><name pos:line="66" pos:column="20">SAXException<pos:position pos:line="66" pos:column="32"/></name></name>;<pos:position pos:line="66" pos:column="33"/></import>

<import pos:line="68" pos:column="1">import <name><name pos:line="68" pos:column="8">javax<pos:position pos:line="68" pos:column="13"/></name><operator pos:line="68" pos:column="13">.<pos:position pos:line="68" pos:column="14"/></operator><name pos:line="68" pos:column="14">servlet<pos:position pos:line="68" pos:column="21"/></name><operator pos:line="68" pos:column="21">.<pos:position pos:line="68" pos:column="22"/></operator><name pos:line="68" pos:column="22">ServletException<pos:position pos:line="68" pos:column="38"/></name></name>;<pos:position pos:line="68" pos:column="39"/></import>
<import pos:line="69" pos:column="1">import <name><name pos:line="69" pos:column="8">java<pos:position pos:line="69" pos:column="12"/></name><operator pos:line="69" pos:column="12">.<pos:position pos:line="69" pos:column="13"/></operator><name pos:line="69" pos:column="13">io<pos:position pos:line="69" pos:column="15"/></name><operator pos:line="69" pos:column="15">.<pos:position pos:line="69" pos:column="16"/></operator><name pos:line="69" pos:column="16">File<pos:position pos:line="69" pos:column="20"/></name></name>;<pos:position pos:line="69" pos:column="21"/></import>
<import pos:line="70" pos:column="1">import <name><name pos:line="70" pos:column="8">java<pos:position pos:line="70" pos:column="12"/></name><operator pos:line="70" pos:column="12">.<pos:position pos:line="70" pos:column="13"/></operator><name pos:line="70" pos:column="13">io<pos:position pos:line="70" pos:column="15"/></name><operator pos:line="70" pos:column="15">.<pos:position pos:line="70" pos:column="16"/></operator><name pos:line="70" pos:column="16">IOException<pos:position pos:line="70" pos:column="27"/></name></name>;<pos:position pos:line="70" pos:column="28"/></import>
<import pos:line="71" pos:column="1">import <name><name pos:line="71" pos:column="8">java<pos:position pos:line="71" pos:column="12"/></name><operator pos:line="71" pos:column="12">.<pos:position pos:line="71" pos:column="13"/></operator><name pos:line="71" pos:column="13">io<pos:position pos:line="71" pos:column="15"/></name><operator pos:line="71" pos:column="15">.<pos:position pos:line="71" pos:column="16"/></operator><name pos:line="71" pos:column="16">InterruptedIOException<pos:position pos:line="71" pos:column="38"/></name></name>;<pos:position pos:line="71" pos:column="39"/></import>
<import pos:line="72" pos:column="1">import <name><name pos:line="72" pos:column="8">java<pos:position pos:line="72" pos:column="12"/></name><operator pos:line="72" pos:column="12">.<pos:position pos:line="72" pos:column="13"/></operator><name pos:line="72" pos:column="13">lang<pos:position pos:line="72" pos:column="17"/></name><operator pos:line="72" pos:column="17">.<pos:position pos:line="72" pos:column="18"/></operator><name pos:line="72" pos:column="18">ref<pos:position pos:line="72" pos:column="21"/></name><operator pos:line="72" pos:column="21">.<pos:position pos:line="72" pos:column="22"/></operator><name pos:line="72" pos:column="22">WeakReference<pos:position pos:line="72" pos:column="35"/></name></name>;<pos:position pos:line="72" pos:column="36"/></import>
<import pos:line="73" pos:column="1">import <name><name pos:line="73" pos:column="8">java<pos:position pos:line="73" pos:column="12"/></name><operator pos:line="73" pos:column="12">.<pos:position pos:line="73" pos:column="13"/></operator><name pos:line="73" pos:column="13">util<pos:position pos:line="73" pos:column="17"/></name><operator pos:line="73" pos:column="17">.<pos:position pos:line="73" pos:column="18"/></operator><name pos:line="73" pos:column="18">AbstractSet<pos:position pos:line="73" pos:column="29"/></name></name>;<pos:position pos:line="73" pos:column="30"/></import>
<import pos:line="74" pos:column="1">import <name><name pos:line="74" pos:column="8">java<pos:position pos:line="74" pos:column="12"/></name><operator pos:line="74" pos:column="12">.<pos:position pos:line="74" pos:column="13"/></operator><name pos:line="74" pos:column="13">util<pos:position pos:line="74" pos:column="17"/></name><operator pos:line="74" pos:column="17">.<pos:position pos:line="74" pos:column="18"/></operator><name pos:line="74" pos:column="18">ArrayList<pos:position pos:line="74" pos:column="27"/></name></name>;<pos:position pos:line="74" pos:column="28"/></import>
<import pos:line="75" pos:column="1">import <name><name pos:line="75" pos:column="8">java<pos:position pos:line="75" pos:column="12"/></name><operator pos:line="75" pos:column="12">.<pos:position pos:line="75" pos:column="13"/></operator><name pos:line="75" pos:column="13">util<pos:position pos:line="75" pos:column="17"/></name><operator pos:line="75" pos:column="17">.<pos:position pos:line="75" pos:column="18"/></operator><name pos:line="75" pos:column="18">Calendar<pos:position pos:line="75" pos:column="26"/></name></name>;<pos:position pos:line="75" pos:column="27"/></import>
<import pos:line="76" pos:column="1">import <name><name pos:line="76" pos:column="8">java<pos:position pos:line="76" pos:column="12"/></name><operator pos:line="76" pos:column="12">.<pos:position pos:line="76" pos:column="13"/></operator><name pos:line="76" pos:column="13">util<pos:position pos:line="76" pos:column="17"/></name><operator pos:line="76" pos:column="17">.<pos:position pos:line="76" pos:column="18"/></operator><name pos:line="76" pos:column="18">Collection<pos:position pos:line="76" pos:column="28"/></name></name>;<pos:position pos:line="76" pos:column="29"/></import>
<import pos:line="77" pos:column="1">import <name><name pos:line="77" pos:column="8">java<pos:position pos:line="77" pos:column="12"/></name><operator pos:line="77" pos:column="12">.<pos:position pos:line="77" pos:column="13"/></operator><name pos:line="77" pos:column="13">util<pos:position pos:line="77" pos:column="17"/></name><operator pos:line="77" pos:column="17">.<pos:position pos:line="77" pos:column="18"/></operator><name pos:line="77" pos:column="18">Collections<pos:position pos:line="77" pos:column="29"/></name></name>;<pos:position pos:line="77" pos:column="30"/></import>
<import pos:line="78" pos:column="1">import <name><name pos:line="78" pos:column="8">java<pos:position pos:line="78" pos:column="12"/></name><operator pos:line="78" pos:column="12">.<pos:position pos:line="78" pos:column="13"/></operator><name pos:line="78" pos:column="13">util<pos:position pos:line="78" pos:column="17"/></name><operator pos:line="78" pos:column="17">.<pos:position pos:line="78" pos:column="18"/></operator><name pos:line="78" pos:column="18">HashMap<pos:position pos:line="78" pos:column="25"/></name></name>;<pos:position pos:line="78" pos:column="26"/></import>
<import pos:line="79" pos:column="1">import <name><name pos:line="79" pos:column="8">java<pos:position pos:line="79" pos:column="12"/></name><operator pos:line="79" pos:column="12">.<pos:position pos:line="79" pos:column="13"/></operator><name pos:line="79" pos:column="13">util<pos:position pos:line="79" pos:column="17"/></name><operator pos:line="79" pos:column="17">.<pos:position pos:line="79" pos:column="18"/></operator><name pos:line="79" pos:column="18">HashSet<pos:position pos:line="79" pos:column="25"/></name></name>;<pos:position pos:line="79" pos:column="26"/></import>
<import pos:line="80" pos:column="1">import <name><name pos:line="80" pos:column="8">java<pos:position pos:line="80" pos:column="12"/></name><operator pos:line="80" pos:column="12">.<pos:position pos:line="80" pos:column="13"/></operator><name pos:line="80" pos:column="13">util<pos:position pos:line="80" pos:column="17"/></name><operator pos:line="80" pos:column="17">.<pos:position pos:line="80" pos:column="18"/></operator><name pos:line="80" pos:column="18">Iterator<pos:position pos:line="80" pos:column="26"/></name></name>;<pos:position pos:line="80" pos:column="27"/></import>
<import pos:line="81" pos:column="1">import <name><name pos:line="81" pos:column="8">java<pos:position pos:line="81" pos:column="12"/></name><operator pos:line="81" pos:column="12">.<pos:position pos:line="81" pos:column="13"/></operator><name pos:line="81" pos:column="13">util<pos:position pos:line="81" pos:column="17"/></name><operator pos:line="81" pos:column="17">.<pos:position pos:line="81" pos:column="18"/></operator><name pos:line="81" pos:column="18">List<pos:position pos:line="81" pos:column="22"/></name></name>;<pos:position pos:line="81" pos:column="23"/></import>
<import pos:line="82" pos:column="1">import <name><name pos:line="82" pos:column="8">java<pos:position pos:line="82" pos:column="12"/></name><operator pos:line="82" pos:column="12">.<pos:position pos:line="82" pos:column="13"/></operator><name pos:line="82" pos:column="13">util<pos:position pos:line="82" pos:column="17"/></name><operator pos:line="82" pos:column="17">.<pos:position pos:line="82" pos:column="18"/></operator><name pos:line="82" pos:column="18">Map<pos:position pos:line="82" pos:column="21"/></name></name>;<pos:position pos:line="82" pos:column="22"/></import>
<import pos:line="83" pos:column="1">import <name><name pos:line="83" pos:column="8">java<pos:position pos:line="83" pos:column="12"/></name><operator pos:line="83" pos:column="12">.<pos:position pos:line="83" pos:column="13"/></operator><name pos:line="83" pos:column="13">util<pos:position pos:line="83" pos:column="17"/></name><operator pos:line="83" pos:column="17">.<pos:position pos:line="83" pos:column="18"/></operator><name pos:line="83" pos:column="18">Set<pos:position pos:line="83" pos:column="21"/></name></name>;<pos:position pos:line="83" pos:column="22"/></import>
<import pos:line="84" pos:column="1">import <name><name pos:line="84" pos:column="8">java<pos:position pos:line="84" pos:column="12"/></name><operator pos:line="84" pos:column="12">.<pos:position pos:line="84" pos:column="13"/></operator><name pos:line="84" pos:column="13">util<pos:position pos:line="84" pos:column="17"/></name><operator pos:line="84" pos:column="17">.<pos:position pos:line="84" pos:column="18"/></operator><name pos:line="84" pos:column="18">logging<pos:position pos:line="84" pos:column="25"/></name><operator pos:line="84" pos:column="25">.<pos:position pos:line="84" pos:column="26"/></operator><name pos:line="84" pos:column="26">Level<pos:position pos:line="84" pos:column="31"/></name></name>;<pos:position pos:line="84" pos:column="32"/></import>
<import pos:line="85" pos:column="1">import <name><name pos:line="85" pos:column="8">java<pos:position pos:line="85" pos:column="12"/></name><operator pos:line="85" pos:column="12">.<pos:position pos:line="85" pos:column="13"/></operator><name pos:line="85" pos:column="13">util<pos:position pos:line="85" pos:column="17"/></name><operator pos:line="85" pos:column="17">.<pos:position pos:line="85" pos:column="18"/></operator><name pos:line="85" pos:column="18">logging<pos:position pos:line="85" pos:column="25"/></name><operator pos:line="85" pos:column="25">.<pos:position pos:line="85" pos:column="26"/></operator><name pos:line="85" pos:column="26">Logger<pos:position pos:line="85" pos:column="32"/></name></name>;<pos:position pos:line="85" pos:column="33"/></import>
<import pos:line="86" pos:column="1">import <name><name pos:line="86" pos:column="8">javax<pos:position pos:line="86" pos:column="13"/></name><operator pos:line="86" pos:column="13">.<pos:position pos:line="86" pos:column="14"/></operator><name pos:line="86" pos:column="14">annotation<pos:position pos:line="86" pos:column="24"/></name><operator pos:line="86" pos:column="24">.<pos:position pos:line="86" pos:column="25"/></operator><name pos:line="86" pos:column="25">CheckForNull<pos:position pos:line="86" pos:column="37"/></name></name>;<pos:position pos:line="86" pos:column="38"/></import>
<import pos:line="87" pos:column="1">import <name><name pos:line="87" pos:column="8">javax<pos:position pos:line="87" pos:column="13"/></name><operator pos:line="87" pos:column="13">.<pos:position pos:line="87" pos:column="14"/></operator><name pos:line="87" pos:column="14">annotation<pos:position pos:line="87" pos:column="24"/></name><operator pos:line="87" pos:column="24">.<pos:position pos:line="87" pos:column="25"/></operator><name pos:line="87" pos:column="25">Nonnull<pos:position pos:line="87" pos:column="32"/></name></name>;<pos:position pos:line="87" pos:column="33"/></import>
<import pos:line="88" pos:column="1">import <name><name pos:line="88" pos:column="8">org<pos:position pos:line="88" pos:column="11"/></name><operator pos:line="88" pos:column="11">.<pos:position pos:line="88" pos:column="12"/></operator><name pos:line="88" pos:column="12">kohsuke<pos:position pos:line="88" pos:column="19"/></name><operator pos:line="88" pos:column="19">.<pos:position pos:line="88" pos:column="20"/></operator><name pos:line="88" pos:column="20">stapler<pos:position pos:line="88" pos:column="27"/></name><operator pos:line="88" pos:column="27">.<pos:position pos:line="88" pos:column="28"/></operator><name pos:line="88" pos:column="28">interceptor<pos:position pos:line="88" pos:column="39"/></name><operator pos:line="88" pos:column="39">.<pos:position pos:line="88" pos:column="40"/></operator><name pos:line="88" pos:column="40">RequirePOST<pos:position pos:line="88" pos:column="51"/></name></name>;<pos:position pos:line="88" pos:column="52"/></import>

<import pos:line="90" pos:column="1">import static <name><name pos:line="90" pos:column="15">java<pos:position pos:line="90" pos:column="19"/></name><operator pos:line="90" pos:column="19">.<pos:position pos:line="90" pos:column="20"/></operator><name pos:line="90" pos:column="20">util<pos:position pos:line="90" pos:column="24"/></name><operator pos:line="90" pos:column="24">.<pos:position pos:line="90" pos:column="25"/></operator><name pos:line="90" pos:column="25">logging<pos:position pos:line="90" pos:column="32"/></name><operator pos:line="90" pos:column="32">.<pos:position pos:line="90" pos:column="33"/></operator><name pos:line="90" pos:column="33">Level<pos:position pos:line="90" pos:column="38"/></name><operator pos:line="90" pos:column="38">.<pos:position pos:line="90" pos:column="39"/></operator><name pos:line="90" pos:column="39">WARNING<pos:position pos:line="90" pos:column="46"/></name></name>;<pos:position pos:line="90" pos:column="47"/></import>

<import pos:line="92" pos:column="1">import <name><name pos:line="92" pos:column="8">jenkins<pos:position pos:line="92" pos:column="15"/></name><operator pos:line="92" pos:column="15">.<pos:position pos:line="92" pos:column="16"/></operator><name pos:line="92" pos:column="16">model<pos:position pos:line="92" pos:column="21"/></name><operator pos:line="92" pos:column="21">.<pos:position pos:line="92" pos:column="22"/></operator><name pos:line="92" pos:column="22">lazy<pos:position pos:line="92" pos:column="26"/></name><operator pos:line="92" pos:column="26">.<pos:position pos:line="92" pos:column="27"/></operator><name pos:line="92" pos:column="27">BuildReference<pos:position pos:line="92" pos:column="41"/></name></name>;<pos:position pos:line="92" pos:column="42"/></import>
<import pos:line="93" pos:column="1">import <name><name pos:line="93" pos:column="8">jenkins<pos:position pos:line="93" pos:column="15"/></name><operator pos:line="93" pos:column="15">.<pos:position pos:line="93" pos:column="16"/></operator><name pos:line="93" pos:column="16">model<pos:position pos:line="93" pos:column="21"/></name><operator pos:line="93" pos:column="21">.<pos:position pos:line="93" pos:column="22"/></operator><name pos:line="93" pos:column="22">lazy<pos:position pos:line="93" pos:column="26"/></name><operator pos:line="93" pos:column="26">.<pos:position pos:line="93" pos:column="27"/></operator><name pos:line="93" pos:column="27">LazyBuildMixIn<pos:position pos:line="93" pos:column="41"/></name></name>;<pos:position pos:line="93" pos:column="42"/></import>
<import pos:line="94" pos:column="1">import <name><name pos:line="94" pos:column="8">org<pos:position pos:line="94" pos:column="11"/></name><operator pos:line="94" pos:column="11">.<pos:position pos:line="94" pos:column="12"/></operator><name pos:line="94" pos:column="12">kohsuke<pos:position pos:line="94" pos:column="19"/></name><operator pos:line="94" pos:column="19">.<pos:position pos:line="94" pos:column="20"/></operator><name pos:line="94" pos:column="20">accmod<pos:position pos:line="94" pos:column="26"/></name><operator pos:line="94" pos:column="26">.<pos:position pos:line="94" pos:column="27"/></operator><name pos:line="94" pos:column="27">Restricted<pos:position pos:line="94" pos:column="37"/></name></name>;<pos:position pos:line="94" pos:column="38"/></import>
<import pos:line="95" pos:column="1">import <name><name pos:line="95" pos:column="8">org<pos:position pos:line="95" pos:column="11"/></name><operator pos:line="95" pos:column="11">.<pos:position pos:line="95" pos:column="12"/></operator><name pos:line="95" pos:column="12">kohsuke<pos:position pos:line="95" pos:column="19"/></name><operator pos:line="95" pos:column="19">.<pos:position pos:line="95" pos:column="20"/></operator><name pos:line="95" pos:column="20">accmod<pos:position pos:line="95" pos:column="26"/></name><operator pos:line="95" pos:column="26">.<pos:position pos:line="95" pos:column="27"/></operator><name pos:line="95" pos:column="27">restrictions<pos:position pos:line="95" pos:column="39"/></name><operator pos:line="95" pos:column="39">.<pos:position pos:line="95" pos:column="40"/></operator><name pos:line="95" pos:column="40">DoNotUse<pos:position pos:line="95" pos:column="48"/></name></name>;<pos:position pos:line="95" pos:column="49"/></import>

<comment type="block" format="javadoc" pos:line="97" pos:column="1">/**
 * Base implementation of {@link Run}s that build software.
 *
 * For now this is primarily the common part of {@link Build} and MavenBuild.
 *
 * @author Kohsuke Kawaguchi
 * @see AbstractProject
 */</comment>
<class><specifier pos:line="105" pos:column="1">public<pos:position pos:line="105" pos:column="7"/></specifier> <specifier pos:line="105" pos:column="8">abstract<pos:position pos:line="105" pos:column="16"/></specifier> class <name><name pos:line="105" pos:column="23">AbstractBuild<pos:position pos:line="105" pos:column="36"/></name><parameter_list pos:line="105" pos:column="36">&lt;<parameter><name pos:line="105" pos:column="37">P<pos:position pos:line="105" pos:column="38"/></name> <extends pos:line="105" pos:column="39">extends <name><name pos:line="105" pos:column="47">AbstractProject<pos:position pos:line="105" pos:column="62"/></name><parameter_list pos:line="105" pos:column="62">&lt;<parameter><name pos:line="105" pos:column="63">P<pos:position pos:line="105" pos:column="64"/></name></parameter>,<parameter><name pos:line="105" pos:column="65">R<pos:position pos:line="105" pos:column="66"/></name></parameter>&gt;<pos:position pos:line="105" pos:column="70"/></parameter_list></name></extends></parameter>,<parameter><name pos:line="105" pos:column="68">R<pos:position pos:line="105" pos:column="69"/></name> <extends pos:line="105" pos:column="70">extends <name><name pos:line="105" pos:column="78">AbstractBuild<pos:position pos:line="105" pos:column="91"/></name><parameter_list pos:line="105" pos:column="91">&lt;<parameter><name pos:line="105" pos:column="92">P<pos:position pos:line="105" pos:column="93"/></name></parameter>,<parameter><name pos:line="105" pos:column="94">R<pos:position pos:line="105" pos:column="95"/></name></parameter>&gt;<pos:position pos:line="105" pos:column="99"/></parameter_list></name></extends></parameter>&gt;<pos:position pos:line="105" pos:column="100"/></parameter_list></name> <super><extends pos:line="105" pos:column="98">extends <name><name pos:line="105" pos:column="106">Run<pos:position pos:line="105" pos:column="109"/></name><argument_list type="generic" pos:line="105" pos:column="109">&lt;<argument><name pos:line="105" pos:column="110">P<pos:position pos:line="105" pos:column="111"/></name></argument>,<argument><name pos:line="105" pos:column="112">R<pos:position pos:line="105" pos:column="113"/></name></argument>&gt;<pos:position pos:line="105" pos:column="117"/></argument_list></name></extends> <implements pos:line="105" pos:column="115">implements <name><name pos:line="105" pos:column="126">Queue<pos:position pos:line="105" pos:column="131"/></name><operator pos:line="105" pos:column="131">.<pos:position pos:line="105" pos:column="132"/></operator><name pos:line="105" pos:column="132">Executable<pos:position pos:line="105" pos:column="142"/></name></name>, <name><name pos:line="105" pos:column="144">LazyBuildMixIn<pos:position pos:line="105" pos:column="158"/></name><operator pos:line="105" pos:column="158">.<pos:position pos:line="105" pos:column="159"/></operator><name><name pos:line="105" pos:column="159">LazyLoadingRun<pos:position pos:line="105" pos:column="173"/></name><argument_list type="generic" pos:line="105" pos:column="173">&lt;<argument><name pos:line="105" pos:column="174">P<pos:position pos:line="105" pos:column="175"/></name></argument>,<argument><name pos:line="105" pos:column="176">R<pos:position pos:line="105" pos:column="177"/></name></argument>&gt;<pos:position pos:line="105" pos:column="181"/></argument_list></name></name></implements></super> <block pos:line="105" pos:column="179">{

    <comment type="block" format="javadoc" pos:line="107" pos:column="5">/**
     * Set if we want the blame information to flow from upstream to downstream build.
     */</comment>
    <decl_stmt><decl><specifier pos:line="110" pos:column="5">private<pos:position pos:line="110" pos:column="12"/></specifier> <specifier pos:line="110" pos:column="13">static<pos:position pos:line="110" pos:column="19"/></specifier> <type><specifier pos:line="110" pos:column="20">final<pos:position pos:line="110" pos:column="25"/></specifier> <name pos:line="110" pos:column="26">boolean<pos:position pos:line="110" pos:column="33"/></name></type> <name pos:line="110" pos:column="34">upstreamCulprits<pos:position pos:line="110" pos:column="50"/></name> <init pos:line="110" pos:column="51">= <expr><call><name><name pos:line="110" pos:column="53">SystemProperties<pos:position pos:line="110" pos:column="69"/></name><operator pos:line="110" pos:column="69">.<pos:position pos:line="110" pos:column="70"/></operator><name pos:line="110" pos:column="70">getBoolean<pos:position pos:line="110" pos:column="80"/></name></name><argument_list pos:line="110" pos:column="80">(<argument><expr><literal type="string" pos:line="110" pos:column="81">"hudson.upstreamCulprits"<pos:position pos:line="110" pos:column="106"/></literal></expr></argument>)<pos:position pos:line="110" pos:column="107"/></argument_list></call></expr></init></decl>;<pos:position pos:line="110" pos:column="108"/></decl_stmt>

    <comment type="block" format="javadoc" pos:line="112" pos:column="5">/**
     * Name of the agent this project was built on.
     * Null or "" if built by the master. (null happens when we read old record that didn't have this information.)
     */</comment>
    <decl_stmt><decl><specifier pos:line="116" pos:column="5">private<pos:position pos:line="116" pos:column="12"/></specifier> <type><name pos:line="116" pos:column="13">String<pos:position pos:line="116" pos:column="19"/></name></type> <name pos:line="116" pos:column="20">builtOn<pos:position pos:line="116" pos:column="27"/></name></decl>;<pos:position pos:line="116" pos:column="28"/></decl_stmt>

    <comment type="block" format="javadoc" pos:line="118" pos:column="5">/**
     * The file path on the node that performed a build. Kept as a string since {@link FilePath} is not serializable into XML.
     * @since 1.319
     */</comment>
    <decl_stmt><decl><specifier pos:line="122" pos:column="5">private<pos:position pos:line="122" pos:column="12"/></specifier> <type><name pos:line="122" pos:column="13">String<pos:position pos:line="122" pos:column="19"/></name></type> <name pos:line="122" pos:column="20">workspace<pos:position pos:line="122" pos:column="29"/></name></decl>;<pos:position pos:line="122" pos:column="30"/></decl_stmt>

    <comment type="block" format="javadoc" pos:line="124" pos:column="5">/**
     * Version of Hudson that built this.
     */</comment>
    <decl_stmt><decl><specifier pos:line="127" pos:column="5">private<pos:position pos:line="127" pos:column="12"/></specifier> <type><name pos:line="127" pos:column="13">String<pos:position pos:line="127" pos:column="19"/></name></type> <name pos:line="127" pos:column="20">hudsonVersion<pos:position pos:line="127" pos:column="33"/></name></decl>;<pos:position pos:line="127" pos:column="34"/></decl_stmt>

    <comment type="block" format="javadoc" pos:line="129" pos:column="5">/**
     * SCM used for this build.
     */</comment>
    <decl_stmt><decl><specifier pos:line="132" pos:column="5">private<pos:position pos:line="132" pos:column="12"/></specifier> <type><name pos:line="132" pos:column="13">ChangeLogParser<pos:position pos:line="132" pos:column="28"/></name></type> <name pos:line="132" pos:column="29">scm<pos:position pos:line="132" pos:column="32"/></name></decl>;<pos:position pos:line="132" pos:column="33"/></decl_stmt>

    <comment type="block" format="javadoc" pos:line="134" pos:column="5">/**
     * Changes in this build.
     */</comment>
    <decl_stmt><decl><specifier pos:line="137" pos:column="5">private<pos:position pos:line="137" pos:column="12"/></specifier> <type><specifier pos:line="137" pos:column="13">volatile<pos:position pos:line="137" pos:column="21"/></specifier> <specifier pos:line="137" pos:column="22">transient<pos:position pos:line="137" pos:column="31"/></specifier> <name><name pos:line="137" pos:column="32">WeakReference<pos:position pos:line="137" pos:column="45"/></name><argument_list type="generic" pos:line="137" pos:column="45">&lt;<argument><name><name pos:line="137" pos:column="46">ChangeLogSet<pos:position pos:line="137" pos:column="58"/></name><argument_list type="generic" pos:line="137" pos:column="58">&lt;<argument><name pos:line="137" pos:column="59">?<pos:position pos:line="137" pos:column="60"/></name> <extends pos:line="137" pos:column="61">extends <name pos:line="137" pos:column="69">Entry<pos:position pos:line="137" pos:column="74"/></name></extends></argument>&gt;<pos:position pos:line="137" pos:column="78"/></argument_list></name></argument>&gt;<pos:position pos:line="137" pos:column="79"/></argument_list></name></type> <name pos:line="137" pos:column="77">changeSet<pos:position pos:line="137" pos:column="86"/></name></decl>;<pos:position pos:line="137" pos:column="87"/></decl_stmt>

    <comment type="block" format="javadoc" pos:line="139" pos:column="5">/**
     * Cumulative list of people who contributed to the build problem.
     *
     * &lt;p&gt;
     * This is a list of {@link User#getId() user ids} who made a change
     * since the last non-broken build. Can be null (which should be
     * treated like empty set), because of the compatibility.
     *
     * &lt;p&gt;
     * This field is semi-final --- once set the value will never be modified.
     *
     * @since 1.137
     */</comment>
    <decl_stmt><decl><specifier pos:line="152" pos:column="5">private<pos:position pos:line="152" pos:column="12"/></specifier> <type><specifier pos:line="152" pos:column="13">volatile<pos:position pos:line="152" pos:column="21"/></specifier> <name><name pos:line="152" pos:column="22">Set<pos:position pos:line="152" pos:column="25"/></name><argument_list type="generic" pos:line="152" pos:column="25">&lt;<argument><name pos:line="152" pos:column="26">String<pos:position pos:line="152" pos:column="32"/></name></argument>&gt;<pos:position pos:line="152" pos:column="36"/></argument_list></name></type> <name pos:line="152" pos:column="34">culprits<pos:position pos:line="152" pos:column="42"/></name></decl>;<pos:position pos:line="152" pos:column="43"/></decl_stmt>

    <comment type="block" format="javadoc" pos:line="154" pos:column="5">/**
     * During the build this field remembers {@link hudson.tasks.BuildWrapper.Environment}s created by
     * {@link BuildWrapper}. This design is bit ugly but forced due to compatibility.
     */</comment>
    <decl_stmt><decl><specifier pos:line="158" pos:column="5">protected<pos:position pos:line="158" pos:column="14"/></specifier> <specifier pos:line="158" pos:column="15">transient<pos:position pos:line="158" pos:column="24"/></specifier> <type><name><name pos:line="158" pos:column="25">List<pos:position pos:line="158" pos:column="29"/></name><argument_list type="generic" pos:line="158" pos:column="29">&lt;<argument><name pos:line="158" pos:column="30">Environment<pos:position pos:line="158" pos:column="41"/></name></argument>&gt;<pos:position pos:line="158" pos:column="45"/></argument_list></name></type> <name pos:line="158" pos:column="43">buildEnvironments<pos:position pos:line="158" pos:column="60"/></name></decl>;<pos:position pos:line="158" pos:column="61"/></decl_stmt>

    <decl_stmt><decl><specifier pos:line="160" pos:column="5">private<pos:position pos:line="160" pos:column="12"/></specifier> <specifier pos:line="160" pos:column="13">transient<pos:position pos:line="160" pos:column="22"/></specifier> <type><specifier pos:line="160" pos:column="23">final<pos:position pos:line="160" pos:column="28"/></specifier> <name><name pos:line="160" pos:column="29">LazyBuildMixIn<pos:position pos:line="160" pos:column="43"/></name><operator pos:line="160" pos:column="43">.<pos:position pos:line="160" pos:column="44"/></operator><name><name pos:line="160" pos:column="44">RunMixIn<pos:position pos:line="160" pos:column="52"/></name><argument_list type="generic" pos:line="160" pos:column="52">&lt;<argument><name pos:line="160" pos:column="53">P<pos:position pos:line="160" pos:column="54"/></name></argument>,<argument><name pos:line="160" pos:column="55">R<pos:position pos:line="160" pos:column="56"/></name></argument>&gt;<pos:position pos:line="160" pos:column="60"/></argument_list></name></name></type> <name pos:line="160" pos:column="58">runMixIn<pos:position pos:line="160" pos:column="66"/></name> <init pos:line="160" pos:column="67">= <expr><operator pos:line="160" pos:column="69">new<pos:position pos:line="160" pos:column="72"/></operator> <class><super><name><name pos:line="160" pos:column="73">LazyBuildMixIn<pos:position pos:line="160" pos:column="87"/></name><operator pos:line="160" pos:column="87">.<pos:position pos:line="160" pos:column="88"/></operator><name><name pos:line="160" pos:column="88">RunMixIn<pos:position pos:line="160" pos:column="96"/></name><argument_list type="generic" pos:line="160" pos:column="96">&lt;<argument><name pos:line="160" pos:column="97">P<pos:position pos:line="160" pos:column="98"/></name></argument>,<argument><name pos:line="160" pos:column="99">R<pos:position pos:line="160" pos:column="100"/></name></argument>&gt;<pos:position pos:line="160" pos:column="104"/></argument_list></name></name></super><argument_list pos:line="160" pos:column="101">()<pos:position pos:line="160" pos:column="103"/></argument_list> <block pos:line="160" pos:column="104">{
        <function><annotation pos:line="161" pos:column="9">@<name pos:line="161" pos:column="10">Override<pos:position pos:line="161" pos:column="18"/></name></annotation> <specifier pos:line="161" pos:column="19">protected<pos:position pos:line="161" pos:column="28"/></specifier> <type><name pos:line="161" pos:column="29">R<pos:position pos:line="161" pos:column="30"/></name></type> <name pos:line="161" pos:column="31">asRun<pos:position pos:line="161" pos:column="36"/></name><parameter_list pos:line="161" pos:column="36">()<pos:position pos:line="161" pos:column="38"/></parameter_list> <block pos:line="161" pos:column="39">{
            <return pos:line="162" pos:column="13">return <expr><call><name pos:line="162" pos:column="20">_this<pos:position pos:line="162" pos:column="25"/></name><argument_list pos:line="162" pos:column="25">()<pos:position pos:line="162" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="162" pos:column="28"/></return>
        }<pos:position pos:line="163" pos:column="10"/></block></function>
    }<pos:position pos:line="164" pos:column="6"/></block></class></expr></init></decl>;<pos:position pos:line="164" pos:column="7"/></decl_stmt>

    <constructor><specifier pos:line="166" pos:column="5">protected<pos:position pos:line="166" pos:column="14"/></specifier> <name pos:line="166" pos:column="15">AbstractBuild<pos:position pos:line="166" pos:column="28"/></name><parameter_list pos:line="166" pos:column="28">(<parameter><decl><type><name pos:line="166" pos:column="29">P<pos:position pos:line="166" pos:column="30"/></name></type> <name pos:line="166" pos:column="31">job<pos:position pos:line="166" pos:column="34"/></name></decl></parameter>)<pos:position pos:line="166" pos:column="35"/></parameter_list> <throws pos:line="166" pos:column="36">throws <argument><expr><name pos:line="166" pos:column="43">IOException<pos:position pos:line="166" pos:column="54"/></name></expr></argument></throws> <block pos:line="166" pos:column="55">{
        <expr_stmt><expr><call><name pos:line="167" pos:column="9">super<pos:position pos:line="167" pos:column="14"/></name><argument_list pos:line="167" pos:column="14">(<argument><expr><name pos:line="167" pos:column="15">job<pos:position pos:line="167" pos:column="18"/></name></expr></argument>)<pos:position pos:line="167" pos:column="19"/></argument_list></call></expr>;<pos:position pos:line="167" pos:column="20"/></expr_stmt>
    }<pos:position pos:line="168" pos:column="6"/></block></constructor>

    <constructor><specifier pos:line="170" pos:column="5">protected<pos:position pos:line="170" pos:column="14"/></specifier> <name pos:line="170" pos:column="15">AbstractBuild<pos:position pos:line="170" pos:column="28"/></name><parameter_list pos:line="170" pos:column="28">(<parameter><decl><type><name pos:line="170" pos:column="29">P<pos:position pos:line="170" pos:column="30"/></name></type> <name pos:line="170" pos:column="31">job<pos:position pos:line="170" pos:column="34"/></name></decl></parameter>, <parameter><decl><type><name pos:line="170" pos:column="36">Calendar<pos:position pos:line="170" pos:column="44"/></name></type> <name pos:line="170" pos:column="45">timestamp<pos:position pos:line="170" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="170" pos:column="55"/></parameter_list> <block pos:line="170" pos:column="56">{
        <expr_stmt><expr><call><name pos:line="171" pos:column="9">super<pos:position pos:line="171" pos:column="14"/></name><argument_list pos:line="171" pos:column="14">(<argument><expr><name pos:line="171" pos:column="15">job<pos:position pos:line="171" pos:column="18"/></name></expr></argument>, <argument><expr><name pos:line="171" pos:column="20">timestamp<pos:position pos:line="171" pos:column="29"/></name></expr></argument>)<pos:position pos:line="171" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="171" pos:column="31"/></expr_stmt>
    }<pos:position pos:line="172" pos:column="6"/></block></constructor>

    <constructor><specifier pos:line="174" pos:column="5">protected<pos:position pos:line="174" pos:column="14"/></specifier> <name pos:line="174" pos:column="15">AbstractBuild<pos:position pos:line="174" pos:column="28"/></name><parameter_list pos:line="174" pos:column="28">(<parameter><decl><type><name pos:line="174" pos:column="29">P<pos:position pos:line="174" pos:column="30"/></name></type> <name pos:line="174" pos:column="31">project<pos:position pos:line="174" pos:column="38"/></name></decl></parameter>, <parameter><decl><type><name pos:line="174" pos:column="40">File<pos:position pos:line="174" pos:column="44"/></name></type> <name pos:line="174" pos:column="45">buildDir<pos:position pos:line="174" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="174" pos:column="54"/></parameter_list> <throws pos:line="174" pos:column="55">throws <argument><expr><name pos:line="174" pos:column="62">IOException<pos:position pos:line="174" pos:column="73"/></name></expr></argument></throws> <block pos:line="174" pos:column="74">{
        <expr_stmt><expr><call><name pos:line="175" pos:column="9">super<pos:position pos:line="175" pos:column="14"/></name><argument_list pos:line="175" pos:column="14">(<argument><expr><name pos:line="175" pos:column="15">project<pos:position pos:line="175" pos:column="22"/></name></expr></argument>, <argument><expr><name pos:line="175" pos:column="24">buildDir<pos:position pos:line="175" pos:column="32"/></name></expr></argument>)<pos:position pos:line="175" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="175" pos:column="34"/></expr_stmt>
    }<pos:position pos:line="176" pos:column="6"/></block></constructor>

    <function><specifier pos:line="178" pos:column="5">public<pos:position pos:line="178" pos:column="11"/></specifier> <specifier pos:line="178" pos:column="12">final<pos:position pos:line="178" pos:column="17"/></specifier> <type><name pos:line="178" pos:column="18">P<pos:position pos:line="178" pos:column="19"/></name></type> <name pos:line="178" pos:column="20">getProject<pos:position pos:line="178" pos:column="30"/></name><parameter_list pos:line="178" pos:column="30">()<pos:position pos:line="178" pos:column="32"/></parameter_list> <block pos:line="178" pos:column="33">{
        <return pos:line="179" pos:column="9">return <expr><call><name pos:line="179" pos:column="16">getParent<pos:position pos:line="179" pos:column="25"/></name><argument_list pos:line="179" pos:column="25">()<pos:position pos:line="179" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="179" pos:column="28"/></return>
    }<pos:position pos:line="180" pos:column="6"/></block></function>

    <function><annotation pos:line="182" pos:column="5">@<name pos:line="182" pos:column="6">Override<pos:position pos:line="182" pos:column="14"/></name></annotation> <specifier pos:line="182" pos:column="15">public<pos:position pos:line="182" pos:column="21"/></specifier> <specifier pos:line="182" pos:column="22">final<pos:position pos:line="182" pos:column="27"/></specifier> <type><name><name pos:line="182" pos:column="28">LazyBuildMixIn<pos:position pos:line="182" pos:column="42"/></name><operator pos:line="182" pos:column="42">.<pos:position pos:line="182" pos:column="43"/></operator><name><name pos:line="182" pos:column="43">RunMixIn<pos:position pos:line="182" pos:column="51"/></name><argument_list type="generic" pos:line="182" pos:column="51">&lt;<argument><name pos:line="182" pos:column="52">P<pos:position pos:line="182" pos:column="53"/></name></argument>,<argument><name pos:line="182" pos:column="54">R<pos:position pos:line="182" pos:column="55"/></name></argument>&gt;<pos:position pos:line="182" pos:column="59"/></argument_list></name></name></type> <name pos:line="182" pos:column="57">getRunMixIn<pos:position pos:line="182" pos:column="68"/></name><parameter_list pos:line="182" pos:column="68">()<pos:position pos:line="182" pos:column="70"/></parameter_list> <block pos:line="182" pos:column="71">{
        <return pos:line="183" pos:column="9">return <expr><name pos:line="183" pos:column="16">runMixIn<pos:position pos:line="183" pos:column="24"/></name></expr>;<pos:position pos:line="183" pos:column="25"/></return>
    }<pos:position pos:line="184" pos:column="6"/></block></function>

    <function><annotation pos:line="186" pos:column="5">@<name pos:line="186" pos:column="6">Override<pos:position pos:line="186" pos:column="14"/></name></annotation> <specifier pos:line="186" pos:column="15">protected<pos:position pos:line="186" pos:column="24"/></specifier> <specifier pos:line="186" pos:column="25">final<pos:position pos:line="186" pos:column="30"/></specifier> <type><name><name pos:line="186" pos:column="31">BuildReference<pos:position pos:line="186" pos:column="45"/></name><argument_list type="generic" pos:line="186" pos:column="45">&lt;<argument><name pos:line="186" pos:column="46">R<pos:position pos:line="186" pos:column="47"/></name></argument>&gt;<pos:position pos:line="186" pos:column="51"/></argument_list></name></type> <name pos:line="186" pos:column="49">createReference<pos:position pos:line="186" pos:column="64"/></name><parameter_list pos:line="186" pos:column="64">()<pos:position pos:line="186" pos:column="66"/></parameter_list> <block pos:line="186" pos:column="67">{
        <return pos:line="187" pos:column="9">return <expr><call><name pos:line="187" pos:column="16">getRunMixIn<pos:position pos:line="187" pos:column="27"/></name><argument_list pos:line="187" pos:column="27">()<pos:position pos:line="187" pos:column="29"/></argument_list></call><operator pos:line="187" pos:column="29">.<pos:position pos:line="187" pos:column="30"/></operator><call><name pos:line="187" pos:column="30">createReference<pos:position pos:line="187" pos:column="45"/></name><argument_list pos:line="187" pos:column="45">()<pos:position pos:line="187" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="187" pos:column="48"/></return>
    }<pos:position pos:line="188" pos:column="6"/></block></function>

    <function><annotation pos:line="190" pos:column="5">@<name pos:line="190" pos:column="6">Override<pos:position pos:line="190" pos:column="14"/></name></annotation> <specifier pos:line="190" pos:column="15">protected<pos:position pos:line="190" pos:column="24"/></specifier> <specifier pos:line="190" pos:column="25">final<pos:position pos:line="190" pos:column="30"/></specifier> <type><name pos:line="190" pos:column="31">void<pos:position pos:line="190" pos:column="35"/></name></type> <name pos:line="190" pos:column="36">dropLinks<pos:position pos:line="190" pos:column="45"/></name><parameter_list pos:line="190" pos:column="45">()<pos:position pos:line="190" pos:column="47"/></parameter_list> <block pos:line="190" pos:column="48">{
        <expr_stmt><expr><call><name pos:line="191" pos:column="9">getRunMixIn<pos:position pos:line="191" pos:column="20"/></name><argument_list pos:line="191" pos:column="20">()<pos:position pos:line="191" pos:column="22"/></argument_list></call><operator pos:line="191" pos:column="22">.<pos:position pos:line="191" pos:column="23"/></operator><call><name pos:line="191" pos:column="23">dropLinks<pos:position pos:line="191" pos:column="32"/></name><argument_list pos:line="191" pos:column="32">()<pos:position pos:line="191" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="191" pos:column="35"/></expr_stmt>
    }<pos:position pos:line="192" pos:column="6"/></block></function>

    <function><annotation pos:line="194" pos:column="5">@<name pos:line="194" pos:column="6">Override<pos:position pos:line="194" pos:column="14"/></name></annotation>
    <specifier pos:line="195" pos:column="5">public<pos:position pos:line="195" pos:column="11"/></specifier> <type><name pos:line="195" pos:column="12">R<pos:position pos:line="195" pos:column="13"/></name></type> <name pos:line="195" pos:column="14">getPreviousBuild<pos:position pos:line="195" pos:column="30"/></name><parameter_list pos:line="195" pos:column="30">()<pos:position pos:line="195" pos:column="32"/></parameter_list> <block pos:line="195" pos:column="33">{
        <return pos:line="196" pos:column="9">return <expr><call><name pos:line="196" pos:column="16">getRunMixIn<pos:position pos:line="196" pos:column="27"/></name><argument_list pos:line="196" pos:column="27">()<pos:position pos:line="196" pos:column="29"/></argument_list></call><operator pos:line="196" pos:column="29">.<pos:position pos:line="196" pos:column="30"/></operator><call><name pos:line="196" pos:column="30">getPreviousBuild<pos:position pos:line="196" pos:column="46"/></name><argument_list pos:line="196" pos:column="46">()<pos:position pos:line="196" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="196" pos:column="49"/></return>
    }<pos:position pos:line="197" pos:column="6"/></block></function>

    <function><annotation pos:line="199" pos:column="5">@<name pos:line="199" pos:column="6">Override<pos:position pos:line="199" pos:column="14"/></name></annotation>
    <specifier pos:line="200" pos:column="5">public<pos:position pos:line="200" pos:column="11"/></specifier> <type><name pos:line="200" pos:column="12">R<pos:position pos:line="200" pos:column="13"/></name></type> <name pos:line="200" pos:column="14">getNextBuild<pos:position pos:line="200" pos:column="26"/></name><parameter_list pos:line="200" pos:column="26">()<pos:position pos:line="200" pos:column="28"/></parameter_list> <block pos:line="200" pos:column="29">{
        <return pos:line="201" pos:column="9">return <expr><call><name pos:line="201" pos:column="16">getRunMixIn<pos:position pos:line="201" pos:column="27"/></name><argument_list pos:line="201" pos:column="27">()<pos:position pos:line="201" pos:column="29"/></argument_list></call><operator pos:line="201" pos:column="29">.<pos:position pos:line="201" pos:column="30"/></operator><call><name pos:line="201" pos:column="30">getNextBuild<pos:position pos:line="201" pos:column="42"/></name><argument_list pos:line="201" pos:column="42">()<pos:position pos:line="201" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="201" pos:column="45"/></return>
    }<pos:position pos:line="202" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="204" pos:column="5">/**
     * Returns a {@link Slave} on which this build was done.
     *
     * @return
     *      null, for example if the agent that this build run no longer exists.
     */</comment>
    <function><specifier pos:line="210" pos:column="5">public<pos:position pos:line="210" pos:column="11"/></specifier> <annotation pos:line="210" pos:column="12">@<name pos:line="210" pos:column="13">CheckForNull<pos:position pos:line="210" pos:column="25"/></name></annotation> <type><name pos:line="210" pos:column="26">Node<pos:position pos:line="210" pos:column="30"/></name></type> <name pos:line="210" pos:column="31">getBuiltOn<pos:position pos:line="210" pos:column="41"/></name><parameter_list pos:line="210" pos:column="41">()<pos:position pos:line="210" pos:column="43"/></parameter_list> <block pos:line="210" pos:column="44">{
        <if pos:line="211" pos:column="9">if <condition pos:line="211" pos:column="12">(<expr><name pos:line="211" pos:column="13">builtOn<pos:position pos:line="211" pos:column="20"/></name><operator pos:line="211" pos:column="20">==<pos:position pos:line="211" pos:column="22"/></operator><literal type="null" pos:line="211" pos:column="22">null<pos:position pos:line="211" pos:column="26"/></literal> <operator pos:line="211" pos:column="27">||<pos:position pos:line="211" pos:column="29"/></operator> <call><name><name pos:line="211" pos:column="30">builtOn<pos:position pos:line="211" pos:column="37"/></name><operator pos:line="211" pos:column="37">.<pos:position pos:line="211" pos:column="38"/></operator><name pos:line="211" pos:column="38">equals<pos:position pos:line="211" pos:column="44"/></name></name><argument_list pos:line="211" pos:column="44">(<argument><expr><literal type="string" pos:line="211" pos:column="45">""<pos:position pos:line="211" pos:column="47"/></literal></expr></argument>)<pos:position pos:line="211" pos:column="48"/></argument_list></call></expr>)<pos:position pos:line="211" pos:column="49"/></condition><then pos:line="211" pos:column="49">
            <block type="pseudo"><return pos:line="212" pos:column="13">return <expr><call><name><name pos:line="212" pos:column="20">Jenkins<pos:position pos:line="212" pos:column="27"/></name><operator pos:line="212" pos:column="27">.<pos:position pos:line="212" pos:column="28"/></operator><name pos:line="212" pos:column="28">getInstance<pos:position pos:line="212" pos:column="39"/></name></name><argument_list pos:line="212" pos:column="39">()<pos:position pos:line="212" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="212" pos:column="42"/></return></block></then>
        <else pos:line="213" pos:column="9">else
            <block type="pseudo"><return pos:line="214" pos:column="13">return <expr><call><name><name pos:line="214" pos:column="20">Jenkins<pos:position pos:line="214" pos:column="27"/></name><operator pos:line="214" pos:column="27">.<pos:position pos:line="214" pos:column="28"/></operator><name pos:line="214" pos:column="28">getInstance<pos:position pos:line="214" pos:column="39"/></name></name><argument_list pos:line="214" pos:column="39">()<pos:position pos:line="214" pos:column="41"/></argument_list></call><operator pos:line="214" pos:column="41">.<pos:position pos:line="214" pos:column="42"/></operator><call><name pos:line="214" pos:column="42">getNode<pos:position pos:line="214" pos:column="49"/></name><argument_list pos:line="214" pos:column="49">(<argument><expr><name pos:line="214" pos:column="50">builtOn<pos:position pos:line="214" pos:column="57"/></name></expr></argument>)<pos:position pos:line="214" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="214" pos:column="59"/></return></block></else></if>
    }<pos:position pos:line="215" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="217" pos:column="5">/**
     * Returns the name of the agent it was built on; null or "" if built by the master.
     * (null happens when we read old record that didn't have this information.)
     */</comment>
    <function><annotation pos:line="221" pos:column="5">@<name pos:line="221" pos:column="6">Exported<pos:position pos:line="221" pos:column="14"/></name><argument_list pos:line="221" pos:column="14">(<argument><expr><name pos:line="221" pos:column="15">name<pos:position pos:line="221" pos:column="19"/></name><operator pos:line="221" pos:column="19">=<pos:position pos:line="221" pos:column="20"/></operator><literal type="string" pos:line="221" pos:column="20">"builtOn"<pos:position pos:line="221" pos:column="29"/></literal></expr></argument>)<pos:position pos:line="221" pos:column="30"/></argument_list></annotation>
    <specifier pos:line="222" pos:column="5">public<pos:position pos:line="222" pos:column="11"/></specifier> <type><name pos:line="222" pos:column="12">String<pos:position pos:line="222" pos:column="18"/></name></type> <name pos:line="222" pos:column="19">getBuiltOnStr<pos:position pos:line="222" pos:column="32"/></name><parameter_list pos:line="222" pos:column="32">()<pos:position pos:line="222" pos:column="34"/></parameter_list> <block pos:line="222" pos:column="35">{
        <return pos:line="223" pos:column="9">return <expr><name pos:line="223" pos:column="16">builtOn<pos:position pos:line="223" pos:column="23"/></name></expr>;<pos:position pos:line="223" pos:column="24"/></return>
    }<pos:position pos:line="224" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="226" pos:column="5">/**
     * Allows subtypes to set the value of {@link #builtOn}.
     * This is used for those implementations where an {@link AbstractBuild} is made 'built' without
     * actually running its {@link #run()} method.
     *
     * @since 1.429
     */</comment>
    <function><specifier pos:line="233" pos:column="5">protected<pos:position pos:line="233" pos:column="14"/></specifier> <type><name pos:line="233" pos:column="15">void<pos:position pos:line="233" pos:column="19"/></name></type> <name pos:line="233" pos:column="20">setBuiltOnStr<pos:position pos:line="233" pos:column="33"/></name><parameter_list pos:line="233" pos:column="33">( <parameter><decl><type><name pos:line="233" pos:column="35">String<pos:position pos:line="233" pos:column="41"/></name></type> <name pos:line="233" pos:column="42">builtOn<pos:position pos:line="233" pos:column="49"/></name></decl></parameter> )<pos:position pos:line="233" pos:column="51"/></parameter_list> <block pos:line="233" pos:column="52">{
        <expr_stmt><expr><name><name pos:line="234" pos:column="9">this<pos:position pos:line="234" pos:column="13"/></name><operator pos:line="234" pos:column="13">.<pos:position pos:line="234" pos:column="14"/></operator><name pos:line="234" pos:column="14">builtOn<pos:position pos:line="234" pos:column="21"/></name></name> <operator pos:line="234" pos:column="22">=<pos:position pos:line="234" pos:column="23"/></operator> <name pos:line="234" pos:column="24">builtOn<pos:position pos:line="234" pos:column="31"/></name></expr>;<pos:position pos:line="234" pos:column="32"/></expr_stmt>
    }<pos:position pos:line="235" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="237" pos:column="5">/**
     * Gets the nearest ancestor {@link AbstractBuild} that belongs to
     * {@linkplain AbstractProject#getRootProject() the root project of getProject()} that
     * dominates/governs/encompasses this build.
     *
     * &lt;p&gt;
     * Some projects (such as matrix projects, Maven projects, or promotion processes) form a tree of jobs,
     * and still in some of them, builds of child projects are related/tied to that of the parent project.
     * In such a case, this method returns the governing build.
     *
     * @return never null. In the worst case the build dominates itself.
     * @since 1.421
     * @see AbstractProject#getRootProject()
     */</comment>
    <function><specifier pos:line="251" pos:column="5">public<pos:position pos:line="251" pos:column="11"/></specifier> <type><name><name pos:line="251" pos:column="12">AbstractBuild<pos:position pos:line="251" pos:column="25"/></name><argument_list type="generic" pos:line="251" pos:column="25">&lt;<argument><name pos:line="251" pos:column="26">?<pos:position pos:line="251" pos:column="27"/></name></argument>,<argument><name pos:line="251" pos:column="28">?<pos:position pos:line="251" pos:column="29"/></name></argument>&gt;<pos:position pos:line="251" pos:column="33"/></argument_list></name></type> <name pos:line="251" pos:column="31">getRootBuild<pos:position pos:line="251" pos:column="43"/></name><parameter_list pos:line="251" pos:column="43">()<pos:position pos:line="251" pos:column="45"/></parameter_list> <block pos:line="251" pos:column="46">{
        <return pos:line="252" pos:column="9">return <expr><name pos:line="252" pos:column="16">this<pos:position pos:line="252" pos:column="20"/></name></expr>;<pos:position pos:line="252" pos:column="21"/></return>
    }<pos:position pos:line="253" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="255" pos:column="5">/**
     * Used to render the side panel "Back to project" link.
     *
     * &lt;p&gt;
     * In a rare situation where a build can be reached from multiple paths,
     * returning different URLs from this method based on situations might
     * be desirable.
     *
     * &lt;p&gt;
     * If you override this method, you'll most likely also want to override
     * {@link #getDisplayName()}.
     */</comment>
    <function><specifier pos:line="267" pos:column="5">public<pos:position pos:line="267" pos:column="11"/></specifier> <type><name pos:line="267" pos:column="12">String<pos:position pos:line="267" pos:column="18"/></name></type> <name pos:line="267" pos:column="19">getUpUrl<pos:position pos:line="267" pos:column="27"/></name><parameter_list pos:line="267" pos:column="27">()<pos:position pos:line="267" pos:column="29"/></parameter_list> <block pos:line="267" pos:column="30">{
        <return pos:line="268" pos:column="9">return <expr><call><name><name pos:line="268" pos:column="16">Functions<pos:position pos:line="268" pos:column="25"/></name><operator pos:line="268" pos:column="25">.<pos:position pos:line="268" pos:column="26"/></operator><name pos:line="268" pos:column="26">getNearestAncestorUrl<pos:position pos:line="268" pos:column="47"/></name></name><argument_list pos:line="268" pos:column="47">(<argument><expr><call><name><name pos:line="268" pos:column="48">Stapler<pos:position pos:line="268" pos:column="55"/></name><operator pos:line="268" pos:column="55">.<pos:position pos:line="268" pos:column="56"/></operator><name pos:line="268" pos:column="56">getCurrentRequest<pos:position pos:line="268" pos:column="73"/></name></name><argument_list pos:line="268" pos:column="73">()<pos:position pos:line="268" pos:column="75"/></argument_list></call></expr></argument>,<argument><expr><call><name pos:line="268" pos:column="76">getParent<pos:position pos:line="268" pos:column="85"/></name><argument_list pos:line="268" pos:column="85">()<pos:position pos:line="268" pos:column="87"/></argument_list></call></expr></argument>)<pos:position pos:line="268" pos:column="88"/></argument_list></call><operator pos:line="268" pos:column="88">+<pos:position pos:line="268" pos:column="89"/></operator><literal type="char" pos:line="268" pos:column="89">'/'<pos:position pos:line="268" pos:column="92"/></literal></expr>;<pos:position pos:line="268" pos:column="93"/></return>
    }<pos:position pos:line="269" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="271" pos:column="5">/**
     * Gets the directory where this build is being built.
     *
     * &lt;p&gt;
     * Note to implementors: to control where the workspace is created, override
     * {@link AbstractBuildExecution#decideWorkspace(Node,WorkspaceList)}.
     *
     * @return
     *      null if the workspace is on an agent that's not connected. Note that once the build is completed,
     *      the workspace may be used to build something else, so the value returned from this method may
     *      no longer show a workspace as it was used for this build.
     * @since 1.319
     */</comment>
    <function><specifier pos:line="284" pos:column="5">public<pos:position pos:line="284" pos:column="11"/></specifier> <specifier pos:line="284" pos:column="12">final<pos:position pos:line="284" pos:column="17"/></specifier> <annotation pos:line="284" pos:column="18">@<name pos:line="284" pos:column="19">CheckForNull<pos:position pos:line="284" pos:column="31"/></name></annotation> <type><name pos:line="284" pos:column="32">FilePath<pos:position pos:line="284" pos:column="40"/></name></type> <name pos:line="284" pos:column="41">getWorkspace<pos:position pos:line="284" pos:column="53"/></name><parameter_list pos:line="284" pos:column="53">()<pos:position pos:line="284" pos:column="55"/></parameter_list> <block pos:line="284" pos:column="56">{
        <if pos:line="285" pos:column="9">if <condition pos:line="285" pos:column="12">(<expr><name pos:line="285" pos:column="13">workspace<pos:position pos:line="285" pos:column="22"/></name><operator pos:line="285" pos:column="22">==<pos:position pos:line="285" pos:column="24"/></operator><literal type="null" pos:line="285" pos:column="24">null<pos:position pos:line="285" pos:column="28"/></literal></expr>)<pos:position pos:line="285" pos:column="29"/></condition><then pos:line="285" pos:column="29"> <block type="pseudo"><return pos:line="285" pos:column="30">return <expr><literal type="null" pos:line="285" pos:column="37">null<pos:position pos:line="285" pos:column="41"/></literal></expr>;<pos:position pos:line="285" pos:column="42"/></return></block></then></if>
        <decl_stmt><decl><type><name pos:line="286" pos:column="9">Node<pos:position pos:line="286" pos:column="13"/></name></type> <name pos:line="286" pos:column="14">n<pos:position pos:line="286" pos:column="15"/></name> <init pos:line="286" pos:column="16">= <expr><call><name pos:line="286" pos:column="18">getBuiltOn<pos:position pos:line="286" pos:column="28"/></name><argument_list pos:line="286" pos:column="28">()<pos:position pos:line="286" pos:column="30"/></argument_list></call></expr></init></decl>;<pos:position pos:line="286" pos:column="31"/></decl_stmt>
        <if pos:line="287" pos:column="9">if <condition pos:line="287" pos:column="12">(<expr><name pos:line="287" pos:column="13">n<pos:position pos:line="287" pos:column="14"/></name><operator pos:line="287" pos:column="14">==<pos:position pos:line="287" pos:column="16"/></operator><literal type="null" pos:line="287" pos:column="16">null<pos:position pos:line="287" pos:column="20"/></literal></expr>)<pos:position pos:line="287" pos:column="21"/></condition><then pos:line="287" pos:column="21"> <block type="pseudo"><return pos:line="287" pos:column="22">return <expr><literal type="null" pos:line="287" pos:column="29">null<pos:position pos:line="287" pos:column="33"/></literal></expr>;<pos:position pos:line="287" pos:column="34"/></return></block></then></if>
        <return pos:line="288" pos:column="9">return <expr><call><name><name pos:line="288" pos:column="16">n<pos:position pos:line="288" pos:column="17"/></name><operator pos:line="288" pos:column="17">.<pos:position pos:line="288" pos:column="18"/></operator><name pos:line="288" pos:column="18">createPath<pos:position pos:line="288" pos:column="28"/></name></name><argument_list pos:line="288" pos:column="28">(<argument><expr><name pos:line="288" pos:column="29">workspace<pos:position pos:line="288" pos:column="38"/></name></expr></argument>)<pos:position pos:line="288" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="288" pos:column="40"/></return>
    }<pos:position pos:line="289" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="291" pos:column="5">/**
     * Normally, a workspace is assigned by {@link hudson.model.Run.RunExecution}, but this lets you set the workspace in case
     * {@link AbstractBuild} is created without a build.
     */</comment>
    <function><specifier pos:line="295" pos:column="5">protected<pos:position pos:line="295" pos:column="14"/></specifier> <type><name pos:line="295" pos:column="15">void<pos:position pos:line="295" pos:column="19"/></name></type> <name pos:line="295" pos:column="20">setWorkspace<pos:position pos:line="295" pos:column="32"/></name><parameter_list pos:line="295" pos:column="32">(<parameter><decl><type><annotation pos:line="295" pos:column="33">@<name pos:line="295" pos:column="34">Nonnull<pos:position pos:line="295" pos:column="41"/></name></annotation> <name pos:line="295" pos:column="42">FilePath<pos:position pos:line="295" pos:column="50"/></name></type> <name pos:line="295" pos:column="51">ws<pos:position pos:line="295" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="295" pos:column="54"/></parameter_list> <block pos:line="295" pos:column="55">{
        <expr_stmt><expr><name><name pos:line="296" pos:column="9">this<pos:position pos:line="296" pos:column="13"/></name><operator pos:line="296" pos:column="13">.<pos:position pos:line="296" pos:column="14"/></operator><name pos:line="296" pos:column="14">workspace<pos:position pos:line="296" pos:column="23"/></name></name> <operator pos:line="296" pos:column="24">=<pos:position pos:line="296" pos:column="25"/></operator> <call><name><name pos:line="296" pos:column="26">ws<pos:position pos:line="296" pos:column="28"/></name><operator pos:line="296" pos:column="28">.<pos:position pos:line="296" pos:column="29"/></operator><name pos:line="296" pos:column="29">getRemote<pos:position pos:line="296" pos:column="38"/></name></name><argument_list pos:line="296" pos:column="38">()<pos:position pos:line="296" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="296" pos:column="41"/></expr_stmt>
    }<pos:position pos:line="297" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="299" pos:column="5">/**
     * Returns the root directory of the checked-out module.
     * &lt;p&gt;
     * This is usually where &lt;tt&gt;pom.xml&lt;/tt&gt;, &lt;tt&gt;build.xml&lt;/tt&gt;
     * and so on exists.
     */</comment>
    <function><specifier pos:line="305" pos:column="5">public<pos:position pos:line="305" pos:column="11"/></specifier> <specifier pos:line="305" pos:column="12">final<pos:position pos:line="305" pos:column="17"/></specifier> <type><name pos:line="305" pos:column="18">FilePath<pos:position pos:line="305" pos:column="26"/></name></type> <name pos:line="305" pos:column="27">getModuleRoot<pos:position pos:line="305" pos:column="40"/></name><parameter_list pos:line="305" pos:column="40">()<pos:position pos:line="305" pos:column="42"/></parameter_list> <block pos:line="305" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="306" pos:column="9">FilePath<pos:position pos:line="306" pos:column="17"/></name></type> <name pos:line="306" pos:column="18">ws<pos:position pos:line="306" pos:column="20"/></name> <init pos:line="306" pos:column="21">= <expr><call><name pos:line="306" pos:column="23">getWorkspace<pos:position pos:line="306" pos:column="35"/></name><argument_list pos:line="306" pos:column="35">()<pos:position pos:line="306" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="306" pos:column="38"/></decl_stmt>
        <if pos:line="307" pos:column="9">if <condition pos:line="307" pos:column="12">(<expr><name pos:line="307" pos:column="13">ws<pos:position pos:line="307" pos:column="15"/></name><operator pos:line="307" pos:column="15">==<pos:position pos:line="307" pos:column="17"/></operator><literal type="null" pos:line="307" pos:column="17">null<pos:position pos:line="307" pos:column="21"/></literal></expr>)<pos:position pos:line="307" pos:column="22"/></condition><then pos:line="307" pos:column="22">    <block type="pseudo"><return pos:line="307" pos:column="26">return <expr><literal type="null" pos:line="307" pos:column="33">null<pos:position pos:line="307" pos:column="37"/></literal></expr>;<pos:position pos:line="307" pos:column="38"/></return></block></then></if>
        <return pos:line="308" pos:column="9">return <expr><call><name pos:line="308" pos:column="16">getParent<pos:position pos:line="308" pos:column="25"/></name><argument_list pos:line="308" pos:column="25">()<pos:position pos:line="308" pos:column="27"/></argument_list></call><operator pos:line="308" pos:column="27">.<pos:position pos:line="308" pos:column="28"/></operator><call><name pos:line="308" pos:column="28">getScm<pos:position pos:line="308" pos:column="34"/></name><argument_list pos:line="308" pos:column="34">()<pos:position pos:line="308" pos:column="36"/></argument_list></call><operator pos:line="308" pos:column="36">.<pos:position pos:line="308" pos:column="37"/></operator><call><name pos:line="308" pos:column="37">getModuleRoot<pos:position pos:line="308" pos:column="50"/></name><argument_list pos:line="308" pos:column="50">(<argument><expr><name pos:line="308" pos:column="51">ws<pos:position pos:line="308" pos:column="53"/></name></expr></argument>, <argument><expr><name pos:line="308" pos:column="55">this<pos:position pos:line="308" pos:column="59"/></name></expr></argument>)<pos:position pos:line="308" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="308" pos:column="61"/></return>
    }<pos:position pos:line="309" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="311" pos:column="5">/**
     * Returns the root directories of all checked-out modules.
     * &lt;p&gt;
     * Some SCMs support checking out multiple modules into the same workspace.
     * In these cases, the returned array will have a length greater than one.
     * @return The roots of all modules checked out from the SCM.
     */</comment>
    <function><specifier pos:line="318" pos:column="5">public<pos:position pos:line="318" pos:column="11"/></specifier> <type><name><name pos:line="318" pos:column="12">FilePath<pos:position pos:line="318" pos:column="20"/></name><index pos:line="318" pos:column="20">[]<pos:position pos:line="318" pos:column="22"/></index></name></type> <name pos:line="318" pos:column="23">getModuleRoots<pos:position pos:line="318" pos:column="37"/></name><parameter_list pos:line="318" pos:column="37">()<pos:position pos:line="318" pos:column="39"/></parameter_list> <block pos:line="318" pos:column="40">{
        <decl_stmt><decl><type><name pos:line="319" pos:column="9">FilePath<pos:position pos:line="319" pos:column="17"/></name></type> <name pos:line="319" pos:column="18">ws<pos:position pos:line="319" pos:column="20"/></name> <init pos:line="319" pos:column="21">= <expr><call><name pos:line="319" pos:column="23">getWorkspace<pos:position pos:line="319" pos:column="35"/></name><argument_list pos:line="319" pos:column="35">()<pos:position pos:line="319" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="319" pos:column="38"/></decl_stmt>
        <if pos:line="320" pos:column="9">if <condition pos:line="320" pos:column="12">(<expr><name pos:line="320" pos:column="13">ws<pos:position pos:line="320" pos:column="15"/></name><operator pos:line="320" pos:column="15">==<pos:position pos:line="320" pos:column="17"/></operator><literal type="null" pos:line="320" pos:column="17">null<pos:position pos:line="320" pos:column="21"/></literal></expr>)<pos:position pos:line="320" pos:column="22"/></condition><then pos:line="320" pos:column="22">    <block type="pseudo"><return pos:line="320" pos:column="26">return <expr><literal type="null" pos:line="320" pos:column="33">null<pos:position pos:line="320" pos:column="37"/></literal></expr>;<pos:position pos:line="320" pos:column="38"/></return></block></then></if>
        <return pos:line="321" pos:column="9">return <expr><call><name pos:line="321" pos:column="16">getParent<pos:position pos:line="321" pos:column="25"/></name><argument_list pos:line="321" pos:column="25">()<pos:position pos:line="321" pos:column="27"/></argument_list></call><operator pos:line="321" pos:column="27">.<pos:position pos:line="321" pos:column="28"/></operator><call><name pos:line="321" pos:column="28">getScm<pos:position pos:line="321" pos:column="34"/></name><argument_list pos:line="321" pos:column="34">()<pos:position pos:line="321" pos:column="36"/></argument_list></call><operator pos:line="321" pos:column="36">.<pos:position pos:line="321" pos:column="37"/></operator><call><name pos:line="321" pos:column="37">getModuleRoots<pos:position pos:line="321" pos:column="51"/></name><argument_list pos:line="321" pos:column="51">(<argument><expr><name pos:line="321" pos:column="52">ws<pos:position pos:line="321" pos:column="54"/></name></expr></argument>, <argument><expr><name pos:line="321" pos:column="56">this<pos:position pos:line="321" pos:column="60"/></name></expr></argument>)<pos:position pos:line="321" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="321" pos:column="62"/></return>
    }<pos:position pos:line="322" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="324" pos:column="5">/**
     * List of users who committed a change since the last non-broken build till now.
     *
     * &lt;p&gt;
     * This list at least always include people who made changes in this build, but
     * if the previous build was a failure it also includes the culprit list from there.
     *
     * @return
     *      can be empty but never null.
     */</comment>
    <function><annotation pos:line="334" pos:column="5">@<name pos:line="334" pos:column="6">Exported<pos:position pos:line="334" pos:column="14"/></name></annotation>
    <specifier pos:line="335" pos:column="5">public<pos:position pos:line="335" pos:column="11"/></specifier> <type><name><name pos:line="335" pos:column="12">Set<pos:position pos:line="335" pos:column="15"/></name><argument_list type="generic" pos:line="335" pos:column="15">&lt;<argument><name pos:line="335" pos:column="16">User<pos:position pos:line="335" pos:column="20"/></name></argument>&gt;<pos:position pos:line="335" pos:column="24"/></argument_list></name></type> <name pos:line="335" pos:column="22">getCulprits<pos:position pos:line="335" pos:column="33"/></name><parameter_list pos:line="335" pos:column="33">()<pos:position pos:line="335" pos:column="35"/></parameter_list> <block pos:line="335" pos:column="36">{
        <if pos:line="336" pos:column="9">if <condition pos:line="336" pos:column="12">(<expr><name pos:line="336" pos:column="13">culprits<pos:position pos:line="336" pos:column="21"/></name><operator pos:line="336" pos:column="21">==<pos:position pos:line="336" pos:column="23"/></operator><literal type="null" pos:line="336" pos:column="23">null<pos:position pos:line="336" pos:column="27"/></literal></expr>)<pos:position pos:line="336" pos:column="28"/></condition><then pos:line="336" pos:column="28"> <block pos:line="336" pos:column="29">{
            <decl_stmt><decl><type><name><name pos:line="337" pos:column="13">Set<pos:position pos:line="337" pos:column="16"/></name><argument_list type="generic" pos:line="337" pos:column="16">&lt;<argument><name pos:line="337" pos:column="17">User<pos:position pos:line="337" pos:column="21"/></name></argument>&gt;<pos:position pos:line="337" pos:column="25"/></argument_list></name></type> <name pos:line="337" pos:column="23">r<pos:position pos:line="337" pos:column="24"/></name> <init pos:line="337" pos:column="25">= <expr><operator pos:line="337" pos:column="27">new<pos:position pos:line="337" pos:column="30"/></operator> <call><name><name pos:line="337" pos:column="31">HashSet<pos:position pos:line="337" pos:column="38"/></name><argument_list type="generic" pos:line="337" pos:column="38">&lt;<argument><name pos:line="337" pos:column="39">User<pos:position pos:line="337" pos:column="43"/></name></argument>&gt;<pos:position pos:line="337" pos:column="47"/></argument_list></name><argument_list pos:line="337" pos:column="44">()<pos:position pos:line="337" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="337" pos:column="47"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="338" pos:column="13">R<pos:position pos:line="338" pos:column="14"/></name></type> <name pos:line="338" pos:column="15">p<pos:position pos:line="338" pos:column="16"/></name> <init pos:line="338" pos:column="17">= <expr><call><name pos:line="338" pos:column="19">getPreviousCompletedBuild<pos:position pos:line="338" pos:column="44"/></name><argument_list pos:line="338" pos:column="44">()<pos:position pos:line="338" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="338" pos:column="47"/></decl_stmt>
            <if pos:line="339" pos:column="13">if <condition pos:line="339" pos:column="16">(<expr><name pos:line="339" pos:column="17">p<pos:position pos:line="339" pos:column="18"/></name> <operator pos:line="339" pos:column="19">!=<pos:position pos:line="339" pos:column="21"/></operator><literal type="null" pos:line="339" pos:column="21">null<pos:position pos:line="339" pos:column="25"/></literal> <operator pos:line="339" pos:column="26">&amp;&amp;<pos:position pos:line="339" pos:column="36"/></operator> <call><name pos:line="339" pos:column="29">isBuilding<pos:position pos:line="339" pos:column="39"/></name><argument_list pos:line="339" pos:column="39">()<pos:position pos:line="339" pos:column="41"/></argument_list></call></expr>)<pos:position pos:line="339" pos:column="42"/></condition><then pos:line="339" pos:column="42"> <block pos:line="339" pos:column="43">{
                <decl_stmt><decl><type><name pos:line="340" pos:column="17">Result<pos:position pos:line="340" pos:column="23"/></name></type> <name pos:line="340" pos:column="24">pr<pos:position pos:line="340" pos:column="26"/></name> <init pos:line="340" pos:column="27">= <expr><call><name><name pos:line="340" pos:column="29">p<pos:position pos:line="340" pos:column="30"/></name><operator pos:line="340" pos:column="30">.<pos:position pos:line="340" pos:column="31"/></operator><name pos:line="340" pos:column="31">getResult<pos:position pos:line="340" pos:column="40"/></name></name><argument_list pos:line="340" pos:column="40">()<pos:position pos:line="340" pos:column="42"/></argument_list></call></expr></init></decl>;<pos:position pos:line="340" pos:column="43"/></decl_stmt>
                <if pos:line="341" pos:column="17">if <condition pos:line="341" pos:column="20">(<expr><name pos:line="341" pos:column="21">pr<pos:position pos:line="341" pos:column="23"/></name><operator pos:line="341" pos:column="23">!=<pos:position pos:line="341" pos:column="25"/></operator><literal type="null" pos:line="341" pos:column="25">null<pos:position pos:line="341" pos:column="29"/></literal> <operator pos:line="341" pos:column="30">&amp;&amp;<pos:position pos:line="341" pos:column="40"/></operator> <call><name><name pos:line="341" pos:column="33">pr<pos:position pos:line="341" pos:column="35"/></name><operator pos:line="341" pos:column="35">.<pos:position pos:line="341" pos:column="36"/></operator><name pos:line="341" pos:column="36">isWorseThan<pos:position pos:line="341" pos:column="47"/></name></name><argument_list pos:line="341" pos:column="47">(<argument><expr><name><name pos:line="341" pos:column="48">Result<pos:position pos:line="341" pos:column="54"/></name><operator pos:line="341" pos:column="54">.<pos:position pos:line="341" pos:column="55"/></operator><name pos:line="341" pos:column="55">SUCCESS<pos:position pos:line="341" pos:column="62"/></name></name></expr></argument>)<pos:position pos:line="341" pos:column="63"/></argument_list></call></expr>)<pos:position pos:line="341" pos:column="64"/></condition><then pos:line="341" pos:column="64"> <block pos:line="341" pos:column="65">{
                    <comment type="line" pos:line="342" pos:column="21">// we are still building, so this is just the current latest information,</comment>
                    <comment type="line" pos:line="343" pos:column="21">// but we seems to be failing so far, so inherit culprits from the previous build.</comment>
                    <comment type="line" pos:line="344" pos:column="21">// isBuilding() check is to avoid recursion when loading data from old Hudson, which doesn't record</comment>
                    <comment type="line" pos:line="345" pos:column="21">// this information</comment>
                    <expr_stmt><expr><call><name><name pos:line="346" pos:column="21">r<pos:position pos:line="346" pos:column="22"/></name><operator pos:line="346" pos:column="22">.<pos:position pos:line="346" pos:column="23"/></operator><name pos:line="346" pos:column="23">addAll<pos:position pos:line="346" pos:column="29"/></name></name><argument_list pos:line="346" pos:column="29">(<argument><expr><call><name><name pos:line="346" pos:column="30">p<pos:position pos:line="346" pos:column="31"/></name><operator pos:line="346" pos:column="31">.<pos:position pos:line="346" pos:column="32"/></operator><name pos:line="346" pos:column="32">getCulprits<pos:position pos:line="346" pos:column="43"/></name></name><argument_list pos:line="346" pos:column="43">()<pos:position pos:line="346" pos:column="45"/></argument_list></call></expr></argument>)<pos:position pos:line="346" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="346" pos:column="47"/></expr_stmt>
                }<pos:position pos:line="347" pos:column="18"/></block></then></if>
            }<pos:position pos:line="348" pos:column="14"/></block></then></if>
            <for pos:line="349" pos:column="13">for <control pos:line="349" pos:column="17">(<init><decl><type><name pos:line="349" pos:column="18">Entry<pos:position pos:line="349" pos:column="23"/></name></type> <name pos:line="349" pos:column="24">e<pos:position pos:line="349" pos:column="25"/></name> <range pos:line="349" pos:column="26">: <expr><call><name pos:line="349" pos:column="28">getChangeSet<pos:position pos:line="349" pos:column="40"/></name><argument_list pos:line="349" pos:column="40">()<pos:position pos:line="349" pos:column="42"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="349" pos:column="43"/></control>
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="350" pos:column="17">r<pos:position pos:line="350" pos:column="18"/></name><operator pos:line="350" pos:column="18">.<pos:position pos:line="350" pos:column="19"/></operator><name pos:line="350" pos:column="19">add<pos:position pos:line="350" pos:column="22"/></name></name><argument_list pos:line="350" pos:column="22">(<argument><expr><call><name><name pos:line="350" pos:column="23">e<pos:position pos:line="350" pos:column="24"/></name><operator pos:line="350" pos:column="24">.<pos:position pos:line="350" pos:column="25"/></operator><name pos:line="350" pos:column="25">getAuthor<pos:position pos:line="350" pos:column="34"/></name></name><argument_list pos:line="350" pos:column="34">()<pos:position pos:line="350" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="350" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="350" pos:column="38"/></expr_stmt></block></for>

            <if pos:line="352" pos:column="13">if <condition pos:line="352" pos:column="16">(<expr><name pos:line="352" pos:column="17">upstreamCulprits<pos:position pos:line="352" pos:column="33"/></name></expr>)<pos:position pos:line="352" pos:column="34"/></condition><then pos:line="352" pos:column="34"> <block pos:line="352" pos:column="35">{
                <comment type="line" pos:line="353" pos:column="17">// If we have dependencies since the last successful build, add their authors to our list</comment>
                <if pos:line="354" pos:column="17">if <condition pos:line="354" pos:column="20">(<expr><call><name pos:line="354" pos:column="21">getPreviousNotFailedBuild<pos:position pos:line="354" pos:column="46"/></name><argument_list pos:line="354" pos:column="46">()<pos:position pos:line="354" pos:column="48"/></argument_list></call> <operator pos:line="354" pos:column="49">!=<pos:position pos:line="354" pos:column="51"/></operator> <literal type="null" pos:line="354" pos:column="52">null<pos:position pos:line="354" pos:column="56"/></literal></expr>)<pos:position pos:line="354" pos:column="57"/></condition><then pos:line="354" pos:column="57"> <block pos:line="354" pos:column="58">{
                    <decl_stmt><decl><type><name><name pos:line="355" pos:column="21">Map<pos:position pos:line="355" pos:column="24"/></name> <argument_list type="generic" pos:line="355" pos:column="25">&lt;<argument><name pos:line="355" pos:column="26">AbstractProject<pos:position pos:line="355" pos:column="41"/></name></argument>,<argument><name pos:line="355" pos:column="42">DependencyChange<pos:position pos:line="355" pos:column="58"/></name></argument>&gt;<pos:position pos:line="355" pos:column="62"/></argument_list></name></type> <name pos:line="355" pos:column="60">depmap<pos:position pos:line="355" pos:column="66"/></name> <init pos:line="355" pos:column="67">= <expr><call><name pos:line="355" pos:column="69">getDependencyChanges<pos:position pos:line="355" pos:column="89"/></name><argument_list pos:line="355" pos:column="89">(<argument><expr><call><name pos:line="355" pos:column="90">getPreviousSuccessfulBuild<pos:position pos:line="355" pos:column="116"/></name><argument_list pos:line="355" pos:column="116">()<pos:position pos:line="355" pos:column="118"/></argument_list></call></expr></argument>)<pos:position pos:line="355" pos:column="119"/></argument_list></call></expr></init></decl>;<pos:position pos:line="355" pos:column="120"/></decl_stmt>
                    <for pos:line="356" pos:column="21">for <control pos:line="356" pos:column="25">(<init><decl><type><name pos:line="356" pos:column="26">DependencyChange<pos:position pos:line="356" pos:column="42"/></name></type> <name pos:line="356" pos:column="43">dep<pos:position pos:line="356" pos:column="46"/></name> <range pos:line="356" pos:column="47">: <expr><call><name><name pos:line="356" pos:column="49">depmap<pos:position pos:line="356" pos:column="55"/></name><operator pos:line="356" pos:column="55">.<pos:position pos:line="356" pos:column="56"/></operator><name pos:line="356" pos:column="56">values<pos:position pos:line="356" pos:column="62"/></name></name><argument_list pos:line="356" pos:column="62">()<pos:position pos:line="356" pos:column="64"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="356" pos:column="65"/></control> <block pos:line="356" pos:column="66">{
                        <for pos:line="357" pos:column="25">for <control pos:line="357" pos:column="29">(<init><decl><type><name><name pos:line="357" pos:column="30">AbstractBuild<pos:position pos:line="357" pos:column="43"/></name><argument_list type="generic" pos:line="357" pos:column="43">&lt;<argument><name pos:line="357" pos:column="44">?<pos:position pos:line="357" pos:column="45"/></name></argument>,<argument><name pos:line="357" pos:column="46">?<pos:position pos:line="357" pos:column="47"/></name></argument>&gt;<pos:position pos:line="357" pos:column="51"/></argument_list></name></type> <name pos:line="357" pos:column="49">b<pos:position pos:line="357" pos:column="50"/></name> <range pos:line="357" pos:column="51">: <expr><call><name><name pos:line="357" pos:column="53">dep<pos:position pos:line="357" pos:column="56"/></name><operator pos:line="357" pos:column="56">.<pos:position pos:line="357" pos:column="57"/></operator><name pos:line="357" pos:column="57">getBuilds<pos:position pos:line="357" pos:column="66"/></name></name><argument_list pos:line="357" pos:column="66">()<pos:position pos:line="357" pos:column="68"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="357" pos:column="69"/></control> <block pos:line="357" pos:column="70">{
                            <for pos:line="358" pos:column="29">for <control pos:line="358" pos:column="33">(<init><decl><type><name pos:line="358" pos:column="34">Entry<pos:position pos:line="358" pos:column="39"/></name></type> <name pos:line="358" pos:column="40">entry<pos:position pos:line="358" pos:column="45"/></name> <range pos:line="358" pos:column="46">: <expr><call><name><name pos:line="358" pos:column="48">b<pos:position pos:line="358" pos:column="49"/></name><operator pos:line="358" pos:column="49">.<pos:position pos:line="358" pos:column="50"/></operator><name pos:line="358" pos:column="50">getChangeSet<pos:position pos:line="358" pos:column="62"/></name></name><argument_list pos:line="358" pos:column="62">()<pos:position pos:line="358" pos:column="64"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="358" pos:column="65"/></control> <block pos:line="358" pos:column="66">{
                                <expr_stmt><expr><call><name><name pos:line="359" pos:column="33">r<pos:position pos:line="359" pos:column="34"/></name><operator pos:line="359" pos:column="34">.<pos:position pos:line="359" pos:column="35"/></operator><name pos:line="359" pos:column="35">add<pos:position pos:line="359" pos:column="38"/></name></name><argument_list pos:line="359" pos:column="38">(<argument><expr><call><name><name pos:line="359" pos:column="39">entry<pos:position pos:line="359" pos:column="44"/></name><operator pos:line="359" pos:column="44">.<pos:position pos:line="359" pos:column="45"/></operator><name pos:line="359" pos:column="45">getAuthor<pos:position pos:line="359" pos:column="54"/></name></name><argument_list pos:line="359" pos:column="54">()<pos:position pos:line="359" pos:column="56"/></argument_list></call></expr></argument>)<pos:position pos:line="359" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="359" pos:column="58"/></expr_stmt>
                            }<pos:position pos:line="360" pos:column="30"/></block></for>
                        }<pos:position pos:line="361" pos:column="26"/></block></for>
                    }<pos:position pos:line="362" pos:column="22"/></block></for>
                }<pos:position pos:line="363" pos:column="18"/></block></then></if>
            }<pos:position pos:line="364" pos:column="14"/></block></then></if>

            <return pos:line="366" pos:column="13">return <expr><name pos:line="366" pos:column="20">r<pos:position pos:line="366" pos:column="21"/></name></expr>;<pos:position pos:line="366" pos:column="22"/></return>
        }<pos:position pos:line="367" pos:column="10"/></block></then></if>

        <return pos:line="369" pos:column="9">return <expr><operator pos:line="369" pos:column="16">new<pos:position pos:line="369" pos:column="19"/></operator> <class><super><name><name pos:line="369" pos:column="20">AbstractSet<pos:position pos:line="369" pos:column="31"/></name><argument_list type="generic" pos:line="369" pos:column="31">&lt;<argument><name pos:line="369" pos:column="32">User<pos:position pos:line="369" pos:column="36"/></name></argument>&gt;<pos:position pos:line="369" pos:column="40"/></argument_list></name></super><argument_list pos:line="369" pos:column="37">()<pos:position pos:line="369" pos:column="39"/></argument_list> <block pos:line="369" pos:column="40">{
            <function><specifier pos:line="370" pos:column="13">public<pos:position pos:line="370" pos:column="19"/></specifier> <type><name><name pos:line="370" pos:column="20">Iterator<pos:position pos:line="370" pos:column="28"/></name><argument_list type="generic" pos:line="370" pos:column="28">&lt;<argument><name pos:line="370" pos:column="29">User<pos:position pos:line="370" pos:column="33"/></name></argument>&gt;<pos:position pos:line="370" pos:column="37"/></argument_list></name></type> <name pos:line="370" pos:column="35">iterator<pos:position pos:line="370" pos:column="43"/></name><parameter_list pos:line="370" pos:column="43">()<pos:position pos:line="370" pos:column="45"/></parameter_list> <block pos:line="370" pos:column="46">{
                <return pos:line="371" pos:column="17">return <expr><operator pos:line="371" pos:column="24">new<pos:position pos:line="371" pos:column="27"/></operator> <class><super><name><name pos:line="371" pos:column="28">AdaptedIterator<pos:position pos:line="371" pos:column="43"/></name><argument_list type="generic" pos:line="371" pos:column="43">&lt;<argument><name pos:line="371" pos:column="44">String<pos:position pos:line="371" pos:column="50"/></name></argument>,<argument><name pos:line="371" pos:column="51">User<pos:position pos:line="371" pos:column="55"/></name></argument>&gt;<pos:position pos:line="371" pos:column="59"/></argument_list></name></super><argument_list pos:line="371" pos:column="56">(<argument><expr><call><name><name pos:line="371" pos:column="57">culprits<pos:position pos:line="371" pos:column="65"/></name><operator pos:line="371" pos:column="65">.<pos:position pos:line="371" pos:column="66"/></operator><name pos:line="371" pos:column="66">iterator<pos:position pos:line="371" pos:column="74"/></name></name><argument_list pos:line="371" pos:column="74">()<pos:position pos:line="371" pos:column="76"/></argument_list></call></expr></argument>)<pos:position pos:line="371" pos:column="77"/></argument_list> <block pos:line="371" pos:column="78">{
                    <function><specifier pos:line="372" pos:column="21">protected<pos:position pos:line="372" pos:column="30"/></specifier> <type><name pos:line="372" pos:column="31">User<pos:position pos:line="372" pos:column="35"/></name></type> <name pos:line="372" pos:column="36">adapt<pos:position pos:line="372" pos:column="41"/></name><parameter_list pos:line="372" pos:column="41">(<parameter><decl><type><name pos:line="372" pos:column="42">String<pos:position pos:line="372" pos:column="48"/></name></type> <name pos:line="372" pos:column="49">id<pos:position pos:line="372" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="372" pos:column="52"/></parameter_list> <block pos:line="372" pos:column="53">{
                        <return pos:line="373" pos:column="25">return <expr><call><name><name pos:line="373" pos:column="32">User<pos:position pos:line="373" pos:column="36"/></name><operator pos:line="373" pos:column="36">.<pos:position pos:line="373" pos:column="37"/></operator><name pos:line="373" pos:column="37">get<pos:position pos:line="373" pos:column="40"/></name></name><argument_list pos:line="373" pos:column="40">(<argument><expr><name pos:line="373" pos:column="41">id<pos:position pos:line="373" pos:column="43"/></name></expr></argument>)<pos:position pos:line="373" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="373" pos:column="45"/></return>
                    }<pos:position pos:line="374" pos:column="22"/></block></function>
                }<pos:position pos:line="375" pos:column="18"/></block></class></expr>;<pos:position pos:line="375" pos:column="19"/></return>
            }<pos:position pos:line="376" pos:column="14"/></block></function>

            <function><specifier pos:line="378" pos:column="13">public<pos:position pos:line="378" pos:column="19"/></specifier> <type><name pos:line="378" pos:column="20">int<pos:position pos:line="378" pos:column="23"/></name></type> <name pos:line="378" pos:column="24">size<pos:position pos:line="378" pos:column="28"/></name><parameter_list pos:line="378" pos:column="28">()<pos:position pos:line="378" pos:column="30"/></parameter_list> <block pos:line="378" pos:column="31">{
                <return pos:line="379" pos:column="17">return <expr><call><name><name pos:line="379" pos:column="24">culprits<pos:position pos:line="379" pos:column="32"/></name><operator pos:line="379" pos:column="32">.<pos:position pos:line="379" pos:column="33"/></operator><name pos:line="379" pos:column="33">size<pos:position pos:line="379" pos:column="37"/></name></name><argument_list pos:line="379" pos:column="37">()<pos:position pos:line="379" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="379" pos:column="40"/></return>
            }<pos:position pos:line="380" pos:column="14"/></block></function>
        }<pos:position pos:line="381" pos:column="10"/></block></class></expr>;<pos:position pos:line="381" pos:column="11"/></return>
    }<pos:position pos:line="382" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="384" pos:column="5">/**
     * Returns true if this user has made a commit to this build.
     *
     * @since 1.191
     */</comment>
    <function><specifier pos:line="389" pos:column="5">public<pos:position pos:line="389" pos:column="11"/></specifier> <type><name pos:line="389" pos:column="12">boolean<pos:position pos:line="389" pos:column="19"/></name></type> <name pos:line="389" pos:column="20">hasParticipant<pos:position pos:line="389" pos:column="34"/></name><parameter_list pos:line="389" pos:column="34">(<parameter><decl><type><name pos:line="389" pos:column="35">User<pos:position pos:line="389" pos:column="39"/></name></type> <name pos:line="389" pos:column="40">user<pos:position pos:line="389" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="389" pos:column="45"/></parameter_list> <block pos:line="389" pos:column="46">{
        <for pos:line="390" pos:column="9">for <control pos:line="390" pos:column="13">(<init><decl><type><name><name pos:line="390" pos:column="14">ChangeLogSet<pos:position pos:line="390" pos:column="26"/></name><operator pos:line="390" pos:column="26">.<pos:position pos:line="390" pos:column="27"/></operator><name pos:line="390" pos:column="27">Entry<pos:position pos:line="390" pos:column="32"/></name></name></type> <name pos:line="390" pos:column="33">e<pos:position pos:line="390" pos:column="34"/></name> <range pos:line="390" pos:column="35">: <expr><call><name pos:line="390" pos:column="37">getChangeSet<pos:position pos:line="390" pos:column="49"/></name><argument_list pos:line="390" pos:column="49">()<pos:position pos:line="390" pos:column="51"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="390" pos:column="52"/></control>
            <block type="pseudo"><try pos:line="391" pos:column="13">try<block pos:line="391" pos:column="16">{
                <if pos:line="392" pos:column="17">if <condition pos:line="392" pos:column="20">(<expr><call><name><name pos:line="392" pos:column="21">e<pos:position pos:line="392" pos:column="22"/></name><operator pos:line="392" pos:column="22">.<pos:position pos:line="392" pos:column="23"/></operator><name pos:line="392" pos:column="23">getAuthor<pos:position pos:line="392" pos:column="32"/></name></name><argument_list pos:line="392" pos:column="32">()<pos:position pos:line="392" pos:column="34"/></argument_list></call><operator pos:line="392" pos:column="34">==<pos:position pos:line="392" pos:column="36"/></operator><name pos:line="392" pos:column="36">user<pos:position pos:line="392" pos:column="40"/></name></expr>)<pos:position pos:line="392" pos:column="41"/></condition><then pos:line="392" pos:column="41">
                    <block type="pseudo"><return pos:line="393" pos:column="21">return <expr><literal type="boolean" pos:line="393" pos:column="28">true<pos:position pos:line="393" pos:column="32"/></literal></expr>;<pos:position pos:line="393" pos:column="33"/></return></block></then></if>
            }<pos:position pos:line="394" pos:column="14"/></block> <catch pos:line="394" pos:column="15">catch <parameter_list pos:line="394" pos:column="21">(<parameter><decl><type><name pos:line="394" pos:column="22">RuntimeException<pos:position pos:line="394" pos:column="38"/></name></type> <name pos:line="394" pos:column="39">re<pos:position pos:line="394" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="394" pos:column="42"/></parameter_list> <block pos:line="394" pos:column="43">{ 
                <expr_stmt><expr><call><name><name pos:line="395" pos:column="17">LOGGER<pos:position pos:line="395" pos:column="23"/></name><operator pos:line="395" pos:column="23">.<pos:position pos:line="395" pos:column="24"/></operator><name pos:line="395" pos:column="24">log<pos:position pos:line="395" pos:column="27"/></name></name><argument_list pos:line="395" pos:column="27">(<argument><expr><name><name pos:line="395" pos:column="28">Level<pos:position pos:line="395" pos:column="33"/></name><operator pos:line="395" pos:column="33">.<pos:position pos:line="395" pos:column="34"/></operator><name pos:line="395" pos:column="34">INFO<pos:position pos:line="395" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="395" pos:column="40">"Failed to determine author of changelog "<pos:position pos:line="395" pos:column="82"/></literal> <operator pos:line="395" pos:column="83">+<pos:position pos:line="395" pos:column="84"/></operator> <call><name><name pos:line="395" pos:column="85">e<pos:position pos:line="395" pos:column="86"/></name><operator pos:line="395" pos:column="86">.<pos:position pos:line="395" pos:column="87"/></operator><name pos:line="395" pos:column="87">getCommitId<pos:position pos:line="395" pos:column="98"/></name></name><argument_list pos:line="395" pos:column="98">()<pos:position pos:line="395" pos:column="100"/></argument_list></call> <operator pos:line="395" pos:column="101">+<pos:position pos:line="395" pos:column="102"/></operator> <literal type="string" pos:line="395" pos:column="103">"for "<pos:position pos:line="395" pos:column="109"/></literal> <operator pos:line="395" pos:column="110">+<pos:position pos:line="395" pos:column="111"/></operator> <call><name pos:line="395" pos:column="112">getParent<pos:position pos:line="395" pos:column="121"/></name><argument_list pos:line="395" pos:column="121">()<pos:position pos:line="395" pos:column="123"/></argument_list></call><operator pos:line="395" pos:column="123">.<pos:position pos:line="395" pos:column="124"/></operator><call><name pos:line="395" pos:column="124">getDisplayName<pos:position pos:line="395" pos:column="138"/></name><argument_list pos:line="395" pos:column="138">()<pos:position pos:line="395" pos:column="140"/></argument_list></call> <operator pos:line="395" pos:column="141">+<pos:position pos:line="395" pos:column="142"/></operator> <literal type="string" pos:line="395" pos:column="143">", "<pos:position pos:line="395" pos:column="147"/></literal> <operator pos:line="395" pos:column="148">+<pos:position pos:line="395" pos:column="149"/></operator> <call><name pos:line="395" pos:column="150">getDisplayName<pos:position pos:line="395" pos:column="164"/></name><argument_list pos:line="395" pos:column="164">()<pos:position pos:line="395" pos:column="166"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="395" pos:column="168">re<pos:position pos:line="395" pos:column="170"/></name></expr></argument>)<pos:position pos:line="395" pos:column="171"/></argument_list></call></expr>;<pos:position pos:line="395" pos:column="172"/></expr_stmt>
            }<pos:position pos:line="396" pos:column="14"/></block></catch></try></block></for>
        <return pos:line="397" pos:column="9">return <expr><literal type="boolean" pos:line="397" pos:column="16">false<pos:position pos:line="397" pos:column="21"/></literal></expr>;<pos:position pos:line="397" pos:column="22"/></return>
    }<pos:position pos:line="398" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="400" pos:column="5">/**
     * Gets the version of Hudson that was used to build this job.
     *
     * @since 1.246
     */</comment>
    <function><specifier pos:line="405" pos:column="5">public<pos:position pos:line="405" pos:column="11"/></specifier> <type><name pos:line="405" pos:column="12">String<pos:position pos:line="405" pos:column="18"/></name></type> <name pos:line="405" pos:column="19">getHudsonVersion<pos:position pos:line="405" pos:column="35"/></name><parameter_list pos:line="405" pos:column="35">()<pos:position pos:line="405" pos:column="37"/></parameter_list> <block pos:line="405" pos:column="38">{
        <return pos:line="406" pos:column="9">return <expr><name pos:line="406" pos:column="16">hudsonVersion<pos:position pos:line="406" pos:column="29"/></name></expr>;<pos:position pos:line="406" pos:column="30"/></return>
    }<pos:position pos:line="407" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="409" pos:column="5">/**
     * @deprecated as of 1.467
     *      Please use {@link hudson.model.Run.RunExecution}
     */</comment>
    <class><annotation pos:line="413" pos:column="5">@<name pos:line="413" pos:column="6">Deprecated<pos:position pos:line="413" pos:column="16"/></name></annotation>
    <specifier pos:line="414" pos:column="5">public<pos:position pos:line="414" pos:column="11"/></specifier> <specifier pos:line="414" pos:column="12">abstract<pos:position pos:line="414" pos:column="20"/></specifier> class <name pos:line="414" pos:column="27">AbstractRunner<pos:position pos:line="414" pos:column="41"/></name> <super><extends pos:line="414" pos:column="42">extends <name pos:line="414" pos:column="50">AbstractBuildExecution<pos:position pos:line="414" pos:column="72"/></name></extends></super> <block pos:line="414" pos:column="73">{

    }<pos:position pos:line="416" pos:column="6"/></block></class>

    <class><specifier pos:line="418" pos:column="5">public<pos:position pos:line="418" pos:column="11"/></specifier> <specifier pos:line="418" pos:column="12">abstract<pos:position pos:line="418" pos:column="20"/></specifier> class <name pos:line="418" pos:column="27">AbstractBuildExecution<pos:position pos:line="418" pos:column="49"/></name> <super><extends pos:line="418" pos:column="50">extends <name pos:line="418" pos:column="58">Runner<pos:position pos:line="418" pos:column="64"/></name></extends></super> <block pos:line="418" pos:column="65">{
        <comment type="block" pos:line="419" pos:column="9">/*
            Some plugins might depend on this instance castable to Runner, so we need to use
            deprecated class here.
         */</comment>

        <comment type="block" format="javadoc" pos:line="424" pos:column="9">/**
         * Since configuration can be changed while a build is in progress,
         * create a launcher once and stick to it for the entire build duration.
         */</comment>
        <decl_stmt><decl><specifier pos:line="428" pos:column="9">protected<pos:position pos:line="428" pos:column="18"/></specifier> <type><name pos:line="428" pos:column="19">Launcher<pos:position pos:line="428" pos:column="27"/></name></type> <name pos:line="428" pos:column="28">launcher<pos:position pos:line="428" pos:column="36"/></name></decl>;<pos:position pos:line="428" pos:column="37"/></decl_stmt>

        <comment type="block" format="javadoc" pos:line="430" pos:column="9">/**
         * Output/progress of this build goes here.
         */</comment>
        <decl_stmt><decl><specifier pos:line="433" pos:column="9">protected<pos:position pos:line="433" pos:column="18"/></specifier> <type><name pos:line="433" pos:column="19">BuildListener<pos:position pos:line="433" pos:column="32"/></name></type> <name pos:line="433" pos:column="33">listener<pos:position pos:line="433" pos:column="41"/></name></decl>;<pos:position pos:line="433" pos:column="42"/></decl_stmt>

        <comment type="block" format="javadoc" pos:line="435" pos:column="9">/**
         * Lease of the workspace.
         */</comment>
        <decl_stmt><decl><specifier pos:line="438" pos:column="9">private<pos:position pos:line="438" pos:column="16"/></specifier> <type><name pos:line="438" pos:column="17">Lease<pos:position pos:line="438" pos:column="22"/></name></type> <name pos:line="438" pos:column="23">lease<pos:position pos:line="438" pos:column="28"/></name></decl>;<pos:position pos:line="438" pos:column="29"/></decl_stmt>

        <comment type="block" format="javadoc" pos:line="440" pos:column="9">/**
         * Returns the current {@link Node} on which we are building.
         * @return Returns the current {@link Node}
         * @throws IllegalStateException if that cannot be determined
         */</comment>
        <function><specifier pos:line="445" pos:column="9">protected<pos:position pos:line="445" pos:column="18"/></specifier> <specifier pos:line="445" pos:column="19">final<pos:position pos:line="445" pos:column="24"/></specifier> <annotation pos:line="445" pos:column="25">@<name pos:line="445" pos:column="26">Nonnull<pos:position pos:line="445" pos:column="33"/></name></annotation> <type><name pos:line="445" pos:column="34">Node<pos:position pos:line="445" pos:column="38"/></name></type> <name pos:line="445" pos:column="39">getCurrentNode<pos:position pos:line="445" pos:column="53"/></name><parameter_list pos:line="445" pos:column="53">()<pos:position pos:line="445" pos:column="55"/></parameter_list> <throws pos:line="445" pos:column="56">throws <argument><expr><name pos:line="445" pos:column="63">IllegalStateException<pos:position pos:line="445" pos:column="84"/></name></expr></argument></throws> <block pos:line="445" pos:column="85">{
            <decl_stmt><decl><type><name pos:line="446" pos:column="13">Executor<pos:position pos:line="446" pos:column="21"/></name></type> <name pos:line="446" pos:column="22">exec<pos:position pos:line="446" pos:column="26"/></name> <init pos:line="446" pos:column="27">= <expr><call><name><name pos:line="446" pos:column="29">Executor<pos:position pos:line="446" pos:column="37"/></name><operator pos:line="446" pos:column="37">.<pos:position pos:line="446" pos:column="38"/></operator><name pos:line="446" pos:column="38">currentExecutor<pos:position pos:line="446" pos:column="53"/></name></name><argument_list pos:line="446" pos:column="53">()<pos:position pos:line="446" pos:column="55"/></argument_list></call></expr></init></decl>;<pos:position pos:line="446" pos:column="56"/></decl_stmt>
            <if pos:line="447" pos:column="13">if <condition pos:line="447" pos:column="16">(<expr><name pos:line="447" pos:column="17">exec<pos:position pos:line="447" pos:column="21"/></name> <operator pos:line="447" pos:column="22">==<pos:position pos:line="447" pos:column="24"/></operator> <literal type="null" pos:line="447" pos:column="25">null<pos:position pos:line="447" pos:column="29"/></literal></expr>)<pos:position pos:line="447" pos:column="30"/></condition><then pos:line="447" pos:column="30"> <block pos:line="447" pos:column="31">{
                <throw pos:line="448" pos:column="17">throw <expr><operator pos:line="448" pos:column="23">new<pos:position pos:line="448" pos:column="26"/></operator> <call><name pos:line="448" pos:column="27">IllegalStateException<pos:position pos:line="448" pos:column="48"/></name><argument_list pos:line="448" pos:column="48">(<argument><expr><literal type="string" pos:line="448" pos:column="49">"not being called from an executor thread"<pos:position pos:line="448" pos:column="91"/></literal></expr></argument>)<pos:position pos:line="448" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="448" pos:column="93"/></throw>
            }<pos:position pos:line="449" pos:column="14"/></block></then></if>
            <decl_stmt><decl><type><name pos:line="450" pos:column="13">Computer<pos:position pos:line="450" pos:column="21"/></name></type> <name pos:line="450" pos:column="22">c<pos:position pos:line="450" pos:column="23"/></name> <init pos:line="450" pos:column="24">= <expr><call><name><name pos:line="450" pos:column="26">exec<pos:position pos:line="450" pos:column="30"/></name><operator pos:line="450" pos:column="30">.<pos:position pos:line="450" pos:column="31"/></operator><name pos:line="450" pos:column="31">getOwner<pos:position pos:line="450" pos:column="39"/></name></name><argument_list pos:line="450" pos:column="39">()<pos:position pos:line="450" pos:column="41"/></argument_list></call></expr></init></decl>;<pos:position pos:line="450" pos:column="42"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="451" pos:column="13">Node<pos:position pos:line="451" pos:column="17"/></name></type> <name pos:line="451" pos:column="18">node<pos:position pos:line="451" pos:column="22"/></name> <init pos:line="451" pos:column="23">= <expr><call><name><name pos:line="451" pos:column="25">c<pos:position pos:line="451" pos:column="26"/></name><operator pos:line="451" pos:column="26">.<pos:position pos:line="451" pos:column="27"/></operator><name pos:line="451" pos:column="27">getNode<pos:position pos:line="451" pos:column="34"/></name></name><argument_list pos:line="451" pos:column="34">()<pos:position pos:line="451" pos:column="36"/></argument_list></call></expr></init></decl>;<pos:position pos:line="451" pos:column="37"/></decl_stmt>
            <if pos:line="452" pos:column="13">if <condition pos:line="452" pos:column="16">(<expr><name pos:line="452" pos:column="17">node<pos:position pos:line="452" pos:column="21"/></name> <operator pos:line="452" pos:column="22">==<pos:position pos:line="452" pos:column="24"/></operator> <literal type="null" pos:line="452" pos:column="25">null<pos:position pos:line="452" pos:column="29"/></literal></expr>)<pos:position pos:line="452" pos:column="30"/></condition><then pos:line="452" pos:column="30"> <block pos:line="452" pos:column="31">{
                <throw pos:line="453" pos:column="17">throw <expr><operator pos:line="453" pos:column="23">new<pos:position pos:line="453" pos:column="26"/></operator> <call><name pos:line="453" pos:column="27">IllegalStateException<pos:position pos:line="453" pos:column="48"/></name><argument_list pos:line="453" pos:column="48">(<argument><expr><literal type="string" pos:line="453" pos:column="49">"no longer a configured node for "<pos:position pos:line="453" pos:column="83"/></literal> <operator pos:line="453" pos:column="84">+<pos:position pos:line="453" pos:column="85"/></operator> <call><name><name pos:line="453" pos:column="86">c<pos:position pos:line="453" pos:column="87"/></name><operator pos:line="453" pos:column="87">.<pos:position pos:line="453" pos:column="88"/></operator><name pos:line="453" pos:column="88">getName<pos:position pos:line="453" pos:column="95"/></name></name><argument_list pos:line="453" pos:column="95">()<pos:position pos:line="453" pos:column="97"/></argument_list></call></expr></argument>)<pos:position pos:line="453" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="453" pos:column="99"/></throw>
            }<pos:position pos:line="454" pos:column="14"/></block></then></if>
            <return pos:line="455" pos:column="13">return <expr><name pos:line="455" pos:column="20">node<pos:position pos:line="455" pos:column="24"/></name></expr>;<pos:position pos:line="455" pos:column="25"/></return>
        }<pos:position pos:line="456" pos:column="10"/></block></function>

        <function><specifier pos:line="458" pos:column="9">public<pos:position pos:line="458" pos:column="15"/></specifier> <type><name pos:line="458" pos:column="16">Launcher<pos:position pos:line="458" pos:column="24"/></name></type> <name pos:line="458" pos:column="25">getLauncher<pos:position pos:line="458" pos:column="36"/></name><parameter_list pos:line="458" pos:column="36">()<pos:position pos:line="458" pos:column="38"/></parameter_list> <block pos:line="458" pos:column="39">{
            <return pos:line="459" pos:column="13">return <expr><name pos:line="459" pos:column="20">launcher<pos:position pos:line="459" pos:column="28"/></name></expr>;<pos:position pos:line="459" pos:column="29"/></return>
        }<pos:position pos:line="460" pos:column="10"/></block></function>

        <function><specifier pos:line="462" pos:column="9">public<pos:position pos:line="462" pos:column="15"/></specifier> <type><name pos:line="462" pos:column="16">BuildListener<pos:position pos:line="462" pos:column="29"/></name></type> <name pos:line="462" pos:column="30">getListener<pos:position pos:line="462" pos:column="41"/></name><parameter_list pos:line="462" pos:column="41">()<pos:position pos:line="462" pos:column="43"/></parameter_list> <block pos:line="462" pos:column="44">{
            <return pos:line="463" pos:column="13">return <expr><name pos:line="463" pos:column="20">listener<pos:position pos:line="463" pos:column="28"/></name></expr>;<pos:position pos:line="463" pos:column="29"/></return>
        }<pos:position pos:line="464" pos:column="10"/></block></function>

        <comment type="block" format="javadoc" pos:line="466" pos:column="9">/**
         * Allocates the workspace from {@link WorkspaceList}.
         *
         * @param n
         *      Passed in for the convenience. The node where the build is running.
         * @param wsl
         *      Passed in for the convenience. The returned path must be registered to this object.
         */</comment>
        <function><specifier pos:line="474" pos:column="9">protected<pos:position pos:line="474" pos:column="18"/></specifier> <type><name pos:line="474" pos:column="19">Lease<pos:position pos:line="474" pos:column="24"/></name></type> <name pos:line="474" pos:column="25">decideWorkspace<pos:position pos:line="474" pos:column="40"/></name><parameter_list pos:line="474" pos:column="40">(<parameter><decl><type><annotation pos:line="474" pos:column="41">@<name pos:line="474" pos:column="42">Nonnull<pos:position pos:line="474" pos:column="49"/></name></annotation> <name pos:line="474" pos:column="50">Node<pos:position pos:line="474" pos:column="54"/></name></type> <name pos:line="474" pos:column="55">n<pos:position pos:line="474" pos:column="56"/></name></decl></parameter>, <parameter><decl><type><name pos:line="474" pos:column="58">WorkspaceList<pos:position pos:line="474" pos:column="71"/></name></type> <name pos:line="474" pos:column="72">wsl<pos:position pos:line="474" pos:column="75"/></name></decl></parameter>)<pos:position pos:line="474" pos:column="76"/></parameter_list> <throws pos:line="474" pos:column="77">throws <argument><expr><name pos:line="474" pos:column="84">InterruptedException<pos:position pos:line="474" pos:column="104"/></name></expr></argument>, <argument><expr><name pos:line="474" pos:column="106">IOException<pos:position pos:line="474" pos:column="117"/></name></expr></argument></throws> <block pos:line="474" pos:column="118">{
            <decl_stmt><decl><type><name pos:line="475" pos:column="13">String<pos:position pos:line="475" pos:column="19"/></name></type> <name pos:line="475" pos:column="20">customWorkspace<pos:position pos:line="475" pos:column="35"/></name> <init pos:line="475" pos:column="36">= <expr><call><name pos:line="475" pos:column="38">getProject<pos:position pos:line="475" pos:column="48"/></name><argument_list pos:line="475" pos:column="48">()<pos:position pos:line="475" pos:column="50"/></argument_list></call><operator pos:line="475" pos:column="50">.<pos:position pos:line="475" pos:column="51"/></operator><call><name pos:line="475" pos:column="51">getCustomWorkspace<pos:position pos:line="475" pos:column="69"/></name><argument_list pos:line="475" pos:column="69">()<pos:position pos:line="475" pos:column="71"/></argument_list></call></expr></init></decl>;<pos:position pos:line="475" pos:column="72"/></decl_stmt>
            <if pos:line="476" pos:column="13">if <condition pos:line="476" pos:column="16">(<expr><name pos:line="476" pos:column="17">customWorkspace<pos:position pos:line="476" pos:column="32"/></name> <operator pos:line="476" pos:column="33">!=<pos:position pos:line="476" pos:column="35"/></operator> <literal type="null" pos:line="476" pos:column="36">null<pos:position pos:line="476" pos:column="40"/></literal></expr>)<pos:position pos:line="476" pos:column="41"/></condition><then pos:line="476" pos:column="41"> <block pos:line="476" pos:column="42">{
                <comment type="line" pos:line="477" pos:column="17">// we allow custom workspaces to be concurrently used between jobs.</comment>
                <return pos:line="478" pos:column="17">return <expr><call><name><name pos:line="478" pos:column="24">Lease<pos:position pos:line="478" pos:column="29"/></name><operator pos:line="478" pos:column="29">.<pos:position pos:line="478" pos:column="30"/></operator><name pos:line="478" pos:column="30">createDummyLease<pos:position pos:line="478" pos:column="46"/></name></name><argument_list pos:line="478" pos:column="46">(<argument><expr><call><name><name pos:line="478" pos:column="47">n<pos:position pos:line="478" pos:column="48"/></name><operator pos:line="478" pos:column="48">.<pos:position pos:line="478" pos:column="49"/></operator><name pos:line="478" pos:column="49">getRootPath<pos:position pos:line="478" pos:column="60"/></name></name><argument_list pos:line="478" pos:column="60">()<pos:position pos:line="478" pos:column="62"/></argument_list></call><operator pos:line="478" pos:column="62">.<pos:position pos:line="478" pos:column="63"/></operator><call><name pos:line="478" pos:column="63">child<pos:position pos:line="478" pos:column="68"/></name><argument_list pos:line="478" pos:column="68">(<argument><expr><call><name pos:line="478" pos:column="69">getEnvironment<pos:position pos:line="478" pos:column="83"/></name><argument_list pos:line="478" pos:column="83">(<argument><expr><name pos:line="478" pos:column="84">listener<pos:position pos:line="478" pos:column="92"/></name></expr></argument>)<pos:position pos:line="478" pos:column="93"/></argument_list></call><operator pos:line="478" pos:column="93">.<pos:position pos:line="478" pos:column="94"/></operator><call><name pos:line="478" pos:column="94">expand<pos:position pos:line="478" pos:column="100"/></name><argument_list pos:line="478" pos:column="100">(<argument><expr><name pos:line="478" pos:column="101">customWorkspace<pos:position pos:line="478" pos:column="116"/></name></expr></argument>)<pos:position pos:line="478" pos:column="117"/></argument_list></call></expr></argument>)<pos:position pos:line="478" pos:column="118"/></argument_list></call></expr></argument>)<pos:position pos:line="478" pos:column="119"/></argument_list></call></expr>;<pos:position pos:line="478" pos:column="120"/></return>
            }<pos:position pos:line="479" pos:column="14"/></block></then></if>
            <comment type="line" pos:line="480" pos:column="13">// TODO: this cast is indicative of abstraction problem</comment>
            <return pos:line="481" pos:column="13">return <expr><call><name><name pos:line="481" pos:column="20">wsl<pos:position pos:line="481" pos:column="23"/></name><operator pos:line="481" pos:column="23">.<pos:position pos:line="481" pos:column="24"/></operator><name pos:line="481" pos:column="24">allocate<pos:position pos:line="481" pos:column="32"/></name></name><argument_list pos:line="481" pos:column="32">(<argument><expr><call><name><name pos:line="481" pos:column="33">n<pos:position pos:line="481" pos:column="34"/></name><operator pos:line="481" pos:column="34">.<pos:position pos:line="481" pos:column="35"/></operator><name pos:line="481" pos:column="35">getWorkspaceFor<pos:position pos:line="481" pos:column="50"/></name></name><argument_list pos:line="481" pos:column="50">(<argument><expr><operator pos:line="481" pos:column="51">(<pos:position pos:line="481" pos:column="52"/></operator><name pos:line="481" pos:column="52">TopLevelItem<pos:position pos:line="481" pos:column="64"/></name><operator pos:line="481" pos:column="64">)<pos:position pos:line="481" pos:column="65"/></operator><call><name pos:line="481" pos:column="65">getProject<pos:position pos:line="481" pos:column="75"/></name><argument_list pos:line="481" pos:column="75">()<pos:position pos:line="481" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="481" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><call><name pos:line="481" pos:column="80">getBuild<pos:position pos:line="481" pos:column="88"/></name><argument_list pos:line="481" pos:column="88">()<pos:position pos:line="481" pos:column="90"/></argument_list></call></expr></argument>)<pos:position pos:line="481" pos:column="91"/></argument_list></call></expr>;<pos:position pos:line="481" pos:column="92"/></return>
        }<pos:position pos:line="482" pos:column="10"/></block></function>

        <function><specifier pos:line="484" pos:column="9">public<pos:position pos:line="484" pos:column="15"/></specifier> <type><name pos:line="484" pos:column="16">Result<pos:position pos:line="484" pos:column="22"/></name></type> <name pos:line="484" pos:column="23">run<pos:position pos:line="484" pos:column="26"/></name><parameter_list pos:line="484" pos:column="26">(<parameter><decl><type><annotation pos:line="484" pos:column="27">@<name pos:line="484" pos:column="28">Nonnull<pos:position pos:line="484" pos:column="35"/></name></annotation> <name pos:line="484" pos:column="36">BuildListener<pos:position pos:line="484" pos:column="49"/></name></type> <name pos:line="484" pos:column="50">listener<pos:position pos:line="484" pos:column="58"/></name></decl></parameter>)<pos:position pos:line="484" pos:column="59"/></parameter_list> <throws pos:line="484" pos:column="60">throws <argument><expr><name pos:line="484" pos:column="67">Exception<pos:position pos:line="484" pos:column="76"/></name></expr></argument></throws> <block pos:line="484" pos:column="77">{
            <decl_stmt><decl><type><specifier pos:line="485" pos:column="13">final<pos:position pos:line="485" pos:column="18"/></specifier> <name pos:line="485" pos:column="19">Node<pos:position pos:line="485" pos:column="23"/></name></type> <name pos:line="485" pos:column="24">node<pos:position pos:line="485" pos:column="28"/></name> <init pos:line="485" pos:column="29">= <expr><call><name pos:line="485" pos:column="31">getCurrentNode<pos:position pos:line="485" pos:column="45"/></name><argument_list pos:line="485" pos:column="45">()<pos:position pos:line="485" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="485" pos:column="48"/></decl_stmt>
            
            <assert pos:line="487" pos:column="13">assert <expr><name pos:line="487" pos:column="20">builtOn<pos:position pos:line="487" pos:column="27"/></name><operator pos:line="487" pos:column="27">==<pos:position pos:line="487" pos:column="29"/></operator><literal type="null" pos:line="487" pos:column="29">null<pos:position pos:line="487" pos:column="33"/></literal></expr>;<pos:position pos:line="487" pos:column="34"/></assert>
            <expr_stmt><expr><name pos:line="488" pos:column="13">builtOn<pos:position pos:line="488" pos:column="20"/></name> <operator pos:line="488" pos:column="21">=<pos:position pos:line="488" pos:column="22"/></operator> <call><name><name pos:line="488" pos:column="23">node<pos:position pos:line="488" pos:column="27"/></name><operator pos:line="488" pos:column="27">.<pos:position pos:line="488" pos:column="28"/></operator><name pos:line="488" pos:column="28">getNodeName<pos:position pos:line="488" pos:column="39"/></name></name><argument_list pos:line="488" pos:column="39">()<pos:position pos:line="488" pos:column="41"/></argument_list></call></expr>;<pos:position pos:line="488" pos:column="42"/></expr_stmt>
            <expr_stmt><expr><name pos:line="489" pos:column="13">hudsonVersion<pos:position pos:line="489" pos:column="26"/></name> <operator pos:line="489" pos:column="27">=<pos:position pos:line="489" pos:column="28"/></operator> <name><name pos:line="489" pos:column="29">Jenkins<pos:position pos:line="489" pos:column="36"/></name><operator pos:line="489" pos:column="36">.<pos:position pos:line="489" pos:column="37"/></operator><name pos:line="489" pos:column="37">VERSION<pos:position pos:line="489" pos:column="44"/></name></name></expr>;<pos:position pos:line="489" pos:column="45"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="490" pos:column="13">this<pos:position pos:line="490" pos:column="17"/></name><operator pos:line="490" pos:column="17">.<pos:position pos:line="490" pos:column="18"/></operator><name pos:line="490" pos:column="18">listener<pos:position pos:line="490" pos:column="26"/></name></name> <operator pos:line="490" pos:column="27">=<pos:position pos:line="490" pos:column="28"/></operator> <name pos:line="490" pos:column="29">listener<pos:position pos:line="490" pos:column="37"/></name></expr>;<pos:position pos:line="490" pos:column="38"/></expr_stmt>

            <expr_stmt><expr><name pos:line="492" pos:column="13">launcher<pos:position pos:line="492" pos:column="21"/></name> <operator pos:line="492" pos:column="22">=<pos:position pos:line="492" pos:column="23"/></operator> <call><name pos:line="492" pos:column="24">createLauncher<pos:position pos:line="492" pos:column="38"/></name><argument_list pos:line="492" pos:column="38">(<argument><expr><name pos:line="492" pos:column="39">listener<pos:position pos:line="492" pos:column="47"/></name></expr></argument>)<pos:position pos:line="492" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="492" pos:column="49"/></expr_stmt>
            <if pos:line="493" pos:column="13">if <condition pos:line="493" pos:column="16">(<expr><operator pos:line="493" pos:column="17">!<pos:position pos:line="493" pos:column="18"/></operator><call><name><name pos:line="493" pos:column="18">Jenkins<pos:position pos:line="493" pos:column="25"/></name><operator pos:line="493" pos:column="25">.<pos:position pos:line="493" pos:column="26"/></operator><name pos:line="493" pos:column="26">getInstance<pos:position pos:line="493" pos:column="37"/></name></name><argument_list pos:line="493" pos:column="37">()<pos:position pos:line="493" pos:column="39"/></argument_list></call><operator pos:line="493" pos:column="39">.<pos:position pos:line="493" pos:column="40"/></operator><call><name pos:line="493" pos:column="40">getNodes<pos:position pos:line="493" pos:column="48"/></name><argument_list pos:line="493" pos:column="48">()<pos:position pos:line="493" pos:column="50"/></argument_list></call><operator pos:line="493" pos:column="50">.<pos:position pos:line="493" pos:column="51"/></operator><call><name pos:line="493" pos:column="51">isEmpty<pos:position pos:line="493" pos:column="58"/></name><argument_list pos:line="493" pos:column="58">()<pos:position pos:line="493" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="493" pos:column="61"/></condition><then pos:line="493" pos:column="61"> <block pos:line="493" pos:column="62">{
                <if pos:line="494" pos:column="17">if <condition pos:line="494" pos:column="20">(<expr><name pos:line="494" pos:column="21">node<pos:position pos:line="494" pos:column="25"/></name> <operator pos:line="494" pos:column="26">instanceof<pos:position pos:line="494" pos:column="36"/></operator> <name pos:line="494" pos:column="37">Jenkins<pos:position pos:line="494" pos:column="44"/></name></expr>)<pos:position pos:line="494" pos:column="45"/></condition><then pos:line="494" pos:column="45"> <block pos:line="494" pos:column="46">{
                    <expr_stmt><expr><call><name><name pos:line="495" pos:column="21">listener<pos:position pos:line="495" pos:column="29"/></name><operator pos:line="495" pos:column="29">.<pos:position pos:line="495" pos:column="30"/></operator><name pos:line="495" pos:column="30">getLogger<pos:position pos:line="495" pos:column="39"/></name></name><argument_list pos:line="495" pos:column="39">()<pos:position pos:line="495" pos:column="41"/></argument_list></call><operator pos:line="495" pos:column="41">.<pos:position pos:line="495" pos:column="42"/></operator><call><name pos:line="495" pos:column="42">print<pos:position pos:line="495" pos:column="47"/></name><argument_list pos:line="495" pos:column="47">(<argument><expr><call><name><name pos:line="495" pos:column="48">Messages<pos:position pos:line="495" pos:column="56"/></name><operator pos:line="495" pos:column="56">.<pos:position pos:line="495" pos:column="57"/></operator><name pos:line="495" pos:column="57">AbstractBuild_BuildingOnMaster<pos:position pos:line="495" pos:column="87"/></name></name><argument_list pos:line="495" pos:column="87">()<pos:position pos:line="495" pos:column="89"/></argument_list></call></expr></argument>)<pos:position pos:line="495" pos:column="90"/></argument_list></call></expr>;<pos:position pos:line="495" pos:column="91"/></expr_stmt>
                }<pos:position pos:line="496" pos:column="18"/></block></then> <else pos:line="496" pos:column="19">else <block pos:line="496" pos:column="24">{
                    <expr_stmt><expr><call><name><name pos:line="497" pos:column="21">listener<pos:position pos:line="497" pos:column="29"/></name><operator pos:line="497" pos:column="29">.<pos:position pos:line="497" pos:column="30"/></operator><name pos:line="497" pos:column="30">getLogger<pos:position pos:line="497" pos:column="39"/></name></name><argument_list pos:line="497" pos:column="39">()<pos:position pos:line="497" pos:column="41"/></argument_list></call><operator pos:line="497" pos:column="41">.<pos:position pos:line="497" pos:column="42"/></operator><call><name pos:line="497" pos:column="42">print<pos:position pos:line="497" pos:column="47"/></name><argument_list pos:line="497" pos:column="47">(<argument><expr><call><name><name pos:line="497" pos:column="48">Messages<pos:position pos:line="497" pos:column="56"/></name><operator pos:line="497" pos:column="56">.<pos:position pos:line="497" pos:column="57"/></operator><name pos:line="497" pos:column="57">AbstractBuild_BuildingRemotely<pos:position pos:line="497" pos:column="87"/></name></name><argument_list pos:line="497" pos:column="87">(<argument><expr><call><name><name pos:line="497" pos:column="88">ModelHyperlinkNote<pos:position pos:line="497" pos:column="106"/></name><operator pos:line="497" pos:column="106">.<pos:position pos:line="497" pos:column="107"/></operator><name pos:line="497" pos:column="107">encodeTo<pos:position pos:line="497" pos:column="115"/></name></name><argument_list pos:line="497" pos:column="115">(<argument><expr><literal type="string" pos:line="497" pos:column="116">"/computer/"<pos:position pos:line="497" pos:column="128"/></literal> <operator pos:line="497" pos:column="129">+<pos:position pos:line="497" pos:column="130"/></operator> <name pos:line="497" pos:column="131">builtOn<pos:position pos:line="497" pos:column="138"/></name></expr></argument>, <argument><expr><name pos:line="497" pos:column="140">builtOn<pos:position pos:line="497" pos:column="147"/></name></expr></argument>)<pos:position pos:line="497" pos:column="148"/></argument_list></call></expr></argument>)<pos:position pos:line="497" pos:column="149"/></argument_list></call></expr></argument>)<pos:position pos:line="497" pos:column="150"/></argument_list></call></expr>;<pos:position pos:line="497" pos:column="151"/></expr_stmt>
                    <decl_stmt><decl><type><name><name pos:line="498" pos:column="21">Set<pos:position pos:line="498" pos:column="24"/></name><argument_list type="generic" pos:line="498" pos:column="24">&lt;<argument><name pos:line="498" pos:column="25">LabelAtom<pos:position pos:line="498" pos:column="34"/></name></argument>&gt;<pos:position pos:line="498" pos:column="38"/></argument_list></name></type> <name pos:line="498" pos:column="36">assignedLabels<pos:position pos:line="498" pos:column="50"/></name> <init pos:line="498" pos:column="51">= <expr><operator pos:line="498" pos:column="53">new<pos:position pos:line="498" pos:column="56"/></operator> <call><name><name pos:line="498" pos:column="57">HashSet<pos:position pos:line="498" pos:column="64"/></name><argument_list type="generic" pos:line="498" pos:column="64">&lt;<argument><name pos:line="498" pos:column="65">LabelAtom<pos:position pos:line="498" pos:column="74"/></name></argument>&gt;<pos:position pos:line="498" pos:column="78"/></argument_list></name><argument_list pos:line="498" pos:column="75">(<argument><expr><call><name><name pos:line="498" pos:column="76">node<pos:position pos:line="498" pos:column="80"/></name><operator pos:line="498" pos:column="80">.<pos:position pos:line="498" pos:column="81"/></operator><name pos:line="498" pos:column="81">getAssignedLabels<pos:position pos:line="498" pos:column="98"/></name></name><argument_list pos:line="498" pos:column="98">()<pos:position pos:line="498" pos:column="100"/></argument_list></call></expr></argument>)<pos:position pos:line="498" pos:column="101"/></argument_list></call></expr></init></decl>;<pos:position pos:line="498" pos:column="102"/></decl_stmt>
                    <expr_stmt><expr><call><name><name pos:line="499" pos:column="21">assignedLabels<pos:position pos:line="499" pos:column="35"/></name><operator pos:line="499" pos:column="35">.<pos:position pos:line="499" pos:column="36"/></operator><name pos:line="499" pos:column="36">remove<pos:position pos:line="499" pos:column="42"/></name></name><argument_list pos:line="499" pos:column="42">(<argument><expr><call><name><name pos:line="499" pos:column="43">node<pos:position pos:line="499" pos:column="47"/></name><operator pos:line="499" pos:column="47">.<pos:position pos:line="499" pos:column="48"/></operator><name pos:line="499" pos:column="48">getSelfLabel<pos:position pos:line="499" pos:column="60"/></name></name><argument_list pos:line="499" pos:column="60">()<pos:position pos:line="499" pos:column="62"/></argument_list></call></expr></argument>)<pos:position pos:line="499" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="499" pos:column="64"/></expr_stmt>
                    <if pos:line="500" pos:column="21">if <condition pos:line="500" pos:column="24">(<expr><operator pos:line="500" pos:column="25">!<pos:position pos:line="500" pos:column="26"/></operator><call><name><name pos:line="500" pos:column="26">assignedLabels<pos:position pos:line="500" pos:column="40"/></name><operator pos:line="500" pos:column="40">.<pos:position pos:line="500" pos:column="41"/></operator><name pos:line="500" pos:column="41">isEmpty<pos:position pos:line="500" pos:column="48"/></name></name><argument_list pos:line="500" pos:column="48">()<pos:position pos:line="500" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="500" pos:column="51"/></condition><then pos:line="500" pos:column="51"> <block pos:line="500" pos:column="52">{
                        <decl_stmt><decl><type><name pos:line="501" pos:column="25">boolean<pos:position pos:line="501" pos:column="32"/></name></type> <name pos:line="501" pos:column="33">first<pos:position pos:line="501" pos:column="38"/></name> <init pos:line="501" pos:column="39">= <expr><literal type="boolean" pos:line="501" pos:column="41">true<pos:position pos:line="501" pos:column="45"/></literal></expr></init></decl>;<pos:position pos:line="501" pos:column="46"/></decl_stmt>
                        <for pos:line="502" pos:column="25">for <control pos:line="502" pos:column="29">(<init><decl><type><name pos:line="502" pos:column="30">LabelAtom<pos:position pos:line="502" pos:column="39"/></name></type> <name pos:line="502" pos:column="40">label<pos:position pos:line="502" pos:column="45"/></name> <range pos:line="502" pos:column="46">: <expr><name pos:line="502" pos:column="48">assignedLabels<pos:position pos:line="502" pos:column="62"/></name></expr></range></decl></init>)<pos:position pos:line="502" pos:column="63"/></control> <block pos:line="502" pos:column="64">{
                            <if pos:line="503" pos:column="29">if <condition pos:line="503" pos:column="32">(<expr><name pos:line="503" pos:column="33">first<pos:position pos:line="503" pos:column="38"/></name></expr>)<pos:position pos:line="503" pos:column="39"/></condition><then pos:line="503" pos:column="39"> <block pos:line="503" pos:column="40">{
                                <expr_stmt><expr><call><name><name pos:line="504" pos:column="33">listener<pos:position pos:line="504" pos:column="41"/></name><operator pos:line="504" pos:column="41">.<pos:position pos:line="504" pos:column="42"/></operator><name pos:line="504" pos:column="42">getLogger<pos:position pos:line="504" pos:column="51"/></name></name><argument_list pos:line="504" pos:column="51">()<pos:position pos:line="504" pos:column="53"/></argument_list></call><operator pos:line="504" pos:column="53">.<pos:position pos:line="504" pos:column="54"/></operator><call><name pos:line="504" pos:column="54">print<pos:position pos:line="504" pos:column="59"/></name><argument_list pos:line="504" pos:column="59">(<argument><expr><literal type="string" pos:line="504" pos:column="60">" ("<pos:position pos:line="504" pos:column="64"/></literal></expr></argument>)<pos:position pos:line="504" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="504" pos:column="66"/></expr_stmt>
                                <expr_stmt><expr><name pos:line="505" pos:column="33">first<pos:position pos:line="505" pos:column="38"/></name> <operator pos:line="505" pos:column="39">=<pos:position pos:line="505" pos:column="40"/></operator> <literal type="boolean" pos:line="505" pos:column="41">false<pos:position pos:line="505" pos:column="46"/></literal></expr>;<pos:position pos:line="505" pos:column="47"/></expr_stmt>
                            }<pos:position pos:line="506" pos:column="30"/></block></then> <else pos:line="506" pos:column="31">else <block pos:line="506" pos:column="36">{
                                <expr_stmt><expr><call><name><name pos:line="507" pos:column="33">listener<pos:position pos:line="507" pos:column="41"/></name><operator pos:line="507" pos:column="41">.<pos:position pos:line="507" pos:column="42"/></operator><name pos:line="507" pos:column="42">getLogger<pos:position pos:line="507" pos:column="51"/></name></name><argument_list pos:line="507" pos:column="51">()<pos:position pos:line="507" pos:column="53"/></argument_list></call><operator pos:line="507" pos:column="53">.<pos:position pos:line="507" pos:column="54"/></operator><call><name pos:line="507" pos:column="54">print<pos:position pos:line="507" pos:column="59"/></name><argument_list pos:line="507" pos:column="59">(<argument><expr><literal type="char" pos:line="507" pos:column="60">' '<pos:position pos:line="507" pos:column="63"/></literal></expr></argument>)<pos:position pos:line="507" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="507" pos:column="65"/></expr_stmt>
                            }<pos:position pos:line="508" pos:column="30"/></block></else></if>
                            <expr_stmt><expr><call><name><name pos:line="509" pos:column="29">listener<pos:position pos:line="509" pos:column="37"/></name><operator pos:line="509" pos:column="37">.<pos:position pos:line="509" pos:column="38"/></operator><name pos:line="509" pos:column="38">getLogger<pos:position pos:line="509" pos:column="47"/></name></name><argument_list pos:line="509" pos:column="47">()<pos:position pos:line="509" pos:column="49"/></argument_list></call><operator pos:line="509" pos:column="49">.<pos:position pos:line="509" pos:column="50"/></operator><call><name pos:line="509" pos:column="50">print<pos:position pos:line="509" pos:column="55"/></name><argument_list pos:line="509" pos:column="55">(<argument><expr><call><name><name pos:line="509" pos:column="56">label<pos:position pos:line="509" pos:column="61"/></name><operator pos:line="509" pos:column="61">.<pos:position pos:line="509" pos:column="62"/></operator><name pos:line="509" pos:column="62">getName<pos:position pos:line="509" pos:column="69"/></name></name><argument_list pos:line="509" pos:column="69">()<pos:position pos:line="509" pos:column="71"/></argument_list></call></expr></argument>)<pos:position pos:line="509" pos:column="72"/></argument_list></call></expr>;<pos:position pos:line="509" pos:column="73"/></expr_stmt>
                        }<pos:position pos:line="510" pos:column="26"/></block></for>
                        <expr_stmt><expr><call><name><name pos:line="511" pos:column="25">listener<pos:position pos:line="511" pos:column="33"/></name><operator pos:line="511" pos:column="33">.<pos:position pos:line="511" pos:column="34"/></operator><name pos:line="511" pos:column="34">getLogger<pos:position pos:line="511" pos:column="43"/></name></name><argument_list pos:line="511" pos:column="43">()<pos:position pos:line="511" pos:column="45"/></argument_list></call><operator pos:line="511" pos:column="45">.<pos:position pos:line="511" pos:column="46"/></operator><call><name pos:line="511" pos:column="46">print<pos:position pos:line="511" pos:column="51"/></name><argument_list pos:line="511" pos:column="51">(<argument><expr><literal type="char" pos:line="511" pos:column="52">')'<pos:position pos:line="511" pos:column="55"/></literal></expr></argument>)<pos:position pos:line="511" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="511" pos:column="57"/></expr_stmt>
                    }<pos:position pos:line="512" pos:column="22"/></block></then></if>
                }<pos:position pos:line="513" pos:column="18"/></block></else></if>
            }<pos:position pos:line="514" pos:column="14"/></block></then> <else pos:line="514" pos:column="15">else <block pos:line="514" pos:column="20">{
                <expr_stmt><expr><call><name><name pos:line="515" pos:column="17">listener<pos:position pos:line="515" pos:column="25"/></name><operator pos:line="515" pos:column="25">.<pos:position pos:line="515" pos:column="26"/></operator><name pos:line="515" pos:column="26">getLogger<pos:position pos:line="515" pos:column="35"/></name></name><argument_list pos:line="515" pos:column="35">()<pos:position pos:line="515" pos:column="37"/></argument_list></call><operator pos:line="515" pos:column="37">.<pos:position pos:line="515" pos:column="38"/></operator><call><name pos:line="515" pos:column="38">print<pos:position pos:line="515" pos:column="43"/></name><argument_list pos:line="515" pos:column="43">(<argument><expr><call><name><name pos:line="515" pos:column="44">Messages<pos:position pos:line="515" pos:column="52"/></name><operator pos:line="515" pos:column="52">.<pos:position pos:line="515" pos:column="53"/></operator><name pos:line="515" pos:column="53">AbstractBuild_Building<pos:position pos:line="515" pos:column="75"/></name></name><argument_list pos:line="515" pos:column="75">()<pos:position pos:line="515" pos:column="77"/></argument_list></call></expr></argument>)<pos:position pos:line="515" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="515" pos:column="79"/></expr_stmt>
            }<pos:position pos:line="516" pos:column="14"/></block></else></if>
            
            <expr_stmt><expr><name pos:line="518" pos:column="13">lease<pos:position pos:line="518" pos:column="18"/></name> <operator pos:line="518" pos:column="19">=<pos:position pos:line="518" pos:column="20"/></operator> <call><name pos:line="518" pos:column="21">decideWorkspace<pos:position pos:line="518" pos:column="36"/></name><argument_list pos:line="518" pos:column="36">(<argument><expr><name pos:line="518" pos:column="37">node<pos:position pos:line="518" pos:column="41"/></name></expr></argument>, <argument><expr><call><name><name pos:line="518" pos:column="43">Computer<pos:position pos:line="518" pos:column="51"/></name><operator pos:line="518" pos:column="51">.<pos:position pos:line="518" pos:column="52"/></operator><name pos:line="518" pos:column="52">currentComputer<pos:position pos:line="518" pos:column="67"/></name></name><argument_list pos:line="518" pos:column="67">()<pos:position pos:line="518" pos:column="69"/></argument_list></call><operator pos:line="518" pos:column="69">.<pos:position pos:line="518" pos:column="70"/></operator><call><name pos:line="518" pos:column="70">getWorkspaceList<pos:position pos:line="518" pos:column="86"/></name><argument_list pos:line="518" pos:column="86">()<pos:position pos:line="518" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="518" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="518" pos:column="90"/></expr_stmt>

            <expr_stmt><expr><name pos:line="520" pos:column="13">workspace<pos:position pos:line="520" pos:column="22"/></name> <operator pos:line="520" pos:column="23">=<pos:position pos:line="520" pos:column="24"/></operator> <call><name><name pos:line="520" pos:column="25">lease<pos:position pos:line="520" pos:column="30"/></name><operator pos:line="520" pos:column="30">.<pos:position pos:line="520" pos:column="31"/></operator><name pos:line="520" pos:column="31">path<pos:position pos:line="520" pos:column="35"/></name><operator pos:line="520" pos:column="35">.<pos:position pos:line="520" pos:column="36"/></operator><name pos:line="520" pos:column="36">getRemote<pos:position pos:line="520" pos:column="45"/></name></name><argument_list pos:line="520" pos:column="45">()<pos:position pos:line="520" pos:column="47"/></argument_list></call></expr>;<pos:position pos:line="520" pos:column="48"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="521" pos:column="13">listener<pos:position pos:line="521" pos:column="21"/></name><operator pos:line="521" pos:column="21">.<pos:position pos:line="521" pos:column="22"/></operator><name pos:line="521" pos:column="22">getLogger<pos:position pos:line="521" pos:column="31"/></name></name><argument_list pos:line="521" pos:column="31">()<pos:position pos:line="521" pos:column="33"/></argument_list></call><operator pos:line="521" pos:column="33">.<pos:position pos:line="521" pos:column="34"/></operator><call><name pos:line="521" pos:column="34">println<pos:position pos:line="521" pos:column="41"/></name><argument_list pos:line="521" pos:column="41">(<argument><expr><call><name><name pos:line="521" pos:column="42">Messages<pos:position pos:line="521" pos:column="50"/></name><operator pos:line="521" pos:column="50">.<pos:position pos:line="521" pos:column="51"/></operator><name pos:line="521" pos:column="51">AbstractBuild_BuildingInWorkspace<pos:position pos:line="521" pos:column="84"/></name></name><argument_list pos:line="521" pos:column="84">(<argument><expr><name pos:line="521" pos:column="85">workspace<pos:position pos:line="521" pos:column="94"/></name></expr></argument>)<pos:position pos:line="521" pos:column="95"/></argument_list></call></expr></argument>)<pos:position pos:line="521" pos:column="96"/></argument_list></call></expr>;<pos:position pos:line="521" pos:column="97"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="522" pos:column="13">node<pos:position pos:line="522" pos:column="17"/></name><operator pos:line="522" pos:column="17">.<pos:position pos:line="522" pos:column="18"/></operator><name pos:line="522" pos:column="18">getFileSystemProvisioner<pos:position pos:line="522" pos:column="42"/></name></name><argument_list pos:line="522" pos:column="42">()<pos:position pos:line="522" pos:column="44"/></argument_list></call><operator pos:line="522" pos:column="44">.<pos:position pos:line="522" pos:column="45"/></operator><call><name pos:line="522" pos:column="45">prepareWorkspace<pos:position pos:line="522" pos:column="61"/></name><argument_list pos:line="522" pos:column="61">(<argument><expr><name><name pos:line="522" pos:column="62">AbstractBuild<pos:position pos:line="522" pos:column="75"/></name><operator pos:line="522" pos:column="75">.<pos:position pos:line="522" pos:column="76"/></operator><name pos:line="522" pos:column="76">this<pos:position pos:line="522" pos:column="80"/></name></name></expr></argument>,<argument><expr><name><name pos:line="522" pos:column="81">lease<pos:position pos:line="522" pos:column="86"/></name><operator pos:line="522" pos:column="86">.<pos:position pos:line="522" pos:column="87"/></operator><name pos:line="522" pos:column="87">path<pos:position pos:line="522" pos:column="91"/></name></name></expr></argument>,<argument><expr><name pos:line="522" pos:column="92">listener<pos:position pos:line="522" pos:column="100"/></name></expr></argument>)<pos:position pos:line="522" pos:column="101"/></argument_list></call></expr>;<pos:position pos:line="522" pos:column="102"/></expr_stmt>

            <for pos:line="524" pos:column="13">for <control pos:line="524" pos:column="17">(<init><decl><type><name pos:line="524" pos:column="18">WorkspaceListener<pos:position pos:line="524" pos:column="35"/></name></type> <name pos:line="524" pos:column="36">wl<pos:position pos:line="524" pos:column="38"/></name> <range pos:line="524" pos:column="39">: <expr><call><name><name pos:line="524" pos:column="41">WorkspaceListener<pos:position pos:line="524" pos:column="58"/></name><operator pos:line="524" pos:column="58">.<pos:position pos:line="524" pos:column="59"/></operator><name pos:line="524" pos:column="59">all<pos:position pos:line="524" pos:column="62"/></name></name><argument_list pos:line="524" pos:column="62">()<pos:position pos:line="524" pos:column="64"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="524" pos:column="65"/></control> <block pos:line="524" pos:column="66">{
                <expr_stmt><expr><call><name><name pos:line="525" pos:column="17">wl<pos:position pos:line="525" pos:column="19"/></name><operator pos:line="525" pos:column="19">.<pos:position pos:line="525" pos:column="20"/></operator><name pos:line="525" pos:column="20">beforeUse<pos:position pos:line="525" pos:column="29"/></name></name><argument_list pos:line="525" pos:column="29">(<argument><expr><name><name pos:line="525" pos:column="30">AbstractBuild<pos:position pos:line="525" pos:column="43"/></name><operator pos:line="525" pos:column="43">.<pos:position pos:line="525" pos:column="44"/></operator><name pos:line="525" pos:column="44">this<pos:position pos:line="525" pos:column="48"/></name></name></expr></argument>, <argument><expr><name><name pos:line="525" pos:column="50">lease<pos:position pos:line="525" pos:column="55"/></name><operator pos:line="525" pos:column="55">.<pos:position pos:line="525" pos:column="56"/></operator><name pos:line="525" pos:column="56">path<pos:position pos:line="525" pos:column="60"/></name></name></expr></argument>, <argument><expr><name pos:line="525" pos:column="62">listener<pos:position pos:line="525" pos:column="70"/></name></expr></argument>)<pos:position pos:line="525" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="525" pos:column="72"/></expr_stmt>
            }<pos:position pos:line="526" pos:column="14"/></block></for>

            <expr_stmt><expr><call><name pos:line="528" pos:column="13">getProject<pos:position pos:line="528" pos:column="23"/></name><argument_list pos:line="528" pos:column="23">()<pos:position pos:line="528" pos:column="25"/></argument_list></call><operator pos:line="528" pos:column="25">.<pos:position pos:line="528" pos:column="26"/></operator><call><name pos:line="528" pos:column="26">getScmCheckoutStrategy<pos:position pos:line="528" pos:column="48"/></name><argument_list pos:line="528" pos:column="48">()<pos:position pos:line="528" pos:column="50"/></argument_list></call><operator pos:line="528" pos:column="50">.<pos:position pos:line="528" pos:column="51"/></operator><call><name pos:line="528" pos:column="51">preCheckout<pos:position pos:line="528" pos:column="62"/></name><argument_list pos:line="528" pos:column="62">(<argument><expr><name><name pos:line="528" pos:column="63">AbstractBuild<pos:position pos:line="528" pos:column="76"/></name><operator pos:line="528" pos:column="76">.<pos:position pos:line="528" pos:column="77"/></operator><name pos:line="528" pos:column="77">this<pos:position pos:line="528" pos:column="81"/></name></name></expr></argument>, <argument><expr><name pos:line="528" pos:column="83">launcher<pos:position pos:line="528" pos:column="91"/></name></expr></argument>, <argument><expr><name><name pos:line="528" pos:column="93">this<pos:position pos:line="528" pos:column="97"/></name><operator pos:line="528" pos:column="97">.<pos:position pos:line="528" pos:column="98"/></operator><name pos:line="528" pos:column="98">listener<pos:position pos:line="528" pos:column="106"/></name></name></expr></argument>)<pos:position pos:line="528" pos:column="107"/></argument_list></call></expr>;<pos:position pos:line="528" pos:column="108"/></expr_stmt>
            <expr_stmt><expr><call><name pos:line="529" pos:column="13">getProject<pos:position pos:line="529" pos:column="23"/></name><argument_list pos:line="529" pos:column="23">()<pos:position pos:line="529" pos:column="25"/></argument_list></call><operator pos:line="529" pos:column="25">.<pos:position pos:line="529" pos:column="26"/></operator><call><name pos:line="529" pos:column="26">getScmCheckoutStrategy<pos:position pos:line="529" pos:column="48"/></name><argument_list pos:line="529" pos:column="48">()<pos:position pos:line="529" pos:column="50"/></argument_list></call><operator pos:line="529" pos:column="50">.<pos:position pos:line="529" pos:column="51"/></operator><call><name pos:line="529" pos:column="51">checkout<pos:position pos:line="529" pos:column="59"/></name><argument_list pos:line="529" pos:column="59">(<argument><expr><name pos:line="529" pos:column="60">this<pos:position pos:line="529" pos:column="64"/></name></expr></argument>)<pos:position pos:line="529" pos:column="65"/></argument_list></call></expr>;<pos:position pos:line="529" pos:column="66"/></expr_stmt>

            <if pos:line="531" pos:column="13">if <condition pos:line="531" pos:column="16">(<expr><operator pos:line="531" pos:column="17">!<pos:position pos:line="531" pos:column="18"/></operator><call><name pos:line="531" pos:column="18">preBuild<pos:position pos:line="531" pos:column="26"/></name><argument_list pos:line="531" pos:column="26">(<argument><expr><name pos:line="531" pos:column="27">listener<pos:position pos:line="531" pos:column="35"/></name></expr></argument>,<argument><expr><call><name><name pos:line="531" pos:column="36">project<pos:position pos:line="531" pos:column="43"/></name><operator pos:line="531" pos:column="43">.<pos:position pos:line="531" pos:column="44"/></operator><name pos:line="531" pos:column="44">getProperties<pos:position pos:line="531" pos:column="57"/></name></name><argument_list pos:line="531" pos:column="57">()<pos:position pos:line="531" pos:column="59"/></argument_list></call></expr></argument>)<pos:position pos:line="531" pos:column="60"/></argument_list></call></expr>)<pos:position pos:line="531" pos:column="61"/></condition><then pos:line="531" pos:column="61">
                <block type="pseudo"><return pos:line="532" pos:column="17">return <expr><name><name pos:line="532" pos:column="24">Result<pos:position pos:line="532" pos:column="30"/></name><operator pos:line="532" pos:column="30">.<pos:position pos:line="532" pos:column="31"/></operator><name pos:line="532" pos:column="31">FAILURE<pos:position pos:line="532" pos:column="38"/></name></name></expr>;<pos:position pos:line="532" pos:column="39"/></return></block></then></if>

            <decl_stmt><decl><type><name pos:line="534" pos:column="13">Result<pos:position pos:line="534" pos:column="19"/></name></type> <name pos:line="534" pos:column="20">result<pos:position pos:line="534" pos:column="26"/></name> <init pos:line="534" pos:column="27">= <expr><call><name pos:line="534" pos:column="29">doRun<pos:position pos:line="534" pos:column="34"/></name><argument_list pos:line="534" pos:column="34">(<argument><expr><name pos:line="534" pos:column="35">listener<pos:position pos:line="534" pos:column="43"/></name></expr></argument>)<pos:position pos:line="534" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="534" pos:column="45"/></decl_stmt>

            <if pos:line="536" pos:column="13">if <condition pos:line="536" pos:column="16">(<expr><call><name><name pos:line="536" pos:column="17">node<pos:position pos:line="536" pos:column="21"/></name><operator pos:line="536" pos:column="21">.<pos:position pos:line="536" pos:column="22"/></operator><name pos:line="536" pos:column="22">getChannel<pos:position pos:line="536" pos:column="32"/></name></name><argument_list pos:line="536" pos:column="32">()<pos:position pos:line="536" pos:column="34"/></argument_list></call> <operator pos:line="536" pos:column="35">!=<pos:position pos:line="536" pos:column="37"/></operator> <literal type="null" pos:line="536" pos:column="38">null<pos:position pos:line="536" pos:column="42"/></literal></expr>)<pos:position pos:line="536" pos:column="43"/></condition><then pos:line="536" pos:column="43"> <block pos:line="536" pos:column="44">{
                <comment type="line" pos:line="537" pos:column="17">// kill run-away processes that are left</comment>
                <comment type="line" pos:line="538" pos:column="17">// use multiple environment variables so that people can escape this massacre by overriding an environment</comment>
                <comment type="line" pos:line="539" pos:column="17">// variable for some processes</comment>
                <expr_stmt><expr><call><name><name pos:line="540" pos:column="17">launcher<pos:position pos:line="540" pos:column="25"/></name><operator pos:line="540" pos:column="25">.<pos:position pos:line="540" pos:column="26"/></operator><name pos:line="540" pos:column="26">kill<pos:position pos:line="540" pos:column="30"/></name></name><argument_list pos:line="540" pos:column="30">(<argument><expr><call><name pos:line="540" pos:column="31">getCharacteristicEnvVars<pos:position pos:line="540" pos:column="55"/></name><argument_list pos:line="540" pos:column="55">()<pos:position pos:line="540" pos:column="57"/></argument_list></call></expr></argument>)<pos:position pos:line="540" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="540" pos:column="59"/></expr_stmt>
            }<pos:position pos:line="541" pos:column="14"/></block></then></if>

            <comment type="line" pos:line="543" pos:column="13">// this is ugly, but for historical reason, if non-null value is returned</comment>
            <comment type="line" pos:line="544" pos:column="13">// it should become the final result.</comment>
            <if pos:line="545" pos:column="13">if <condition pos:line="545" pos:column="16">(<expr><name pos:line="545" pos:column="17">result<pos:position pos:line="545" pos:column="23"/></name><operator pos:line="545" pos:column="23">==<pos:position pos:line="545" pos:column="25"/></operator><literal type="null" pos:line="545" pos:column="25">null<pos:position pos:line="545" pos:column="29"/></literal></expr>)<pos:position pos:line="545" pos:column="30"/></condition><then pos:line="545" pos:column="30">    <block type="pseudo"><expr_stmt><expr><name pos:line="545" pos:column="34">result<pos:position pos:line="545" pos:column="40"/></name> <operator pos:line="545" pos:column="41">=<pos:position pos:line="545" pos:column="42"/></operator> <call><name pos:line="545" pos:column="43">getResult<pos:position pos:line="545" pos:column="52"/></name><argument_list pos:line="545" pos:column="52">()<pos:position pos:line="545" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="545" pos:column="55"/></expr_stmt></block></then></if>
            <if pos:line="546" pos:column="13">if <condition pos:line="546" pos:column="16">(<expr><name pos:line="546" pos:column="17">result<pos:position pos:line="546" pos:column="23"/></name><operator pos:line="546" pos:column="23">==<pos:position pos:line="546" pos:column="25"/></operator><literal type="null" pos:line="546" pos:column="25">null<pos:position pos:line="546" pos:column="29"/></literal></expr>)<pos:position pos:line="546" pos:column="30"/></condition><then pos:line="546" pos:column="30">    <block type="pseudo"><expr_stmt><expr><name pos:line="546" pos:column="34">result<pos:position pos:line="546" pos:column="40"/></name> <operator pos:line="546" pos:column="41">=<pos:position pos:line="546" pos:column="42"/></operator> <name><name pos:line="546" pos:column="43">Result<pos:position pos:line="546" pos:column="49"/></name><operator pos:line="546" pos:column="49">.<pos:position pos:line="546" pos:column="50"/></operator><name pos:line="546" pos:column="50">SUCCESS<pos:position pos:line="546" pos:column="57"/></name></name></expr>;<pos:position pos:line="546" pos:column="58"/></expr_stmt></block></then></if>

            <return pos:line="548" pos:column="13">return <expr><name pos:line="548" pos:column="20">result<pos:position pos:line="548" pos:column="26"/></name></expr>;<pos:position pos:line="548" pos:column="27"/></return>
        }<pos:position pos:line="549" pos:column="10"/></block></function>

        <comment type="block" format="javadoc" pos:line="551" pos:column="9">/**
         * Creates a {@link Launcher} that this build will use. This can be overridden by derived types
         * to decorate the resulting {@link Launcher}.
         *
         * @param listener
         *      Always non-null. Connected to the main build output.
         */</comment>
        <function><annotation pos:line="558" pos:column="9">@<name pos:line="558" pos:column="10">Nonnull<pos:position pos:line="558" pos:column="17"/></name></annotation>
        <specifier pos:line="559" pos:column="9">protected<pos:position pos:line="559" pos:column="18"/></specifier> <type><name pos:line="559" pos:column="19">Launcher<pos:position pos:line="559" pos:column="27"/></name></type> <name pos:line="559" pos:column="28">createLauncher<pos:position pos:line="559" pos:column="42"/></name><parameter_list pos:line="559" pos:column="42">(<parameter><decl><type><annotation pos:line="559" pos:column="43">@<name pos:line="559" pos:column="44">Nonnull<pos:position pos:line="559" pos:column="51"/></name></annotation> <name pos:line="559" pos:column="52">BuildListener<pos:position pos:line="559" pos:column="65"/></name></type> <name pos:line="559" pos:column="66">listener<pos:position pos:line="559" pos:column="74"/></name></decl></parameter>)<pos:position pos:line="559" pos:column="75"/></parameter_list> <throws pos:line="559" pos:column="76">throws <argument><expr><name pos:line="559" pos:column="83">IOException<pos:position pos:line="559" pos:column="94"/></name></expr></argument>, <argument><expr><name pos:line="559" pos:column="96">InterruptedException<pos:position pos:line="559" pos:column="116"/></name></expr></argument></throws> <block pos:line="559" pos:column="117">{
            <decl_stmt><decl><type><specifier pos:line="560" pos:column="13">final<pos:position pos:line="560" pos:column="18"/></specifier> <name pos:line="560" pos:column="19">Node<pos:position pos:line="560" pos:column="23"/></name></type> <name pos:line="560" pos:column="24">currentNode<pos:position pos:line="560" pos:column="35"/></name> <init pos:line="560" pos:column="36">= <expr><call><name pos:line="560" pos:column="38">getCurrentNode<pos:position pos:line="560" pos:column="52"/></name><argument_list pos:line="560" pos:column="52">()<pos:position pos:line="560" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="560" pos:column="55"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="561" pos:column="13">Launcher<pos:position pos:line="561" pos:column="21"/></name></type> <name pos:line="561" pos:column="22">l<pos:position pos:line="561" pos:column="23"/></name> <init pos:line="561" pos:column="24">= <expr><call><name><name pos:line="561" pos:column="26">currentNode<pos:position pos:line="561" pos:column="37"/></name><operator pos:line="561" pos:column="37">.<pos:position pos:line="561" pos:column="38"/></operator><name pos:line="561" pos:column="38">createLauncher<pos:position pos:line="561" pos:column="52"/></name></name><argument_list pos:line="561" pos:column="52">(<argument><expr><name pos:line="561" pos:column="53">listener<pos:position pos:line="561" pos:column="61"/></name></expr></argument>)<pos:position pos:line="561" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="561" pos:column="63"/></decl_stmt>

            <if pos:line="563" pos:column="13">if <condition pos:line="563" pos:column="16">(<expr><name pos:line="563" pos:column="17">project<pos:position pos:line="563" pos:column="24"/></name> <operator pos:line="563" pos:column="25">instanceof<pos:position pos:line="563" pos:column="35"/></operator> <name pos:line="563" pos:column="36">BuildableItemWithBuildWrappers<pos:position pos:line="563" pos:column="66"/></name></expr>)<pos:position pos:line="563" pos:column="67"/></condition><then pos:line="563" pos:column="67"> <block pos:line="563" pos:column="68">{
                <decl_stmt><decl><type><name pos:line="564" pos:column="17">BuildableItemWithBuildWrappers<pos:position pos:line="564" pos:column="47"/></name></type> <name pos:line="564" pos:column="48">biwbw<pos:position pos:line="564" pos:column="53"/></name> <init pos:line="564" pos:column="54">= <expr><operator pos:line="564" pos:column="56">(<pos:position pos:line="564" pos:column="57"/></operator><name pos:line="564" pos:column="57">BuildableItemWithBuildWrappers<pos:position pos:line="564" pos:column="87"/></name><operator pos:line="564" pos:column="87">)<pos:position pos:line="564" pos:column="88"/></operator> <name pos:line="564" pos:column="89">project<pos:position pos:line="564" pos:column="96"/></name></expr></init></decl>;<pos:position pos:line="564" pos:column="97"/></decl_stmt>
                <for pos:line="565" pos:column="17">for <control pos:line="565" pos:column="21">(<init><decl><type><name pos:line="565" pos:column="22">BuildWrapper<pos:position pos:line="565" pos:column="34"/></name></type> <name pos:line="565" pos:column="35">bw<pos:position pos:line="565" pos:column="37"/></name> <range pos:line="565" pos:column="38">: <expr><call><name><name pos:line="565" pos:column="40">biwbw<pos:position pos:line="565" pos:column="45"/></name><operator pos:line="565" pos:column="45">.<pos:position pos:line="565" pos:column="46"/></operator><name pos:line="565" pos:column="46">getBuildWrappersList<pos:position pos:line="565" pos:column="66"/></name></name><argument_list pos:line="565" pos:column="66">()<pos:position pos:line="565" pos:column="68"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="565" pos:column="69"/></control>
                    <block type="pseudo"><expr_stmt><expr><name pos:line="566" pos:column="21">l<pos:position pos:line="566" pos:column="22"/></name> <operator pos:line="566" pos:column="23">=<pos:position pos:line="566" pos:column="24"/></operator> <call><name><name pos:line="566" pos:column="25">bw<pos:position pos:line="566" pos:column="27"/></name><operator pos:line="566" pos:column="27">.<pos:position pos:line="566" pos:column="28"/></operator><name pos:line="566" pos:column="28">decorateLauncher<pos:position pos:line="566" pos:column="44"/></name></name><argument_list pos:line="566" pos:column="44">(<argument><expr><name><name pos:line="566" pos:column="45">AbstractBuild<pos:position pos:line="566" pos:column="58"/></name><operator pos:line="566" pos:column="58">.<pos:position pos:line="566" pos:column="59"/></operator><name pos:line="566" pos:column="59">this<pos:position pos:line="566" pos:column="63"/></name></name></expr></argument>,<argument><expr><name pos:line="566" pos:column="64">l<pos:position pos:line="566" pos:column="65"/></name></expr></argument>,<argument><expr><name pos:line="566" pos:column="66">listener<pos:position pos:line="566" pos:column="74"/></name></expr></argument>)<pos:position pos:line="566" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="566" pos:column="76"/></expr_stmt></block></for>
            }<pos:position pos:line="567" pos:column="14"/></block></then></if>

            <expr_stmt><expr><name pos:line="569" pos:column="13">buildEnvironments<pos:position pos:line="569" pos:column="30"/></name> <operator pos:line="569" pos:column="31">=<pos:position pos:line="569" pos:column="32"/></operator> <operator pos:line="569" pos:column="33">new<pos:position pos:line="569" pos:column="36"/></operator> <call><name><name pos:line="569" pos:column="37">ArrayList<pos:position pos:line="569" pos:column="46"/></name><argument_list type="generic" pos:line="569" pos:column="46">&lt;<argument><name pos:line="569" pos:column="47">Environment<pos:position pos:line="569" pos:column="58"/></name></argument>&gt;<pos:position pos:line="569" pos:column="62"/></argument_list></name><argument_list pos:line="569" pos:column="59">()<pos:position pos:line="569" pos:column="61"/></argument_list></call></expr>;<pos:position pos:line="569" pos:column="62"/></expr_stmt>

            <for pos:line="571" pos:column="13">for <control pos:line="571" pos:column="17">(<init><decl><type><name pos:line="571" pos:column="18">RunListener<pos:position pos:line="571" pos:column="29"/></name></type> <name pos:line="571" pos:column="30">rl<pos:position pos:line="571" pos:column="32"/></name><range pos:line="571" pos:column="32">: <expr><call><name><name pos:line="571" pos:column="34">RunListener<pos:position pos:line="571" pos:column="45"/></name><operator pos:line="571" pos:column="45">.<pos:position pos:line="571" pos:column="46"/></operator><name pos:line="571" pos:column="46">all<pos:position pos:line="571" pos:column="49"/></name></name><argument_list pos:line="571" pos:column="49">()<pos:position pos:line="571" pos:column="51"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="571" pos:column="52"/></control> <block pos:line="571" pos:column="53">{
                <decl_stmt><decl><type><name pos:line="572" pos:column="17">Environment<pos:position pos:line="572" pos:column="28"/></name></type> <name pos:line="572" pos:column="29">environment<pos:position pos:line="572" pos:column="40"/></name> <init pos:line="572" pos:column="41">= <expr><call><name><name pos:line="572" pos:column="43">rl<pos:position pos:line="572" pos:column="45"/></name><operator pos:line="572" pos:column="45">.<pos:position pos:line="572" pos:column="46"/></operator><name pos:line="572" pos:column="46">setUpEnvironment<pos:position pos:line="572" pos:column="62"/></name></name><argument_list pos:line="572" pos:column="62">(<argument><expr><name><name pos:line="572" pos:column="63">AbstractBuild<pos:position pos:line="572" pos:column="76"/></name><operator pos:line="572" pos:column="76">.<pos:position pos:line="572" pos:column="77"/></operator><name pos:line="572" pos:column="77">this<pos:position pos:line="572" pos:column="81"/></name></name></expr></argument>, <argument><expr><name pos:line="572" pos:column="83">l<pos:position pos:line="572" pos:column="84"/></name></expr></argument>, <argument><expr><name pos:line="572" pos:column="86">listener<pos:position pos:line="572" pos:column="94"/></name></expr></argument>)<pos:position pos:line="572" pos:column="95"/></argument_list></call></expr></init></decl>;<pos:position pos:line="572" pos:column="96"/></decl_stmt>
                <if pos:line="573" pos:column="17">if <condition pos:line="573" pos:column="20">(<expr><name pos:line="573" pos:column="21">environment<pos:position pos:line="573" pos:column="32"/></name> <operator pos:line="573" pos:column="33">!=<pos:position pos:line="573" pos:column="35"/></operator> <literal type="null" pos:line="573" pos:column="36">null<pos:position pos:line="573" pos:column="40"/></literal></expr>)<pos:position pos:line="573" pos:column="41"/></condition><then pos:line="573" pos:column="41"> <block pos:line="573" pos:column="42">{
                    <expr_stmt><expr><call><name><name pos:line="574" pos:column="21">buildEnvironments<pos:position pos:line="574" pos:column="38"/></name><operator pos:line="574" pos:column="38">.<pos:position pos:line="574" pos:column="39"/></operator><name pos:line="574" pos:column="39">add<pos:position pos:line="574" pos:column="42"/></name></name><argument_list pos:line="574" pos:column="42">(<argument><expr><name pos:line="574" pos:column="43">environment<pos:position pos:line="574" pos:column="54"/></name></expr></argument>)<pos:position pos:line="574" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="574" pos:column="56"/></expr_stmt>
                }<pos:position pos:line="575" pos:column="18"/></block></then></if>
            }<pos:position pos:line="576" pos:column="14"/></block></for>

            <for pos:line="578" pos:column="13">for <control pos:line="578" pos:column="17">(<init><decl><type><name pos:line="578" pos:column="18">NodeProperty<pos:position pos:line="578" pos:column="30"/></name></type> <name pos:line="578" pos:column="31">nodeProperty<pos:position pos:line="578" pos:column="43"/></name><range pos:line="578" pos:column="43">: <expr><call><name><name pos:line="578" pos:column="45">Jenkins<pos:position pos:line="578" pos:column="52"/></name><operator pos:line="578" pos:column="52">.<pos:position pos:line="578" pos:column="53"/></operator><name pos:line="578" pos:column="53">getInstance<pos:position pos:line="578" pos:column="64"/></name></name><argument_list pos:line="578" pos:column="64">()<pos:position pos:line="578" pos:column="66"/></argument_list></call><operator pos:line="578" pos:column="66">.<pos:position pos:line="578" pos:column="67"/></operator><call><name pos:line="578" pos:column="67">getGlobalNodeProperties<pos:position pos:line="578" pos:column="90"/></name><argument_list pos:line="578" pos:column="90">()<pos:position pos:line="578" pos:column="92"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="578" pos:column="93"/></control> <block pos:line="578" pos:column="94">{
                <decl_stmt><decl><type><name pos:line="579" pos:column="17">Environment<pos:position pos:line="579" pos:column="28"/></name></type> <name pos:line="579" pos:column="29">environment<pos:position pos:line="579" pos:column="40"/></name> <init pos:line="579" pos:column="41">= <expr><call><name><name pos:line="579" pos:column="43">nodeProperty<pos:position pos:line="579" pos:column="55"/></name><operator pos:line="579" pos:column="55">.<pos:position pos:line="579" pos:column="56"/></operator><name pos:line="579" pos:column="56">setUp<pos:position pos:line="579" pos:column="61"/></name></name><argument_list pos:line="579" pos:column="61">(<argument><expr><name><name pos:line="579" pos:column="62">AbstractBuild<pos:position pos:line="579" pos:column="75"/></name><operator pos:line="579" pos:column="75">.<pos:position pos:line="579" pos:column="76"/></operator><name pos:line="579" pos:column="76">this<pos:position pos:line="579" pos:column="80"/></name></name></expr></argument>, <argument><expr><name pos:line="579" pos:column="82">l<pos:position pos:line="579" pos:column="83"/></name></expr></argument>, <argument><expr><name pos:line="579" pos:column="85">listener<pos:position pos:line="579" pos:column="93"/></name></expr></argument>)<pos:position pos:line="579" pos:column="94"/></argument_list></call></expr></init></decl>;<pos:position pos:line="579" pos:column="95"/></decl_stmt>
                <if pos:line="580" pos:column="17">if <condition pos:line="580" pos:column="20">(<expr><name pos:line="580" pos:column="21">environment<pos:position pos:line="580" pos:column="32"/></name> <operator pos:line="580" pos:column="33">!=<pos:position pos:line="580" pos:column="35"/></operator> <literal type="null" pos:line="580" pos:column="36">null<pos:position pos:line="580" pos:column="40"/></literal></expr>)<pos:position pos:line="580" pos:column="41"/></condition><then pos:line="580" pos:column="41"> <block pos:line="580" pos:column="42">{
                    <expr_stmt><expr><call><name><name pos:line="581" pos:column="21">buildEnvironments<pos:position pos:line="581" pos:column="38"/></name><operator pos:line="581" pos:column="38">.<pos:position pos:line="581" pos:column="39"/></operator><name pos:line="581" pos:column="39">add<pos:position pos:line="581" pos:column="42"/></name></name><argument_list pos:line="581" pos:column="42">(<argument><expr><name pos:line="581" pos:column="43">environment<pos:position pos:line="581" pos:column="54"/></name></expr></argument>)<pos:position pos:line="581" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="581" pos:column="56"/></expr_stmt>
                }<pos:position pos:line="582" pos:column="18"/></block></then></if>
            }<pos:position pos:line="583" pos:column="14"/></block></for>

            <for pos:line="585" pos:column="13">for <control pos:line="585" pos:column="17">(<init><decl><type><name pos:line="585" pos:column="18">NodeProperty<pos:position pos:line="585" pos:column="30"/></name></type> <name pos:line="585" pos:column="31">nodeProperty<pos:position pos:line="585" pos:column="43"/></name><range pos:line="585" pos:column="43">: <expr><call><name><name pos:line="585" pos:column="45">currentNode<pos:position pos:line="585" pos:column="56"/></name><operator pos:line="585" pos:column="56">.<pos:position pos:line="585" pos:column="57"/></operator><name pos:line="585" pos:column="57">getNodeProperties<pos:position pos:line="585" pos:column="74"/></name></name><argument_list pos:line="585" pos:column="74">()<pos:position pos:line="585" pos:column="76"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="585" pos:column="77"/></control> <block pos:line="585" pos:column="78">{
                <decl_stmt><decl><type><name pos:line="586" pos:column="17">Environment<pos:position pos:line="586" pos:column="28"/></name></type> <name pos:line="586" pos:column="29">environment<pos:position pos:line="586" pos:column="40"/></name> <init pos:line="586" pos:column="41">= <expr><call><name><name pos:line="586" pos:column="43">nodeProperty<pos:position pos:line="586" pos:column="55"/></name><operator pos:line="586" pos:column="55">.<pos:position pos:line="586" pos:column="56"/></operator><name pos:line="586" pos:column="56">setUp<pos:position pos:line="586" pos:column="61"/></name></name><argument_list pos:line="586" pos:column="61">(<argument><expr><name><name pos:line="586" pos:column="62">AbstractBuild<pos:position pos:line="586" pos:column="75"/></name><operator pos:line="586" pos:column="75">.<pos:position pos:line="586" pos:column="76"/></operator><name pos:line="586" pos:column="76">this<pos:position pos:line="586" pos:column="80"/></name></name></expr></argument>, <argument><expr><name pos:line="586" pos:column="82">l<pos:position pos:line="586" pos:column="83"/></name></expr></argument>, <argument><expr><name pos:line="586" pos:column="85">listener<pos:position pos:line="586" pos:column="93"/></name></expr></argument>)<pos:position pos:line="586" pos:column="94"/></argument_list></call></expr></init></decl>;<pos:position pos:line="586" pos:column="95"/></decl_stmt>
                <if pos:line="587" pos:column="17">if <condition pos:line="587" pos:column="20">(<expr><name pos:line="587" pos:column="21">environment<pos:position pos:line="587" pos:column="32"/></name> <operator pos:line="587" pos:column="33">!=<pos:position pos:line="587" pos:column="35"/></operator> <literal type="null" pos:line="587" pos:column="36">null<pos:position pos:line="587" pos:column="40"/></literal></expr>)<pos:position pos:line="587" pos:column="41"/></condition><then pos:line="587" pos:column="41"> <block pos:line="587" pos:column="42">{
                    <expr_stmt><expr><call><name><name pos:line="588" pos:column="21">buildEnvironments<pos:position pos:line="588" pos:column="38"/></name><operator pos:line="588" pos:column="38">.<pos:position pos:line="588" pos:column="39"/></operator><name pos:line="588" pos:column="39">add<pos:position pos:line="588" pos:column="42"/></name></name><argument_list pos:line="588" pos:column="42">(<argument><expr><name pos:line="588" pos:column="43">environment<pos:position pos:line="588" pos:column="54"/></name></expr></argument>)<pos:position pos:line="588" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="588" pos:column="56"/></expr_stmt>
                }<pos:position pos:line="589" pos:column="18"/></block></then></if>
            }<pos:position pos:line="590" pos:column="14"/></block></for>

            <return pos:line="592" pos:column="13">return <expr><name pos:line="592" pos:column="20">l<pos:position pos:line="592" pos:column="21"/></name></expr>;<pos:position pos:line="592" pos:column="22"/></return>
        }<pos:position pos:line="593" pos:column="10"/></block></function>

        <function><specifier pos:line="595" pos:column="9">public<pos:position pos:line="595" pos:column="15"/></specifier> <type><name pos:line="595" pos:column="16">void<pos:position pos:line="595" pos:column="20"/></name></type> <name pos:line="595" pos:column="21">defaultCheckout<pos:position pos:line="595" pos:column="36"/></name><parameter_list pos:line="595" pos:column="36">()<pos:position pos:line="595" pos:column="38"/></parameter_list> <throws pos:line="595" pos:column="39">throws <argument><expr><name pos:line="595" pos:column="46">IOException<pos:position pos:line="595" pos:column="57"/></name></expr></argument>, <argument><expr><name pos:line="595" pos:column="59">InterruptedException<pos:position pos:line="595" pos:column="79"/></name></expr></argument></throws> <block pos:line="595" pos:column="80">{
            <decl_stmt><decl><type><name><name pos:line="596" pos:column="13">AbstractBuild<pos:position pos:line="596" pos:column="26"/></name><argument_list type="generic" pos:line="596" pos:column="26">&lt;<argument><name pos:line="596" pos:column="27">?<pos:position pos:line="596" pos:column="28"/></name></argument>,<argument><name pos:line="596" pos:column="29">?<pos:position pos:line="596" pos:column="30"/></name></argument>&gt;<pos:position pos:line="596" pos:column="34"/></argument_list></name></type> <name pos:line="596" pos:column="32">build<pos:position pos:line="596" pos:column="37"/></name> <init pos:line="596" pos:column="38">= <expr><name><name pos:line="596" pos:column="40">AbstractBuild<pos:position pos:line="596" pos:column="53"/></name><operator pos:line="596" pos:column="53">.<pos:position pos:line="596" pos:column="54"/></operator><name pos:line="596" pos:column="54">this<pos:position pos:line="596" pos:column="58"/></name></name></expr></init></decl>;<pos:position pos:line="596" pos:column="59"/></decl_stmt>
            <decl_stmt><decl><type><name><name pos:line="597" pos:column="13">AbstractProject<pos:position pos:line="597" pos:column="28"/></name><argument_list type="generic" pos:line="597" pos:column="28">&lt;<argument><name pos:line="597" pos:column="29">?<pos:position pos:line="597" pos:column="30"/></name></argument>, <argument><name pos:line="597" pos:column="32">?<pos:position pos:line="597" pos:column="33"/></name></argument>&gt;<pos:position pos:line="597" pos:column="37"/></argument_list></name></type> <name pos:line="597" pos:column="35">project<pos:position pos:line="597" pos:column="42"/></name> <init pos:line="597" pos:column="43">= <expr><call><name><name pos:line="597" pos:column="45">build<pos:position pos:line="597" pos:column="50"/></name><operator pos:line="597" pos:column="50">.<pos:position pos:line="597" pos:column="51"/></operator><name pos:line="597" pos:column="51">getProject<pos:position pos:line="597" pos:column="61"/></name></name><argument_list pos:line="597" pos:column="61">()<pos:position pos:line="597" pos:column="63"/></argument_list></call></expr></init></decl>;<pos:position pos:line="597" pos:column="64"/></decl_stmt>

            <for pos:line="599" pos:column="13">for <control pos:line="599" pos:column="17">(<init><decl><type><name pos:line="599" pos:column="18">int<pos:position pos:line="599" pos:column="21"/></name></type> <name pos:line="599" pos:column="22">retryCount<pos:position pos:line="599" pos:column="32"/></name><init pos:line="599" pos:column="32">=<expr><call><name><name pos:line="599" pos:column="33">project<pos:position pos:line="599" pos:column="40"/></name><operator pos:line="599" pos:column="40">.<pos:position pos:line="599" pos:column="41"/></operator><name pos:line="599" pos:column="41">getScmCheckoutRetryCount<pos:position pos:line="599" pos:column="65"/></name></name><argument_list pos:line="599" pos:column="65">()<pos:position pos:line="599" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="599" pos:column="68"/></init> <condition pos:line="599" pos:column="69">;<pos:position pos:line="599" pos:column="70"/></condition> <incr><expr><name pos:line="599" pos:column="71">retryCount<pos:position pos:line="599" pos:column="81"/></name><operator pos:line="599" pos:column="81">--<pos:position pos:line="599" pos:column="83"/></operator></expr></incr>)<pos:position pos:line="599" pos:column="84"/></control> <block pos:line="599" pos:column="85">{
                <expr_stmt><expr><name><name pos:line="600" pos:column="17">build<pos:position pos:line="600" pos:column="22"/></name><operator pos:line="600" pos:column="22">.<pos:position pos:line="600" pos:column="23"/></operator><name pos:line="600" pos:column="23">scm<pos:position pos:line="600" pos:column="26"/></name></name> <operator pos:line="600" pos:column="27">=<pos:position pos:line="600" pos:column="28"/></operator> <name><name pos:line="600" pos:column="29">NullChangeLogParser<pos:position pos:line="600" pos:column="48"/></name><operator pos:line="600" pos:column="48">.<pos:position pos:line="600" pos:column="49"/></operator><name pos:line="600" pos:column="49">INSTANCE<pos:position pos:line="600" pos:column="57"/></name></name></expr>;<pos:position pos:line="600" pos:column="58"/></expr_stmt>

                <try pos:line="602" pos:column="17">try <block pos:line="602" pos:column="21">{
                    <decl_stmt><decl><type><name pos:line="603" pos:column="21">File<pos:position pos:line="603" pos:column="25"/></name></type> <name pos:line="603" pos:column="26">changeLogFile<pos:position pos:line="603" pos:column="39"/></name> <init pos:line="603" pos:column="40">= <expr><operator pos:line="603" pos:column="42">new<pos:position pos:line="603" pos:column="45"/></operator> <call><name pos:line="603" pos:column="46">File<pos:position pos:line="603" pos:column="50"/></name><argument_list pos:line="603" pos:column="50">(<argument><expr><call><name><name pos:line="603" pos:column="51">build<pos:position pos:line="603" pos:column="56"/></name><operator pos:line="603" pos:column="56">.<pos:position pos:line="603" pos:column="57"/></operator><name pos:line="603" pos:column="57">getRootDir<pos:position pos:line="603" pos:column="67"/></name></name><argument_list pos:line="603" pos:column="67">()<pos:position pos:line="603" pos:column="69"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="603" pos:column="71">"changelog.xml"<pos:position pos:line="603" pos:column="86"/></literal></expr></argument>)<pos:position pos:line="603" pos:column="87"/></argument_list></call></expr></init></decl>;<pos:position pos:line="603" pos:column="88"/></decl_stmt>
                    <if pos:line="604" pos:column="21">if <condition pos:line="604" pos:column="24">(<expr><call><name><name pos:line="604" pos:column="25">project<pos:position pos:line="604" pos:column="32"/></name><operator pos:line="604" pos:column="32">.<pos:position pos:line="604" pos:column="33"/></operator><name pos:line="604" pos:column="33">checkout<pos:position pos:line="604" pos:column="41"/></name></name><argument_list pos:line="604" pos:column="41">(<argument><expr><name pos:line="604" pos:column="42">build<pos:position pos:line="604" pos:column="47"/></name></expr></argument>, <argument><expr><name pos:line="604" pos:column="49">launcher<pos:position pos:line="604" pos:column="57"/></name></expr></argument>,<argument><expr><name pos:line="604" pos:column="58">listener<pos:position pos:line="604" pos:column="66"/></name></expr></argument>, <argument><expr><name pos:line="604" pos:column="68">changeLogFile<pos:position pos:line="604" pos:column="81"/></name></expr></argument>)<pos:position pos:line="604" pos:column="82"/></argument_list></call></expr>)<pos:position pos:line="604" pos:column="83"/></condition><then pos:line="604" pos:column="83"> <block pos:line="604" pos:column="84">{
                        <comment type="line" pos:line="605" pos:column="25">// check out succeeded</comment>
                        <decl_stmt><decl><type><name pos:line="606" pos:column="25">SCM<pos:position pos:line="606" pos:column="28"/></name></type> <name pos:line="606" pos:column="29">scm<pos:position pos:line="606" pos:column="32"/></name> <init pos:line="606" pos:column="33">= <expr><call><name><name pos:line="606" pos:column="35">project<pos:position pos:line="606" pos:column="42"/></name><operator pos:line="606" pos:column="42">.<pos:position pos:line="606" pos:column="43"/></operator><name pos:line="606" pos:column="43">getScm<pos:position pos:line="606" pos:column="49"/></name></name><argument_list pos:line="606" pos:column="49">()<pos:position pos:line="606" pos:column="51"/></argument_list></call></expr></init></decl>;<pos:position pos:line="606" pos:column="52"/></decl_stmt>
                        <for pos:line="607" pos:column="25">for <control pos:line="607" pos:column="29">(<init><decl><type><name pos:line="607" pos:column="30">SCMListener<pos:position pos:line="607" pos:column="41"/></name></type> <name pos:line="607" pos:column="42">l<pos:position pos:line="607" pos:column="43"/></name> <range pos:line="607" pos:column="44">: <expr><call><name><name pos:line="607" pos:column="46">SCMListener<pos:position pos:line="607" pos:column="57"/></name><operator pos:line="607" pos:column="57">.<pos:position pos:line="607" pos:column="58"/></operator><name pos:line="607" pos:column="58">all<pos:position pos:line="607" pos:column="61"/></name></name><argument_list pos:line="607" pos:column="61">()<pos:position pos:line="607" pos:column="63"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="607" pos:column="64"/></control> <block pos:line="607" pos:column="65">{
                            <try pos:line="608" pos:column="29">try <block pos:line="608" pos:column="33">{
                                <expr_stmt><expr><call><name><name pos:line="609" pos:column="33">l<pos:position pos:line="609" pos:column="34"/></name><operator pos:line="609" pos:column="34">.<pos:position pos:line="609" pos:column="35"/></operator><name pos:line="609" pos:column="35">onCheckout<pos:position pos:line="609" pos:column="45"/></name></name><argument_list pos:line="609" pos:column="45">(<argument><expr><name pos:line="609" pos:column="46">build<pos:position pos:line="609" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="609" pos:column="53">scm<pos:position pos:line="609" pos:column="56"/></name></expr></argument>, <argument><expr><call><name><name pos:line="609" pos:column="58">build<pos:position pos:line="609" pos:column="63"/></name><operator pos:line="609" pos:column="63">.<pos:position pos:line="609" pos:column="64"/></operator><name pos:line="609" pos:column="64">getWorkspace<pos:position pos:line="609" pos:column="76"/></name></name><argument_list pos:line="609" pos:column="76">()<pos:position pos:line="609" pos:column="78"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="609" pos:column="80">listener<pos:position pos:line="609" pos:column="88"/></name></expr></argument>, <argument><expr><name pos:line="609" pos:column="90">changeLogFile<pos:position pos:line="609" pos:column="103"/></name></expr></argument>, <argument><expr><call><name><name pos:line="609" pos:column="105">build<pos:position pos:line="609" pos:column="110"/></name><operator pos:line="609" pos:column="110">.<pos:position pos:line="609" pos:column="111"/></operator><name pos:line="609" pos:column="111">getAction<pos:position pos:line="609" pos:column="120"/></name></name><argument_list pos:line="609" pos:column="120">(<argument><expr><name><name pos:line="609" pos:column="121">SCMRevisionState<pos:position pos:line="609" pos:column="137"/></name><operator pos:line="609" pos:column="137">.<pos:position pos:line="609" pos:column="138"/></operator><name pos:line="609" pos:column="138">class<pos:position pos:line="609" pos:column="143"/></name></name></expr></argument>)<pos:position pos:line="609" pos:column="144"/></argument_list></call></expr></argument>)<pos:position pos:line="609" pos:column="145"/></argument_list></call></expr>;<pos:position pos:line="609" pos:column="146"/></expr_stmt>
                            }<pos:position pos:line="610" pos:column="30"/></block> <catch pos:line="610" pos:column="31">catch <parameter_list pos:line="610" pos:column="37">(<parameter><decl><type><name pos:line="610" pos:column="38">Exception<pos:position pos:line="610" pos:column="47"/></name></type> <name pos:line="610" pos:column="48">e<pos:position pos:line="610" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="610" pos:column="50"/></parameter_list> <block pos:line="610" pos:column="51">{
                                <throw pos:line="611" pos:column="33">throw <expr><operator pos:line="611" pos:column="39">new<pos:position pos:line="611" pos:column="42"/></operator> <call><name pos:line="611" pos:column="43">IOException<pos:position pos:line="611" pos:column="54"/></name><argument_list pos:line="611" pos:column="54">(<argument><expr><name pos:line="611" pos:column="55">e<pos:position pos:line="611" pos:column="56"/></name></expr></argument>)<pos:position pos:line="611" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="611" pos:column="58"/></throw>
                            }<pos:position pos:line="612" pos:column="30"/></block></catch></try>
                        }<pos:position pos:line="613" pos:column="26"/></block></for>

                        <expr_stmt><expr><name><name pos:line="615" pos:column="25">build<pos:position pos:line="615" pos:column="30"/></name><operator pos:line="615" pos:column="30">.<pos:position pos:line="615" pos:column="31"/></operator><name pos:line="615" pos:column="31">scm<pos:position pos:line="615" pos:column="34"/></name></name> <operator pos:line="615" pos:column="35">=<pos:position pos:line="615" pos:column="36"/></operator> <call><name><name pos:line="615" pos:column="37">scm<pos:position pos:line="615" pos:column="40"/></name><operator pos:line="615" pos:column="40">.<pos:position pos:line="615" pos:column="41"/></operator><name pos:line="615" pos:column="41">createChangeLogParser<pos:position pos:line="615" pos:column="62"/></name></name><argument_list pos:line="615" pos:column="62">()<pos:position pos:line="615" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="615" pos:column="65"/></expr_stmt>
                        <expr_stmt><expr><name><name pos:line="616" pos:column="25">build<pos:position pos:line="616" pos:column="30"/></name><operator pos:line="616" pos:column="30">.<pos:position pos:line="616" pos:column="31"/></operator><name pos:line="616" pos:column="31">changeSet<pos:position pos:line="616" pos:column="40"/></name></name> <operator pos:line="616" pos:column="41">=<pos:position pos:line="616" pos:column="42"/></operator> <ternary><condition><expr><operator pos:line="616" pos:column="43">new<pos:position pos:line="616" pos:column="46"/></operator> <call><name><name pos:line="616" pos:column="47">WeakReference<pos:position pos:line="616" pos:column="60"/></name><argument_list type="generic" pos:line="616" pos:column="60">&lt;<argument><name><name pos:line="616" pos:column="61">ChangeLogSet<pos:position pos:line="616" pos:column="73"/></name><argument_list type="generic" pos:line="616" pos:column="73">&lt;<argument><name pos:line="616" pos:column="74">?<pos:position pos:line="616" pos:column="75"/></name> <extends pos:line="616" pos:column="76">extends <name pos:line="616" pos:column="84">Entry<pos:position pos:line="616" pos:column="89"/></name></extends></argument>&gt;<pos:position pos:line="616" pos:column="93"/></argument_list></name></argument>&gt;<pos:position pos:line="616" pos:column="94"/></argument_list></name><argument_list pos:line="616" pos:column="91">(<argument><expr><call><name><name pos:line="616" pos:column="92">build<pos:position pos:line="616" pos:column="97"/></name><operator pos:line="616" pos:column="97">.<pos:position pos:line="616" pos:column="98"/></operator><name pos:line="616" pos:column="98">calcChangeSet<pos:position pos:line="616" pos:column="111"/></name></name><argument_list pos:line="616" pos:column="111">()<pos:position pos:line="616" pos:column="113"/></argument_list></call></expr></argument>)<pos:position pos:line="616" pos:column="114"/></argument_list></call></expr></condition></ternary></expr>;<pos:position pos:line="616" pos:column="115"/></expr_stmt>

                        <for pos:line="618" pos:column="25">for <control pos:line="618" pos:column="29">(<init><decl><type><name pos:line="618" pos:column="30">SCMListener<pos:position pos:line="618" pos:column="41"/></name></type> <name pos:line="618" pos:column="42">l<pos:position pos:line="618" pos:column="43"/></name> <range pos:line="618" pos:column="44">: <expr><call><name><name pos:line="618" pos:column="46">SCMListener<pos:position pos:line="618" pos:column="57"/></name><operator pos:line="618" pos:column="57">.<pos:position pos:line="618" pos:column="58"/></operator><name pos:line="618" pos:column="58">all<pos:position pos:line="618" pos:column="61"/></name></name><argument_list pos:line="618" pos:column="61">()<pos:position pos:line="618" pos:column="63"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="618" pos:column="64"/></control>
                            <block type="pseudo"><try pos:line="619" pos:column="29">try <block pos:line="619" pos:column="33">{
                                <expr_stmt><expr><call><name><name pos:line="620" pos:column="33">l<pos:position pos:line="620" pos:column="34"/></name><operator pos:line="620" pos:column="34">.<pos:position pos:line="620" pos:column="35"/></operator><name pos:line="620" pos:column="35">onChangeLogParsed<pos:position pos:line="620" pos:column="52"/></name></name><argument_list pos:line="620" pos:column="52">(<argument><expr><name pos:line="620" pos:column="53">build<pos:position pos:line="620" pos:column="58"/></name></expr></argument>,<argument><expr><name pos:line="620" pos:column="59">listener<pos:position pos:line="620" pos:column="67"/></name></expr></argument>,<argument><expr><call><name><name pos:line="620" pos:column="68">build<pos:position pos:line="620" pos:column="73"/></name><operator pos:line="620" pos:column="73">.<pos:position pos:line="620" pos:column="74"/></operator><name pos:line="620" pos:column="74">getChangeSet<pos:position pos:line="620" pos:column="86"/></name></name><argument_list pos:line="620" pos:column="86">()<pos:position pos:line="620" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="620" pos:column="89"/></argument_list></call></expr>;<pos:position pos:line="620" pos:column="90"/></expr_stmt>
                            }<pos:position pos:line="621" pos:column="30"/></block> <catch pos:line="621" pos:column="31">catch <parameter_list pos:line="621" pos:column="37">(<parameter><decl><type><name pos:line="621" pos:column="38">Exception<pos:position pos:line="621" pos:column="47"/></name></type> <name pos:line="621" pos:column="48">e<pos:position pos:line="621" pos:column="49"/></name></decl></parameter>)<pos:position pos:line="621" pos:column="50"/></parameter_list> <block pos:line="621" pos:column="51">{
                                <throw pos:line="622" pos:column="33">throw <expr><operator pos:line="622" pos:column="39">new<pos:position pos:line="622" pos:column="42"/></operator> <call><name pos:line="622" pos:column="43">IOException<pos:position pos:line="622" pos:column="54"/></name><argument_list pos:line="622" pos:column="54">(<argument><expr><literal type="string" pos:line="622" pos:column="55">"Failed to parse changelog"<pos:position pos:line="622" pos:column="82"/></literal></expr></argument>,<argument><expr><name pos:line="622" pos:column="83">e<pos:position pos:line="622" pos:column="84"/></name></expr></argument>)<pos:position pos:line="622" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="622" pos:column="86"/></throw>
                            }<pos:position pos:line="623" pos:column="30"/></block></catch></try></block></for>

                        <comment type="line" pos:line="625" pos:column="25">// Get a chance to do something after checkout and changelog is done</comment>
                        <expr_stmt><expr><call><name><name pos:line="626" pos:column="25">scm<pos:position pos:line="626" pos:column="28"/></name><operator pos:line="626" pos:column="28">.<pos:position pos:line="626" pos:column="29"/></operator><name pos:line="626" pos:column="29">postCheckout<pos:position pos:line="626" pos:column="41"/></name></name><argument_list pos:line="626" pos:column="41">( <argument><expr><name pos:line="626" pos:column="43">build<pos:position pos:line="626" pos:column="48"/></name></expr></argument>, <argument><expr><name pos:line="626" pos:column="50">launcher<pos:position pos:line="626" pos:column="58"/></name></expr></argument>, <argument><expr><call><name><name pos:line="626" pos:column="60">build<pos:position pos:line="626" pos:column="65"/></name><operator pos:line="626" pos:column="65">.<pos:position pos:line="626" pos:column="66"/></operator><name pos:line="626" pos:column="66">getWorkspace<pos:position pos:line="626" pos:column="78"/></name></name><argument_list pos:line="626" pos:column="78">()<pos:position pos:line="626" pos:column="80"/></argument_list></call></expr></argument>, <argument><expr><name pos:line="626" pos:column="82">listener<pos:position pos:line="626" pos:column="90"/></name></expr></argument> )<pos:position pos:line="626" pos:column="92"/></argument_list></call></expr>;<pos:position pos:line="626" pos:column="93"/></expr_stmt>

                        <return pos:line="628" pos:column="25">return;<pos:position pos:line="628" pos:column="32"/></return>
                    }<pos:position pos:line="629" pos:column="22"/></block></then></if>
                }<pos:position pos:line="630" pos:column="18"/></block> <catch pos:line="630" pos:column="19">catch <parameter_list pos:line="630" pos:column="25">(<parameter><decl><type><name pos:line="630" pos:column="26">AbortException<pos:position pos:line="630" pos:column="40"/></name></type> <name pos:line="630" pos:column="41">e<pos:position pos:line="630" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="630" pos:column="43"/></parameter_list> <block pos:line="630" pos:column="44">{
                    <expr_stmt><expr><call><name><name pos:line="631" pos:column="21">listener<pos:position pos:line="631" pos:column="29"/></name><operator pos:line="631" pos:column="29">.<pos:position pos:line="631" pos:column="30"/></operator><name pos:line="631" pos:column="30">error<pos:position pos:line="631" pos:column="35"/></name></name><argument_list pos:line="631" pos:column="35">(<argument><expr><call><name><name pos:line="631" pos:column="36">e<pos:position pos:line="631" pos:column="37"/></name><operator pos:line="631" pos:column="37">.<pos:position pos:line="631" pos:column="38"/></operator><name pos:line="631" pos:column="38">getMessage<pos:position pos:line="631" pos:column="48"/></name></name><argument_list pos:line="631" pos:column="48">()<pos:position pos:line="631" pos:column="50"/></argument_list></call></expr></argument>)<pos:position pos:line="631" pos:column="51"/></argument_list></call></expr>;<pos:position pos:line="631" pos:column="52"/></expr_stmt>
                }<pos:position pos:line="632" pos:column="18"/></block></catch> <catch pos:line="632" pos:column="19">catch <parameter_list pos:line="632" pos:column="25">(<parameter><decl><type><name pos:line="632" pos:column="26">InterruptedIOException<pos:position pos:line="632" pos:column="48"/></name></type> <name pos:line="632" pos:column="49">e<pos:position pos:line="632" pos:column="50"/></name></decl></parameter>)<pos:position pos:line="632" pos:column="51"/></parameter_list> <block pos:line="632" pos:column="52">{
                    <throw pos:line="633" pos:column="21">throw <expr><operator pos:line="633" pos:column="27">(<pos:position pos:line="633" pos:column="28"/></operator><name pos:line="633" pos:column="28">InterruptedException<pos:position pos:line="633" pos:column="48"/></name><operator pos:line="633" pos:column="48">)<pos:position pos:line="633" pos:column="49"/></operator><operator pos:line="633" pos:column="49">new<pos:position pos:line="633" pos:column="52"/></operator> <call><name pos:line="633" pos:column="53">InterruptedException<pos:position pos:line="633" pos:column="73"/></name><argument_list pos:line="633" pos:column="73">()<pos:position pos:line="633" pos:column="75"/></argument_list></call><operator pos:line="633" pos:column="75">.<pos:position pos:line="633" pos:column="76"/></operator><call><name pos:line="633" pos:column="76">initCause<pos:position pos:line="633" pos:column="85"/></name><argument_list pos:line="633" pos:column="85">(<argument><expr><name pos:line="633" pos:column="86">e<pos:position pos:line="633" pos:column="87"/></name></expr></argument>)<pos:position pos:line="633" pos:column="88"/></argument_list></call></expr>;<pos:position pos:line="633" pos:column="89"/></throw>
                }<pos:position pos:line="634" pos:column="18"/></block></catch> <catch pos:line="634" pos:column="19">catch <parameter_list pos:line="634" pos:column="25">(<parameter><decl><type><name pos:line="634" pos:column="26">IOException<pos:position pos:line="634" pos:column="37"/></name></type> <name pos:line="634" pos:column="38">e<pos:position pos:line="634" pos:column="39"/></name></decl></parameter>)<pos:position pos:line="634" pos:column="40"/></parameter_list> <block pos:line="634" pos:column="41">{
                    <comment type="line" pos:line="635" pos:column="21">// checkout error not yet reported</comment>
                    <expr_stmt><expr><call><name><name pos:line="636" pos:column="21">Functions<pos:position pos:line="636" pos:column="30"/></name><operator pos:line="636" pos:column="30">.<pos:position pos:line="636" pos:column="31"/></operator><name pos:line="636" pos:column="31">printStackTrace<pos:position pos:line="636" pos:column="46"/></name></name><argument_list pos:line="636" pos:column="46">(<argument><expr><name pos:line="636" pos:column="47">e<pos:position pos:line="636" pos:column="48"/></name></expr></argument>, <argument><expr><call><name><name pos:line="636" pos:column="50">listener<pos:position pos:line="636" pos:column="58"/></name><operator pos:line="636" pos:column="58">.<pos:position pos:line="636" pos:column="59"/></operator><name pos:line="636" pos:column="59">getLogger<pos:position pos:line="636" pos:column="68"/></name></name><argument_list pos:line="636" pos:column="68">()<pos:position pos:line="636" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="636" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="636" pos:column="72"/></expr_stmt>
                }<pos:position pos:line="637" pos:column="18"/></block></catch></try>

                <if pos:line="639" pos:column="17">if <condition pos:line="639" pos:column="20">(<expr><name pos:line="639" pos:column="21">retryCount<pos:position pos:line="639" pos:column="31"/></name> <operator pos:line="639" pos:column="32">==<pos:position pos:line="639" pos:column="34"/></operator> <literal type="number" pos:line="639" pos:column="35">0<pos:position pos:line="639" pos:column="36"/></literal></expr>)<pos:position pos:line="639" pos:column="37"/></condition><then pos:line="639" pos:column="37">   <comment type="line" pos:line="639" pos:column="40">// all attempts failed</comment>
                    <block type="pseudo"><throw pos:line="640" pos:column="21">throw <expr><operator pos:line="640" pos:column="27">new<pos:position pos:line="640" pos:column="30"/></operator> <call><name pos:line="640" pos:column="31">RunnerAbortedException<pos:position pos:line="640" pos:column="53"/></name><argument_list pos:line="640" pos:column="53">()<pos:position pos:line="640" pos:column="55"/></argument_list></call></expr>;<pos:position pos:line="640" pos:column="56"/></throw></block></then></if>

                <expr_stmt><expr><call><name><name pos:line="642" pos:column="17">listener<pos:position pos:line="642" pos:column="25"/></name><operator pos:line="642" pos:column="25">.<pos:position pos:line="642" pos:column="26"/></operator><name pos:line="642" pos:column="26">getLogger<pos:position pos:line="642" pos:column="35"/></name></name><argument_list pos:line="642" pos:column="35">()<pos:position pos:line="642" pos:column="37"/></argument_list></call><operator pos:line="642" pos:column="37">.<pos:position pos:line="642" pos:column="38"/></operator><call><name pos:line="642" pos:column="38">println<pos:position pos:line="642" pos:column="45"/></name><argument_list pos:line="642" pos:column="45">(<argument><expr><literal type="string" pos:line="642" pos:column="46">"Retrying after 10 seconds"<pos:position pos:line="642" pos:column="73"/></literal></expr></argument>)<pos:position pos:line="642" pos:column="74"/></argument_list></call></expr>;<pos:position pos:line="642" pos:column="75"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="643" pos:column="17">Thread<pos:position pos:line="643" pos:column="23"/></name><operator pos:line="643" pos:column="23">.<pos:position pos:line="643" pos:column="24"/></operator><name pos:line="643" pos:column="24">sleep<pos:position pos:line="643" pos:column="29"/></name></name><argument_list pos:line="643" pos:column="29">(<argument><expr><literal type="number" pos:line="643" pos:column="30">10000<pos:position pos:line="643" pos:column="35"/></literal></expr></argument>)<pos:position pos:line="643" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="643" pos:column="37"/></expr_stmt>
            }<pos:position pos:line="644" pos:column="14"/></block></for>
        }<pos:position pos:line="645" pos:column="10"/></block></function>

        <comment type="block" format="javadoc" pos:line="647" pos:column="9">/**
         * The portion of a build that is specific to a subclass of {@link AbstractBuild}
         * goes here.
         *
         * @return
         *      null to continue the build normally (that means the doRun method
         *      itself run successfully)
         *      Return a non-null value to abort the build right there with the specified result code.
         */</comment>
        <function_decl><specifier pos:line="656" pos:column="9">protected<pos:position pos:line="656" pos:column="18"/></specifier> <specifier pos:line="656" pos:column="19">abstract<pos:position pos:line="656" pos:column="27"/></specifier> <type><name pos:line="656" pos:column="28">Result<pos:position pos:line="656" pos:column="34"/></name></type> <name pos:line="656" pos:column="35">doRun<pos:position pos:line="656" pos:column="40"/></name><parameter_list pos:line="656" pos:column="40">(<parameter><decl><type><name pos:line="656" pos:column="41">BuildListener<pos:position pos:line="656" pos:column="54"/></name></type> <name pos:line="656" pos:column="55">listener<pos:position pos:line="656" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="656" pos:column="64"/></parameter_list> <throws pos:line="656" pos:column="65">throws <argument><expr><name pos:line="656" pos:column="72">Exception<pos:position pos:line="656" pos:column="81"/></name></expr></argument>, <argument><expr><name pos:line="656" pos:column="83">RunnerAbortedException<pos:position pos:line="656" pos:column="105"/></name></expr></argument></throws>;<pos:position pos:line="656" pos:column="106"/></function_decl>

        <comment type="block" format="javadoc" pos:line="658" pos:column="9">/**
         * @see #post(BuildListener)
         */</comment>
        <function_decl><specifier pos:line="661" pos:column="9">protected<pos:position pos:line="661" pos:column="18"/></specifier> <specifier pos:line="661" pos:column="19">abstract<pos:position pos:line="661" pos:column="27"/></specifier> <type><name pos:line="661" pos:column="28">void<pos:position pos:line="661" pos:column="32"/></name></type> <name pos:line="661" pos:column="33">post2<pos:position pos:line="661" pos:column="38"/></name><parameter_list pos:line="661" pos:column="38">(<parameter><decl><type><name pos:line="661" pos:column="39">BuildListener<pos:position pos:line="661" pos:column="52"/></name></type> <name pos:line="661" pos:column="53">listener<pos:position pos:line="661" pos:column="61"/></name></decl></parameter>)<pos:position pos:line="661" pos:column="62"/></parameter_list> <throws pos:line="661" pos:column="63">throws <argument><expr><name pos:line="661" pos:column="70">Exception<pos:position pos:line="661" pos:column="79"/></name></expr></argument></throws>;<pos:position pos:line="661" pos:column="80"/></function_decl>

        <function><specifier pos:line="663" pos:column="9">public<pos:position pos:line="663" pos:column="15"/></specifier> <specifier pos:line="663" pos:column="16">final<pos:position pos:line="663" pos:column="21"/></specifier> <type><name pos:line="663" pos:column="22">void<pos:position pos:line="663" pos:column="26"/></name></type> <name pos:line="663" pos:column="27">post<pos:position pos:line="663" pos:column="31"/></name><parameter_list pos:line="663" pos:column="31">(<parameter><decl><type><name pos:line="663" pos:column="32">BuildListener<pos:position pos:line="663" pos:column="45"/></name></type> <name pos:line="663" pos:column="46">listener<pos:position pos:line="663" pos:column="54"/></name></decl></parameter>)<pos:position pos:line="663" pos:column="55"/></parameter_list> <throws pos:line="663" pos:column="56">throws <argument><expr><name pos:line="663" pos:column="63">Exception<pos:position pos:line="663" pos:column="72"/></name></expr></argument></throws> <block pos:line="663" pos:column="73">{
            <try pos:line="664" pos:column="13">try <block pos:line="664" pos:column="17">{
                <expr_stmt><expr><call><name pos:line="665" pos:column="17">post2<pos:position pos:line="665" pos:column="22"/></name><argument_list pos:line="665" pos:column="22">(<argument><expr><name pos:line="665" pos:column="23">listener<pos:position pos:line="665" pos:column="31"/></name></expr></argument>)<pos:position pos:line="665" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="665" pos:column="33"/></expr_stmt>
            }<pos:position pos:line="666" pos:column="14"/></block> <finally pos:line="666" pos:column="15">finally <block pos:line="666" pos:column="23">{
                <comment type="line" pos:line="667" pos:column="17">// update the culprit list</comment>
                <decl_stmt><decl><type><name><name pos:line="668" pos:column="17">HashSet<pos:position pos:line="668" pos:column="24"/></name><argument_list type="generic" pos:line="668" pos:column="24">&lt;<argument><name pos:line="668" pos:column="25">String<pos:position pos:line="668" pos:column="31"/></name></argument>&gt;<pos:position pos:line="668" pos:column="35"/></argument_list></name></type> <name pos:line="668" pos:column="33">r<pos:position pos:line="668" pos:column="34"/></name> <init pos:line="668" pos:column="35">= <expr><operator pos:line="668" pos:column="37">new<pos:position pos:line="668" pos:column="40"/></operator> <call><name><name pos:line="668" pos:column="41">HashSet<pos:position pos:line="668" pos:column="48"/></name><argument_list type="generic" pos:line="668" pos:column="48">&lt;<argument><name pos:line="668" pos:column="49">String<pos:position pos:line="668" pos:column="55"/></name></argument>&gt;<pos:position pos:line="668" pos:column="59"/></argument_list></name><argument_list pos:line="668" pos:column="56">()<pos:position pos:line="668" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="668" pos:column="59"/></decl_stmt>
                <for pos:line="669" pos:column="17">for <control pos:line="669" pos:column="21">(<init><decl><type><name pos:line="669" pos:column="22">User<pos:position pos:line="669" pos:column="26"/></name></type> <name pos:line="669" pos:column="27">u<pos:position pos:line="669" pos:column="28"/></name> <range pos:line="669" pos:column="29">: <expr><call><name pos:line="669" pos:column="31">getCulprits<pos:position pos:line="669" pos:column="42"/></name><argument_list pos:line="669" pos:column="42">()<pos:position pos:line="669" pos:column="44"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="669" pos:column="45"/></control>
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="670" pos:column="21">r<pos:position pos:line="670" pos:column="22"/></name><operator pos:line="670" pos:column="22">.<pos:position pos:line="670" pos:column="23"/></operator><name pos:line="670" pos:column="23">add<pos:position pos:line="670" pos:column="26"/></name></name><argument_list pos:line="670" pos:column="26">(<argument><expr><call><name><name pos:line="670" pos:column="27">u<pos:position pos:line="670" pos:column="28"/></name><operator pos:line="670" pos:column="28">.<pos:position pos:line="670" pos:column="29"/></operator><name pos:line="670" pos:column="29">getId<pos:position pos:line="670" pos:column="34"/></name></name><argument_list pos:line="670" pos:column="34">()<pos:position pos:line="670" pos:column="36"/></argument_list></call></expr></argument>)<pos:position pos:line="670" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="670" pos:column="38"/></expr_stmt></block></for>
                <expr_stmt><expr><name pos:line="671" pos:column="17">culprits<pos:position pos:line="671" pos:column="25"/></name> <operator pos:line="671" pos:column="26">=<pos:position pos:line="671" pos:column="27"/></operator> <call><name><name pos:line="671" pos:column="28">ImmutableSortedSet<pos:position pos:line="671" pos:column="46"/></name><operator pos:line="671" pos:column="46">.<pos:position pos:line="671" pos:column="47"/></operator><name pos:line="671" pos:column="47">copyOf<pos:position pos:line="671" pos:column="53"/></name></name><argument_list pos:line="671" pos:column="53">(<argument><expr><name pos:line="671" pos:column="54">r<pos:position pos:line="671" pos:column="55"/></name></expr></argument>)<pos:position pos:line="671" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="671" pos:column="57"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="672" pos:column="17">CheckPoint<pos:position pos:line="672" pos:column="27"/></name><operator pos:line="672" pos:column="27">.<pos:position pos:line="672" pos:column="28"/></operator><name pos:line="672" pos:column="28">CULPRITS_DETERMINED<pos:position pos:line="672" pos:column="47"/></name><operator pos:line="672" pos:column="47">.<pos:position pos:line="672" pos:column="48"/></operator><name pos:line="672" pos:column="48">report<pos:position pos:line="672" pos:column="54"/></name></name><argument_list pos:line="672" pos:column="54">()<pos:position pos:line="672" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="672" pos:column="57"/></expr_stmt>
            }<pos:position pos:line="673" pos:column="14"/></block></finally></try>
        }<pos:position pos:line="674" pos:column="10"/></block></function>

        <function><specifier pos:line="676" pos:column="9">public<pos:position pos:line="676" pos:column="15"/></specifier> <type><name pos:line="676" pos:column="16">void<pos:position pos:line="676" pos:column="20"/></name></type> <name pos:line="676" pos:column="21">cleanUp<pos:position pos:line="676" pos:column="28"/></name><parameter_list pos:line="676" pos:column="28">(<parameter><decl><type><name pos:line="676" pos:column="29">BuildListener<pos:position pos:line="676" pos:column="42"/></name></type> <name pos:line="676" pos:column="43">listener<pos:position pos:line="676" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="676" pos:column="52"/></parameter_list> <throws pos:line="676" pos:column="53">throws <argument><expr><name pos:line="676" pos:column="60">Exception<pos:position pos:line="676" pos:column="69"/></name></expr></argument></throws> <block pos:line="676" pos:column="70">{
            <if pos:line="677" pos:column="13">if <condition pos:line="677" pos:column="16">(<expr><name pos:line="677" pos:column="17">lease<pos:position pos:line="677" pos:column="22"/></name><operator pos:line="677" pos:column="22">!=<pos:position pos:line="677" pos:column="24"/></operator><literal type="null" pos:line="677" pos:column="24">null<pos:position pos:line="677" pos:column="28"/></literal></expr>)<pos:position pos:line="677" pos:column="29"/></condition><then pos:line="677" pos:column="29"> <block pos:line="677" pos:column="30">{
                <expr_stmt><expr><call><name><name pos:line="678" pos:column="17">lease<pos:position pos:line="678" pos:column="22"/></name><operator pos:line="678" pos:column="22">.<pos:position pos:line="678" pos:column="23"/></operator><name pos:line="678" pos:column="23">release<pos:position pos:line="678" pos:column="30"/></name></name><argument_list pos:line="678" pos:column="30">()<pos:position pos:line="678" pos:column="32"/></argument_list></call></expr>;<pos:position pos:line="678" pos:column="33"/></expr_stmt>
                <expr_stmt><expr><name pos:line="679" pos:column="17">lease<pos:position pos:line="679" pos:column="22"/></name> <operator pos:line="679" pos:column="23">=<pos:position pos:line="679" pos:column="24"/></operator> <literal type="null" pos:line="679" pos:column="25">null<pos:position pos:line="679" pos:column="29"/></literal></expr>;<pos:position pos:line="679" pos:column="30"/></expr_stmt>
            }<pos:position pos:line="680" pos:column="14"/></block></then></if>
            <expr_stmt><expr><call><name><name pos:line="681" pos:column="13">BuildTrigger<pos:position pos:line="681" pos:column="25"/></name><operator pos:line="681" pos:column="25">.<pos:position pos:line="681" pos:column="26"/></operator><name pos:line="681" pos:column="26">execute<pos:position pos:line="681" pos:column="33"/></name></name><argument_list pos:line="681" pos:column="33">(<argument><expr><name><name pos:line="681" pos:column="34">AbstractBuild<pos:position pos:line="681" pos:column="47"/></name><operator pos:line="681" pos:column="47">.<pos:position pos:line="681" pos:column="48"/></operator><name pos:line="681" pos:column="48">this<pos:position pos:line="681" pos:column="52"/></name></name></expr></argument>, <argument><expr><name pos:line="681" pos:column="54">listener<pos:position pos:line="681" pos:column="62"/></name></expr></argument>)<pos:position pos:line="681" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="681" pos:column="64"/></expr_stmt>
            <expr_stmt><expr><name pos:line="682" pos:column="13">buildEnvironments<pos:position pos:line="682" pos:column="30"/></name> <operator pos:line="682" pos:column="31">=<pos:position pos:line="682" pos:column="32"/></operator> <literal type="null" pos:line="682" pos:column="33">null<pos:position pos:line="682" pos:column="37"/></literal></expr>;<pos:position pos:line="682" pos:column="38"/></expr_stmt>
        }<pos:position pos:line="683" pos:column="10"/></block></function>

        <comment type="block" format="javadoc" pos:line="685" pos:column="9">/**
         * @deprecated as of 1.356
         *      Use {@link #performAllBuildSteps(BuildListener, Map, boolean)}
         */</comment>
       <function><annotation pos:line="689" pos:column="8">@<name pos:line="689" pos:column="9">Deprecated<pos:position pos:line="689" pos:column="19"/></name></annotation>
        <specifier pos:line="690" pos:column="9">protected<pos:position pos:line="690" pos:column="18"/></specifier> <specifier pos:line="690" pos:column="19">final<pos:position pos:line="690" pos:column="24"/></specifier> <type><name pos:line="690" pos:column="25">void<pos:position pos:line="690" pos:column="29"/></name></type> <name pos:line="690" pos:column="30">performAllBuildStep<pos:position pos:line="690" pos:column="49"/></name><parameter_list pos:line="690" pos:column="49">(<parameter><decl><type><name pos:line="690" pos:column="50">BuildListener<pos:position pos:line="690" pos:column="63"/></name></type> <name pos:line="690" pos:column="64">listener<pos:position pos:line="690" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="690" pos:column="74">Map<pos:position pos:line="690" pos:column="77"/></name><argument_list type="generic" pos:line="690" pos:column="77">&lt;<argument><name pos:line="690" pos:column="78">?<pos:position pos:line="690" pos:column="79"/></name></argument>,<argument><name pos:line="690" pos:column="80">?<pos:position pos:line="690" pos:column="81"/></name> <extends pos:line="690" pos:column="82">extends <name pos:line="690" pos:column="90">BuildStep<pos:position pos:line="690" pos:column="99"/></name></extends></argument>&gt;<pos:position pos:line="690" pos:column="103"/></argument_list></name></type> <name pos:line="690" pos:column="101">buildSteps<pos:position pos:line="690" pos:column="111"/></name></decl></parameter>, <parameter><decl><type><name pos:line="690" pos:column="113">boolean<pos:position pos:line="690" pos:column="120"/></name></type> <name pos:line="690" pos:column="121">phase<pos:position pos:line="690" pos:column="126"/></name></decl></parameter>)<pos:position pos:line="690" pos:column="127"/></parameter_list> <throws pos:line="690" pos:column="128">throws <argument><expr><name pos:line="690" pos:column="135">InterruptedException<pos:position pos:line="690" pos:column="155"/></name></expr></argument>, <argument><expr><name pos:line="690" pos:column="157">IOException<pos:position pos:line="690" pos:column="168"/></name></expr></argument></throws> <block pos:line="690" pos:column="169">{
            <expr_stmt><expr><call><name pos:line="691" pos:column="13">performAllBuildSteps<pos:position pos:line="691" pos:column="33"/></name><argument_list pos:line="691" pos:column="33">(<argument><expr><name pos:line="691" pos:column="34">listener<pos:position pos:line="691" pos:column="42"/></name></expr></argument>,<argument><expr><call><name><name pos:line="691" pos:column="43">buildSteps<pos:position pos:line="691" pos:column="53"/></name><operator pos:line="691" pos:column="53">.<pos:position pos:line="691" pos:column="54"/></operator><name pos:line="691" pos:column="54">values<pos:position pos:line="691" pos:column="60"/></name></name><argument_list pos:line="691" pos:column="60">()<pos:position pos:line="691" pos:column="62"/></argument_list></call></expr></argument>,<argument><expr><name pos:line="691" pos:column="63">phase<pos:position pos:line="691" pos:column="68"/></name></expr></argument>)<pos:position pos:line="691" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="691" pos:column="70"/></expr_stmt>
        }<pos:position pos:line="692" pos:column="10"/></block></function>

        <function><specifier pos:line="694" pos:column="9">protected<pos:position pos:line="694" pos:column="18"/></specifier> <specifier pos:line="694" pos:column="19">final<pos:position pos:line="694" pos:column="24"/></specifier> <type><name pos:line="694" pos:column="25">boolean<pos:position pos:line="694" pos:column="32"/></name></type> <name pos:line="694" pos:column="33">performAllBuildSteps<pos:position pos:line="694" pos:column="53"/></name><parameter_list pos:line="694" pos:column="53">(<parameter><decl><type><name pos:line="694" pos:column="54">BuildListener<pos:position pos:line="694" pos:column="67"/></name></type> <name pos:line="694" pos:column="68">listener<pos:position pos:line="694" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="694" pos:column="78">Map<pos:position pos:line="694" pos:column="81"/></name><argument_list type="generic" pos:line="694" pos:column="81">&lt;<argument><name pos:line="694" pos:column="82">?<pos:position pos:line="694" pos:column="83"/></name></argument>,<argument><name pos:line="694" pos:column="84">?<pos:position pos:line="694" pos:column="85"/></name> <extends pos:line="694" pos:column="86">extends <name pos:line="694" pos:column="94">BuildStep<pos:position pos:line="694" pos:column="103"/></name></extends></argument>&gt;<pos:position pos:line="694" pos:column="107"/></argument_list></name></type> <name pos:line="694" pos:column="105">buildSteps<pos:position pos:line="694" pos:column="115"/></name></decl></parameter>, <parameter><decl><type><name pos:line="694" pos:column="117">boolean<pos:position pos:line="694" pos:column="124"/></name></type> <name pos:line="694" pos:column="125">phase<pos:position pos:line="694" pos:column="130"/></name></decl></parameter>)<pos:position pos:line="694" pos:column="131"/></parameter_list> <throws pos:line="694" pos:column="132">throws <argument><expr><name pos:line="694" pos:column="139">InterruptedException<pos:position pos:line="694" pos:column="159"/></name></expr></argument>, <argument><expr><name pos:line="694" pos:column="161">IOException<pos:position pos:line="694" pos:column="172"/></name></expr></argument></throws> <block pos:line="694" pos:column="173">{
            <return pos:line="695" pos:column="13">return <expr><call><name pos:line="695" pos:column="20">performAllBuildSteps<pos:position pos:line="695" pos:column="40"/></name><argument_list pos:line="695" pos:column="40">(<argument><expr><name pos:line="695" pos:column="41">listener<pos:position pos:line="695" pos:column="49"/></name></expr></argument>,<argument><expr><call><name><name pos:line="695" pos:column="50">buildSteps<pos:position pos:line="695" pos:column="60"/></name><operator pos:line="695" pos:column="60">.<pos:position pos:line="695" pos:column="61"/></operator><name pos:line="695" pos:column="61">values<pos:position pos:line="695" pos:column="67"/></name></name><argument_list pos:line="695" pos:column="67">()<pos:position pos:line="695" pos:column="69"/></argument_list></call></expr></argument>,<argument><expr><name pos:line="695" pos:column="70">phase<pos:position pos:line="695" pos:column="75"/></name></expr></argument>)<pos:position pos:line="695" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="695" pos:column="77"/></return>
        }<pos:position pos:line="696" pos:column="10"/></block></function>

        <comment type="block" format="javadoc" pos:line="698" pos:column="9">/**
         * @deprecated as of 1.356
         *      Use {@link #performAllBuildSteps(BuildListener, Iterable, boolean)}
         */</comment>
        <function><annotation pos:line="702" pos:column="9">@<name pos:line="702" pos:column="10">Deprecated<pos:position pos:line="702" pos:column="20"/></name></annotation>
        <specifier pos:line="703" pos:column="9">protected<pos:position pos:line="703" pos:column="18"/></specifier> <specifier pos:line="703" pos:column="19">final<pos:position pos:line="703" pos:column="24"/></specifier> <type><name pos:line="703" pos:column="25">void<pos:position pos:line="703" pos:column="29"/></name></type> <name pos:line="703" pos:column="30">performAllBuildStep<pos:position pos:line="703" pos:column="49"/></name><parameter_list pos:line="703" pos:column="49">(<parameter><decl><type><name pos:line="703" pos:column="50">BuildListener<pos:position pos:line="703" pos:column="63"/></name></type> <name pos:line="703" pos:column="64">listener<pos:position pos:line="703" pos:column="72"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="703" pos:column="74">Iterable<pos:position pos:line="703" pos:column="82"/></name><argument_list type="generic" pos:line="703" pos:column="82">&lt;<argument><name pos:line="703" pos:column="83">?<pos:position pos:line="703" pos:column="84"/></name> <extends pos:line="703" pos:column="85">extends <name pos:line="703" pos:column="93">BuildStep<pos:position pos:line="703" pos:column="102"/></name></extends></argument>&gt;<pos:position pos:line="703" pos:column="106"/></argument_list></name></type> <name pos:line="703" pos:column="104">buildSteps<pos:position pos:line="703" pos:column="114"/></name></decl></parameter>, <parameter><decl><type><name pos:line="703" pos:column="116">boolean<pos:position pos:line="703" pos:column="123"/></name></type> <name pos:line="703" pos:column="124">phase<pos:position pos:line="703" pos:column="129"/></name></decl></parameter>)<pos:position pos:line="703" pos:column="130"/></parameter_list> <throws pos:line="703" pos:column="131">throws <argument><expr><name pos:line="703" pos:column="138">InterruptedException<pos:position pos:line="703" pos:column="158"/></name></expr></argument>, <argument><expr><name pos:line="703" pos:column="160">IOException<pos:position pos:line="703" pos:column="171"/></name></expr></argument></throws> <block pos:line="703" pos:column="172">{
            <expr_stmt><expr><call><name pos:line="704" pos:column="13">performAllBuildSteps<pos:position pos:line="704" pos:column="33"/></name><argument_list pos:line="704" pos:column="33">(<argument><expr><name pos:line="704" pos:column="34">listener<pos:position pos:line="704" pos:column="42"/></name></expr></argument>,<argument><expr><name pos:line="704" pos:column="43">buildSteps<pos:position pos:line="704" pos:column="53"/></name></expr></argument>,<argument><expr><name pos:line="704" pos:column="54">phase<pos:position pos:line="704" pos:column="59"/></name></expr></argument>)<pos:position pos:line="704" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="704" pos:column="61"/></expr_stmt>
        }<pos:position pos:line="705" pos:column="10"/></block></function>

        <comment type="block" format="javadoc" pos:line="707" pos:column="9">/**
         * Runs all the given build steps, even if one of them fail.
         *
         * @param phase
         *      true for the post build processing, and false for the final "run after finished" execution.
         *
         * @return false if any build step failed
         */</comment>
        <function><specifier pos:line="715" pos:column="9">protected<pos:position pos:line="715" pos:column="18"/></specifier> <specifier pos:line="715" pos:column="19">final<pos:position pos:line="715" pos:column="24"/></specifier> <type><name pos:line="715" pos:column="25">boolean<pos:position pos:line="715" pos:column="32"/></name></type> <name pos:line="715" pos:column="33">performAllBuildSteps<pos:position pos:line="715" pos:column="53"/></name><parameter_list pos:line="715" pos:column="53">(<parameter><decl><type><name pos:line="715" pos:column="54">BuildListener<pos:position pos:line="715" pos:column="67"/></name></type> <name pos:line="715" pos:column="68">listener<pos:position pos:line="715" pos:column="76"/></name></decl></parameter>, <parameter><decl><type><name><name pos:line="715" pos:column="78">Iterable<pos:position pos:line="715" pos:column="86"/></name><argument_list type="generic" pos:line="715" pos:column="86">&lt;<argument><name pos:line="715" pos:column="87">?<pos:position pos:line="715" pos:column="88"/></name> <extends pos:line="715" pos:column="89">extends <name pos:line="715" pos:column="97">BuildStep<pos:position pos:line="715" pos:column="106"/></name></extends></argument>&gt;<pos:position pos:line="715" pos:column="110"/></argument_list></name></type> <name pos:line="715" pos:column="108">buildSteps<pos:position pos:line="715" pos:column="118"/></name></decl></parameter>, <parameter><decl><type><name pos:line="715" pos:column="120">boolean<pos:position pos:line="715" pos:column="127"/></name></type> <name pos:line="715" pos:column="128">phase<pos:position pos:line="715" pos:column="133"/></name></decl></parameter>)<pos:position pos:line="715" pos:column="134"/></parameter_list> <throws pos:line="715" pos:column="135">throws <argument><expr><name pos:line="715" pos:column="142">InterruptedException<pos:position pos:line="715" pos:column="162"/></name></expr></argument>, <argument><expr><name pos:line="715" pos:column="164">IOException<pos:position pos:line="715" pos:column="175"/></name></expr></argument></throws> <block pos:line="715" pos:column="176">{
            <decl_stmt><decl><type><name pos:line="716" pos:column="13">boolean<pos:position pos:line="716" pos:column="20"/></name></type> <name pos:line="716" pos:column="21">r<pos:position pos:line="716" pos:column="22"/></name> <init pos:line="716" pos:column="23">= <expr><literal type="boolean" pos:line="716" pos:column="25">true<pos:position pos:line="716" pos:column="29"/></literal></expr></init></decl>;<pos:position pos:line="716" pos:column="30"/></decl_stmt>
            <for pos:line="717" pos:column="13">for <control pos:line="717" pos:column="17">(<init><decl><type><name pos:line="717" pos:column="18">BuildStep<pos:position pos:line="717" pos:column="27"/></name></type> <name pos:line="717" pos:column="28">bs<pos:position pos:line="717" pos:column="30"/></name> <range pos:line="717" pos:column="31">: <expr><name pos:line="717" pos:column="33">buildSteps<pos:position pos:line="717" pos:column="43"/></name></expr></range></decl></init>)<pos:position pos:line="717" pos:column="44"/></control> <block pos:line="717" pos:column="45">{
                <if pos:line="718" pos:column="17">if <condition pos:line="718" pos:column="20">(<expr><operator pos:line="718" pos:column="21">(<pos:position pos:line="718" pos:column="22"/></operator><name pos:line="718" pos:column="22">bs<pos:position pos:line="718" pos:column="24"/></name> <operator pos:line="718" pos:column="25">instanceof<pos:position pos:line="718" pos:column="35"/></operator> <name pos:line="718" pos:column="36">Publisher<pos:position pos:line="718" pos:column="45"/></name> <operator pos:line="718" pos:column="46">&amp;&amp;<pos:position pos:line="718" pos:column="56"/></operator> <operator pos:line="718" pos:column="49">(<pos:position pos:line="718" pos:column="50"/></operator><operator pos:line="718" pos:column="50">(<pos:position pos:line="718" pos:column="51"/></operator><name pos:line="718" pos:column="51">Publisher<pos:position pos:line="718" pos:column="60"/></name><operator pos:line="718" pos:column="60">)<pos:position pos:line="718" pos:column="61"/></operator><name pos:line="718" pos:column="61">bs<pos:position pos:line="718" pos:column="63"/></name><operator pos:line="718" pos:column="63">)<pos:position pos:line="718" pos:column="64"/></operator><operator pos:line="718" pos:column="64">.<pos:position pos:line="718" pos:column="65"/></operator><call><name pos:line="718" pos:column="65">needsToRunAfterFinalized<pos:position pos:line="718" pos:column="89"/></name><argument_list pos:line="718" pos:column="89">()<pos:position pos:line="718" pos:column="91"/></argument_list></call><operator pos:line="718" pos:column="91">)<pos:position pos:line="718" pos:column="92"/></operator> <operator pos:line="718" pos:column="93">^<pos:position pos:line="718" pos:column="94"/></operator> <name pos:line="718" pos:column="95">phase<pos:position pos:line="718" pos:column="100"/></name></expr>)<pos:position pos:line="718" pos:column="101"/></condition><then pos:line="718" pos:column="101">
                    <block type="pseudo"><try pos:line="719" pos:column="21">try <block pos:line="719" pos:column="25">{
                        <if pos:line="720" pos:column="25">if <condition pos:line="720" pos:column="28">(<expr><operator pos:line="720" pos:column="29">!<pos:position pos:line="720" pos:column="30"/></operator><call><name pos:line="720" pos:column="30">perform<pos:position pos:line="720" pos:column="37"/></name><argument_list pos:line="720" pos:column="37">(<argument><expr><name pos:line="720" pos:column="38">bs<pos:position pos:line="720" pos:column="40"/></name></expr></argument>,<argument><expr><name pos:line="720" pos:column="41">listener<pos:position pos:line="720" pos:column="49"/></name></expr></argument>)<pos:position pos:line="720" pos:column="50"/></argument_list></call></expr>)<pos:position pos:line="720" pos:column="51"/></condition><then pos:line="720" pos:column="51"> <block pos:line="720" pos:column="52">{
                            <expr_stmt><expr><call><name><name pos:line="721" pos:column="29">LOGGER<pos:position pos:line="721" pos:column="35"/></name><operator pos:line="721" pos:column="35">.<pos:position pos:line="721" pos:column="36"/></operator><name pos:line="721" pos:column="36">log<pos:position pos:line="721" pos:column="39"/></name></name><argument_list pos:line="721" pos:column="39">(<argument><expr><name><name pos:line="721" pos:column="40">Level<pos:position pos:line="721" pos:column="45"/></name><operator pos:line="721" pos:column="45">.<pos:position pos:line="721" pos:column="46"/></operator><name pos:line="721" pos:column="46">FINE<pos:position pos:line="721" pos:column="50"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="721" pos:column="52">"{0} : {1} failed"<pos:position pos:line="721" pos:column="70"/></literal></expr></argument>, <argument><expr><operator pos:line="721" pos:column="72">new<pos:position pos:line="721" pos:column="75"/></operator> <name><name pos:line="721" pos:column="76">Object<pos:position pos:line="721" pos:column="82"/></name><index pos:line="721" pos:column="82">[]<pos:position pos:line="721" pos:column="84"/></index></name> <block pos:line="721" pos:column="85">{<expr><name><name pos:line="721" pos:column="86">AbstractBuild<pos:position pos:line="721" pos:column="99"/></name><operator pos:line="721" pos:column="99">.<pos:position pos:line="721" pos:column="100"/></operator><name pos:line="721" pos:column="100">this<pos:position pos:line="721" pos:column="104"/></name></name></expr>, <expr><name pos:line="721" pos:column="106">bs<pos:position pos:line="721" pos:column="108"/></name></expr>}<pos:position pos:line="721" pos:column="109"/></block></expr></argument>)<pos:position pos:line="721" pos:column="110"/></argument_list></call></expr>;<pos:position pos:line="721" pos:column="111"/></expr_stmt>
                            <expr_stmt><expr><name pos:line="722" pos:column="29">r<pos:position pos:line="722" pos:column="30"/></name> <operator pos:line="722" pos:column="31">=<pos:position pos:line="722" pos:column="32"/></operator> <literal type="boolean" pos:line="722" pos:column="33">false<pos:position pos:line="722" pos:column="38"/></literal></expr>;<pos:position pos:line="722" pos:column="39"/></expr_stmt>
                            <if pos:line="723" pos:column="29">if <condition pos:line="723" pos:column="32">(<expr><name pos:line="723" pos:column="33">phase<pos:position pos:line="723" pos:column="38"/></name></expr>)<pos:position pos:line="723" pos:column="39"/></condition><then pos:line="723" pos:column="39"> <block pos:line="723" pos:column="40">{
                                <expr_stmt><expr><call><name pos:line="724" pos:column="33">setResult<pos:position pos:line="724" pos:column="42"/></name><argument_list pos:line="724" pos:column="42">(<argument><expr><name><name pos:line="724" pos:column="43">Result<pos:position pos:line="724" pos:column="49"/></name><operator pos:line="724" pos:column="49">.<pos:position pos:line="724" pos:column="50"/></operator><name pos:line="724" pos:column="50">FAILURE<pos:position pos:line="724" pos:column="57"/></name></name></expr></argument>)<pos:position pos:line="724" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="724" pos:column="59"/></expr_stmt>
                            }<pos:position pos:line="725" pos:column="30"/></block></then></if>
                        }<pos:position pos:line="726" pos:column="26"/></block></then></if>
                    }<pos:position pos:line="727" pos:column="22"/></block> <catch pos:line="727" pos:column="23">catch <parameter_list pos:line="727" pos:column="29">(<parameter><decl><type><name pos:line="727" pos:column="30">Exception<pos:position pos:line="727" pos:column="39"/></name></type> <name pos:line="727" pos:column="40">e<pos:position pos:line="727" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="727" pos:column="42"/></parameter_list> <block pos:line="727" pos:column="43">{
                        <expr_stmt><expr><call><name pos:line="728" pos:column="25">reportError<pos:position pos:line="728" pos:column="36"/></name><argument_list pos:line="728" pos:column="36">(<argument><expr><name pos:line="728" pos:column="37">bs<pos:position pos:line="728" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="728" pos:column="41">e<pos:position pos:line="728" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="728" pos:column="44">listener<pos:position pos:line="728" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="728" pos:column="54">phase<pos:position pos:line="728" pos:column="59"/></name></expr></argument>)<pos:position pos:line="728" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="728" pos:column="61"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="729" pos:column="25">r<pos:position pos:line="729" pos:column="26"/></name> <operator pos:line="729" pos:column="27">=<pos:position pos:line="729" pos:column="28"/></operator> <literal type="boolean" pos:line="729" pos:column="29">false<pos:position pos:line="729" pos:column="34"/></literal></expr>;<pos:position pos:line="729" pos:column="35"/></expr_stmt>
                    }<pos:position pos:line="730" pos:column="22"/></block></catch> <catch pos:line="730" pos:column="23">catch <parameter_list pos:line="730" pos:column="29">(<parameter><decl><type><name pos:line="730" pos:column="30">LinkageError<pos:position pos:line="730" pos:column="42"/></name></type> <name pos:line="730" pos:column="43">e<pos:position pos:line="730" pos:column="44"/></name></decl></parameter>)<pos:position pos:line="730" pos:column="45"/></parameter_list> <block pos:line="730" pos:column="46">{
                        <expr_stmt><expr><call><name pos:line="731" pos:column="25">reportError<pos:position pos:line="731" pos:column="36"/></name><argument_list pos:line="731" pos:column="36">(<argument><expr><name pos:line="731" pos:column="37">bs<pos:position pos:line="731" pos:column="39"/></name></expr></argument>, <argument><expr><name pos:line="731" pos:column="41">e<pos:position pos:line="731" pos:column="42"/></name></expr></argument>, <argument><expr><name pos:line="731" pos:column="44">listener<pos:position pos:line="731" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="731" pos:column="54">phase<pos:position pos:line="731" pos:column="59"/></name></expr></argument>)<pos:position pos:line="731" pos:column="60"/></argument_list></call></expr>;<pos:position pos:line="731" pos:column="61"/></expr_stmt>
                        <expr_stmt><expr><name pos:line="732" pos:column="25">r<pos:position pos:line="732" pos:column="26"/></name> <operator pos:line="732" pos:column="27">=<pos:position pos:line="732" pos:column="28"/></operator> <literal type="boolean" pos:line="732" pos:column="29">false<pos:position pos:line="732" pos:column="34"/></literal></expr>;<pos:position pos:line="732" pos:column="35"/></expr_stmt>
                    }<pos:position pos:line="733" pos:column="22"/></block></catch></try></block></then></if>
            }<pos:position pos:line="734" pos:column="14"/></block></for>
            <return pos:line="735" pos:column="13">return <expr><name pos:line="735" pos:column="20">r<pos:position pos:line="735" pos:column="21"/></name></expr>;<pos:position pos:line="735" pos:column="22"/></return>
        }<pos:position pos:line="736" pos:column="10"/></block></function>

        <function><specifier pos:line="738" pos:column="9">private<pos:position pos:line="738" pos:column="16"/></specifier> <type><name pos:line="738" pos:column="17">void<pos:position pos:line="738" pos:column="21"/></name></type> <name pos:line="738" pos:column="22">reportError<pos:position pos:line="738" pos:column="33"/></name><parameter_list pos:line="738" pos:column="33">(<parameter><decl><type><name pos:line="738" pos:column="34">BuildStep<pos:position pos:line="738" pos:column="43"/></name></type> <name pos:line="738" pos:column="44">bs<pos:position pos:line="738" pos:column="46"/></name></decl></parameter>, <parameter><decl><type><name pos:line="738" pos:column="48">Throwable<pos:position pos:line="738" pos:column="57"/></name></type> <name pos:line="738" pos:column="58">e<pos:position pos:line="738" pos:column="59"/></name></decl></parameter>, <parameter><decl><type><name pos:line="738" pos:column="61">BuildListener<pos:position pos:line="738" pos:column="74"/></name></type> <name pos:line="738" pos:column="75">listener<pos:position pos:line="738" pos:column="83"/></name></decl></parameter>, <parameter><decl><type><name pos:line="738" pos:column="85">boolean<pos:position pos:line="738" pos:column="92"/></name></type> <name pos:line="738" pos:column="93">phase<pos:position pos:line="738" pos:column="98"/></name></decl></parameter>)<pos:position pos:line="738" pos:column="99"/></parameter_list> <block pos:line="738" pos:column="100">{
            <decl_stmt><decl><type><specifier pos:line="739" pos:column="13">final<pos:position pos:line="739" pos:column="18"/></specifier> <name pos:line="739" pos:column="19">String<pos:position pos:line="739" pos:column="25"/></name></type> <name pos:line="739" pos:column="26">buildStep<pos:position pos:line="739" pos:column="35"/></name></decl>;<pos:position pos:line="739" pos:column="36"/></decl_stmt>

            <if pos:line="741" pos:column="13">if <condition pos:line="741" pos:column="16">(<expr><name pos:line="741" pos:column="17">bs<pos:position pos:line="741" pos:column="19"/></name> <operator pos:line="741" pos:column="20">instanceof<pos:position pos:line="741" pos:column="30"/></operator> <name pos:line="741" pos:column="31">Describable<pos:position pos:line="741" pos:column="42"/></name></expr>)<pos:position pos:line="741" pos:column="43"/></condition><then pos:line="741" pos:column="43"> <block pos:line="741" pos:column="44">{
                <expr_stmt><expr><name pos:line="742" pos:column="17">buildStep<pos:position pos:line="742" pos:column="26"/></name> <operator pos:line="742" pos:column="27">=<pos:position pos:line="742" pos:column="28"/></operator> <operator pos:line="742" pos:column="29">(<pos:position pos:line="742" pos:column="30"/></operator><operator pos:line="742" pos:column="30">(<pos:position pos:line="742" pos:column="31"/></operator><name pos:line="742" pos:column="31">Describable<pos:position pos:line="742" pos:column="42"/></name><operator pos:line="742" pos:column="42">)<pos:position pos:line="742" pos:column="43"/></operator> <name pos:line="742" pos:column="44">bs<pos:position pos:line="742" pos:column="46"/></name><operator pos:line="742" pos:column="46">)<pos:position pos:line="742" pos:column="47"/></operator><operator pos:line="742" pos:column="47">.<pos:position pos:line="742" pos:column="48"/></operator><call><name pos:line="742" pos:column="48">getDescriptor<pos:position pos:line="742" pos:column="61"/></name><argument_list pos:line="742" pos:column="61">()<pos:position pos:line="742" pos:column="63"/></argument_list></call><operator pos:line="742" pos:column="63">.<pos:position pos:line="742" pos:column="64"/></operator><call><name pos:line="742" pos:column="64">getDisplayName<pos:position pos:line="742" pos:column="78"/></name><argument_list pos:line="742" pos:column="78">()<pos:position pos:line="742" pos:column="80"/></argument_list></call></expr>;<pos:position pos:line="742" pos:column="81"/></expr_stmt>
            }<pos:position pos:line="743" pos:column="14"/></block></then> <else pos:line="743" pos:column="15">else <block pos:line="743" pos:column="20">{
                <expr_stmt><expr><name pos:line="744" pos:column="17">buildStep<pos:position pos:line="744" pos:column="26"/></name> <operator pos:line="744" pos:column="27">=<pos:position pos:line="744" pos:column="28"/></operator> <call><name><name pos:line="744" pos:column="29">bs<pos:position pos:line="744" pos:column="31"/></name><operator pos:line="744" pos:column="31">.<pos:position pos:line="744" pos:column="32"/></operator><name pos:line="744" pos:column="32">getClass<pos:position pos:line="744" pos:column="40"/></name></name><argument_list pos:line="744" pos:column="40">()<pos:position pos:line="744" pos:column="42"/></argument_list></call><operator pos:line="744" pos:column="42">.<pos:position pos:line="744" pos:column="43"/></operator><call><name pos:line="744" pos:column="43">getName<pos:position pos:line="744" pos:column="50"/></name><argument_list pos:line="744" pos:column="50">()<pos:position pos:line="744" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="744" pos:column="53"/></expr_stmt>
            }<pos:position pos:line="745" pos:column="14"/></block></else></if>

            <if pos:line="747" pos:column="13">if <condition pos:line="747" pos:column="16">(<expr><name pos:line="747" pos:column="17">e<pos:position pos:line="747" pos:column="18"/></name> <operator pos:line="747" pos:column="19">instanceof<pos:position pos:line="747" pos:column="29"/></operator> <name pos:line="747" pos:column="30">AbortException<pos:position pos:line="747" pos:column="44"/></name></expr>)<pos:position pos:line="747" pos:column="45"/></condition><then pos:line="747" pos:column="45"> <block pos:line="747" pos:column="46">{
                <expr_stmt><expr><call><name><name pos:line="748" pos:column="17">LOGGER<pos:position pos:line="748" pos:column="23"/></name><operator pos:line="748" pos:column="23">.<pos:position pos:line="748" pos:column="24"/></operator><name pos:line="748" pos:column="24">log<pos:position pos:line="748" pos:column="27"/></name></name><argument_list pos:line="748" pos:column="27">(<argument><expr><name><name pos:line="748" pos:column="28">Level<pos:position pos:line="748" pos:column="33"/></name><operator pos:line="748" pos:column="33">.<pos:position pos:line="748" pos:column="34"/></operator><name pos:line="748" pos:column="34">FINE<pos:position pos:line="748" pos:column="38"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="748" pos:column="40">"{0} : {1} failed"<pos:position pos:line="748" pos:column="58"/></literal></expr></argument>, <argument><expr><operator pos:line="748" pos:column="60">new<pos:position pos:line="748" pos:column="63"/></operator> <name><name pos:line="748" pos:column="64">Object<pos:position pos:line="748" pos:column="70"/></name><index pos:line="748" pos:column="70">[]<pos:position pos:line="748" pos:column="72"/></index></name> <block pos:line="748" pos:column="73">{<expr><name><name pos:line="748" pos:column="74">AbstractBuild<pos:position pos:line="748" pos:column="87"/></name><operator pos:line="748" pos:column="87">.<pos:position pos:line="748" pos:column="88"/></operator><name pos:line="748" pos:column="88">this<pos:position pos:line="748" pos:column="92"/></name></name></expr>, <expr><name pos:line="748" pos:column="94">buildStep<pos:position pos:line="748" pos:column="103"/></name></expr>}<pos:position pos:line="748" pos:column="104"/></block></expr></argument>)<pos:position pos:line="748" pos:column="105"/></argument_list></call></expr>;<pos:position pos:line="748" pos:column="106"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="749" pos:column="17">listener<pos:position pos:line="749" pos:column="25"/></name><operator pos:line="749" pos:column="25">.<pos:position pos:line="749" pos:column="26"/></operator><name pos:line="749" pos:column="26">error<pos:position pos:line="749" pos:column="31"/></name></name><argument_list pos:line="749" pos:column="31">(<argument><expr><literal type="string" pos:line="749" pos:column="32">"Step â"<pos:position pos:line="749" pos:column="45"/></literal> <operator pos:line="749" pos:column="46">+<pos:position pos:line="749" pos:column="47"/></operator> <name pos:line="749" pos:column="48">buildStep<pos:position pos:line="749" pos:column="57"/></name> <operator pos:line="749" pos:column="58">+<pos:position pos:line="749" pos:column="59"/></operator> <literal type="string" pos:line="749" pos:column="60">"â failed: "<pos:position pos:line="749" pos:column="77"/></literal> <operator pos:line="749" pos:column="78">+<pos:position pos:line="749" pos:column="79"/></operator> <call><name><name pos:line="749" pos:column="80">e<pos:position pos:line="749" pos:column="81"/></name><operator pos:line="749" pos:column="81">.<pos:position pos:line="749" pos:column="82"/></operator><name pos:line="749" pos:column="82">getMessage<pos:position pos:line="749" pos:column="92"/></name></name><argument_list pos:line="749" pos:column="92">()<pos:position pos:line="749" pos:column="94"/></argument_list></call></expr></argument>)<pos:position pos:line="749" pos:column="95"/></argument_list></call></expr>;<pos:position pos:line="749" pos:column="96"/></expr_stmt>
            }<pos:position pos:line="750" pos:column="14"/></block></then> <else pos:line="750" pos:column="15">else <block pos:line="750" pos:column="20">{
                <decl_stmt><decl><type><name pos:line="751" pos:column="17">String<pos:position pos:line="751" pos:column="23"/></name></type> <name pos:line="751" pos:column="24">msg<pos:position pos:line="751" pos:column="27"/></name> <init pos:line="751" pos:column="28">= <expr><literal type="string" pos:line="751" pos:column="30">"Step â"<pos:position pos:line="751" pos:column="43"/></literal> <operator pos:line="751" pos:column="44">+<pos:position pos:line="751" pos:column="45"/></operator> <name pos:line="751" pos:column="46">buildStep<pos:position pos:line="751" pos:column="55"/></name> <operator pos:line="751" pos:column="56">+<pos:position pos:line="751" pos:column="57"/></operator> <literal type="string" pos:line="751" pos:column="58">"â aborted due to exception: "<pos:position pos:line="751" pos:column="93"/></literal></expr></init></decl>;<pos:position pos:line="751" pos:column="94"/></decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="752" pos:column="17">Functions<pos:position pos:line="752" pos:column="26"/></name><operator pos:line="752" pos:column="26">.<pos:position pos:line="752" pos:column="27"/></operator><name pos:line="752" pos:column="27">printStackTrace<pos:position pos:line="752" pos:column="42"/></name></name><argument_list pos:line="752" pos:column="42">(<argument><expr><name pos:line="752" pos:column="43">e<pos:position pos:line="752" pos:column="44"/></name></expr></argument>, <argument><expr><call><name><name pos:line="752" pos:column="46">listener<pos:position pos:line="752" pos:column="54"/></name><operator pos:line="752" pos:column="54">.<pos:position pos:line="752" pos:column="55"/></operator><name pos:line="752" pos:column="55">error<pos:position pos:line="752" pos:column="60"/></name></name><argument_list pos:line="752" pos:column="60">(<argument><expr><name pos:line="752" pos:column="61">msg<pos:position pos:line="752" pos:column="64"/></name></expr></argument>)<pos:position pos:line="752" pos:column="65"/></argument_list></call></expr></argument>)<pos:position pos:line="752" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="752" pos:column="67"/></expr_stmt>
                <expr_stmt><expr><call><name><name pos:line="753" pos:column="17">LOGGER<pos:position pos:line="753" pos:column="23"/></name><operator pos:line="753" pos:column="23">.<pos:position pos:line="753" pos:column="24"/></operator><name pos:line="753" pos:column="24">log<pos:position pos:line="753" pos:column="27"/></name></name><argument_list pos:line="753" pos:column="27">(<argument><expr><name pos:line="753" pos:column="28">WARNING<pos:position pos:line="753" pos:column="35"/></name></expr></argument>, <argument><expr><name pos:line="753" pos:column="37">msg<pos:position pos:line="753" pos:column="40"/></name></expr></argument>, <argument><expr><name pos:line="753" pos:column="42">e<pos:position pos:line="753" pos:column="43"/></name></expr></argument>)<pos:position pos:line="753" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="753" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="754" pos:column="14"/></block></else></if>

            <if pos:line="756" pos:column="13">if <condition pos:line="756" pos:column="16">(<expr><name pos:line="756" pos:column="17">phase<pos:position pos:line="756" pos:column="22"/></name></expr>)<pos:position pos:line="756" pos:column="23"/></condition><then pos:line="756" pos:column="23"> <block pos:line="756" pos:column="24">{
                <expr_stmt><expr><call><name pos:line="757" pos:column="17">setResult<pos:position pos:line="757" pos:column="26"/></name><argument_list pos:line="757" pos:column="26">(<argument><expr><name><name pos:line="757" pos:column="27">Result<pos:position pos:line="757" pos:column="33"/></name><operator pos:line="757" pos:column="33">.<pos:position pos:line="757" pos:column="34"/></operator><name pos:line="757" pos:column="34">FAILURE<pos:position pos:line="757" pos:column="41"/></name></name></expr></argument>)<pos:position pos:line="757" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="757" pos:column="43"/></expr_stmt>
            }<pos:position pos:line="758" pos:column="14"/></block></then></if>
        }<pos:position pos:line="759" pos:column="10"/></block></function>

        <comment type="block" format="javadoc" pos:line="761" pos:column="9">/**
         * Calls a build step.
         */</comment>
        <function><specifier pos:line="764" pos:column="9">protected<pos:position pos:line="764" pos:column="18"/></specifier> <specifier pos:line="764" pos:column="19">final<pos:position pos:line="764" pos:column="24"/></specifier> <type><name pos:line="764" pos:column="25">boolean<pos:position pos:line="764" pos:column="32"/></name></type> <name pos:line="764" pos:column="33">perform<pos:position pos:line="764" pos:column="40"/></name><parameter_list pos:line="764" pos:column="40">(<parameter><decl><type><name pos:line="764" pos:column="41">BuildStep<pos:position pos:line="764" pos:column="50"/></name></type> <name pos:line="764" pos:column="51">bs<pos:position pos:line="764" pos:column="53"/></name></decl></parameter>, <parameter><decl><type><name pos:line="764" pos:column="55">BuildListener<pos:position pos:line="764" pos:column="68"/></name></type> <name pos:line="764" pos:column="69">listener<pos:position pos:line="764" pos:column="77"/></name></decl></parameter>)<pos:position pos:line="764" pos:column="78"/></parameter_list> <throws pos:line="764" pos:column="79">throws <argument><expr><name pos:line="764" pos:column="86">InterruptedException<pos:position pos:line="764" pos:column="106"/></name></expr></argument>, <argument><expr><name pos:line="764" pos:column="108">IOException<pos:position pos:line="764" pos:column="119"/></name></expr></argument></throws> <block pos:line="764" pos:column="120">{
            <decl_stmt><decl><type><name pos:line="765" pos:column="13">BuildStepMonitor<pos:position pos:line="765" pos:column="29"/></name></type> <name pos:line="765" pos:column="30">mon<pos:position pos:line="765" pos:column="33"/></name></decl>;<pos:position pos:line="765" pos:column="34"/></decl_stmt>
            <try pos:line="766" pos:column="13">try <block pos:line="766" pos:column="17">{
                <expr_stmt><expr><name pos:line="767" pos:column="17">mon<pos:position pos:line="767" pos:column="20"/></name> <operator pos:line="767" pos:column="21">=<pos:position pos:line="767" pos:column="22"/></operator> <call><name><name pos:line="767" pos:column="23">bs<pos:position pos:line="767" pos:column="25"/></name><operator pos:line="767" pos:column="25">.<pos:position pos:line="767" pos:column="26"/></operator><name pos:line="767" pos:column="26">getRequiredMonitorService<pos:position pos:line="767" pos:column="51"/></name></name><argument_list pos:line="767" pos:column="51">()<pos:position pos:line="767" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="767" pos:column="54"/></expr_stmt>
            }<pos:position pos:line="768" pos:column="14"/></block> <catch pos:line="768" pos:column="15">catch <parameter_list pos:line="768" pos:column="21">(<parameter><decl><type><name pos:line="768" pos:column="22">AbstractMethodError<pos:position pos:line="768" pos:column="41"/></name></type> <name pos:line="768" pos:column="42">e<pos:position pos:line="768" pos:column="43"/></name></decl></parameter>)<pos:position pos:line="768" pos:column="44"/></parameter_list> <block pos:line="768" pos:column="45">{
                <expr_stmt><expr><name pos:line="769" pos:column="17">mon<pos:position pos:line="769" pos:column="20"/></name> <operator pos:line="769" pos:column="21">=<pos:position pos:line="769" pos:column="22"/></operator> <name><name pos:line="769" pos:column="23">BuildStepMonitor<pos:position pos:line="769" pos:column="39"/></name><operator pos:line="769" pos:column="39">.<pos:position pos:line="769" pos:column="40"/></operator><name pos:line="769" pos:column="40">BUILD<pos:position pos:line="769" pos:column="45"/></name></name></expr>;<pos:position pos:line="769" pos:column="46"/></expr_stmt>
            }<pos:position pos:line="770" pos:column="14"/></block></catch></try>
            <decl_stmt><decl><type><name pos:line="771" pos:column="13">Result<pos:position pos:line="771" pos:column="19"/></name></type> <name pos:line="771" pos:column="20">oldResult<pos:position pos:line="771" pos:column="29"/></name> <init pos:line="771" pos:column="30">= <expr><call><name><name pos:line="771" pos:column="32">AbstractBuild<pos:position pos:line="771" pos:column="45"/></name><operator pos:line="771" pos:column="45">.<pos:position pos:line="771" pos:column="46"/></operator><name pos:line="771" pos:column="46">this<pos:position pos:line="771" pos:column="50"/></name><operator pos:line="771" pos:column="50">.<pos:position pos:line="771" pos:column="51"/></operator><name pos:line="771" pos:column="51">getResult<pos:position pos:line="771" pos:column="60"/></name></name><argument_list pos:line="771" pos:column="60">()<pos:position pos:line="771" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="771" pos:column="63"/></decl_stmt>
            <for pos:line="772" pos:column="13">for <control pos:line="772" pos:column="17">(<init><decl><type><name pos:line="772" pos:column="18">BuildStepListener<pos:position pos:line="772" pos:column="35"/></name></type> <name pos:line="772" pos:column="36">bsl<pos:position pos:line="772" pos:column="39"/></name> <range pos:line="772" pos:column="40">: <expr><call><name><name pos:line="772" pos:column="42">BuildStepListener<pos:position pos:line="772" pos:column="59"/></name><operator pos:line="772" pos:column="59">.<pos:position pos:line="772" pos:column="60"/></operator><name pos:line="772" pos:column="60">all<pos:position pos:line="772" pos:column="63"/></name></name><argument_list pos:line="772" pos:column="63">()<pos:position pos:line="772" pos:column="65"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="772" pos:column="66"/></control> <block pos:line="772" pos:column="67">{
                <expr_stmt><expr><call><name><name pos:line="773" pos:column="17">bsl<pos:position pos:line="773" pos:column="20"/></name><operator pos:line="773" pos:column="20">.<pos:position pos:line="773" pos:column="21"/></operator><name pos:line="773" pos:column="21">started<pos:position pos:line="773" pos:column="28"/></name></name><argument_list pos:line="773" pos:column="28">(<argument><expr><name><name pos:line="773" pos:column="29">AbstractBuild<pos:position pos:line="773" pos:column="42"/></name><operator pos:line="773" pos:column="42">.<pos:position pos:line="773" pos:column="43"/></operator><name pos:line="773" pos:column="43">this<pos:position pos:line="773" pos:column="47"/></name></name></expr></argument>, <argument><expr><name pos:line="773" pos:column="49">bs<pos:position pos:line="773" pos:column="51"/></name></expr></argument>, <argument><expr><name pos:line="773" pos:column="53">listener<pos:position pos:line="773" pos:column="61"/></name></expr></argument>)<pos:position pos:line="773" pos:column="62"/></argument_list></call></expr>;<pos:position pos:line="773" pos:column="63"/></expr_stmt>
            }<pos:position pos:line="774" pos:column="14"/></block></for>

            <decl_stmt><decl><type><name pos:line="776" pos:column="13">boolean<pos:position pos:line="776" pos:column="20"/></name></type> <name pos:line="776" pos:column="21">canContinue<pos:position pos:line="776" pos:column="32"/></name> <init pos:line="776" pos:column="33">= <expr><literal type="boolean" pos:line="776" pos:column="35">false<pos:position pos:line="776" pos:column="40"/></literal></expr></init></decl>;<pos:position pos:line="776" pos:column="41"/></decl_stmt>
            <try pos:line="777" pos:column="13">try <block pos:line="777" pos:column="17">{

                <expr_stmt><expr><name pos:line="779" pos:column="17">canContinue<pos:position pos:line="779" pos:column="28"/></name> <operator pos:line="779" pos:column="29">=<pos:position pos:line="779" pos:column="30"/></operator> <call><name><name pos:line="779" pos:column="31">mon<pos:position pos:line="779" pos:column="34"/></name><operator pos:line="779" pos:column="34">.<pos:position pos:line="779" pos:column="35"/></operator><name pos:line="779" pos:column="35">perform<pos:position pos:line="779" pos:column="42"/></name></name><argument_list pos:line="779" pos:column="42">(<argument><expr><name pos:line="779" pos:column="43">bs<pos:position pos:line="779" pos:column="45"/></name></expr></argument>, <argument><expr><name><name pos:line="779" pos:column="47">AbstractBuild<pos:position pos:line="779" pos:column="60"/></name><operator pos:line="779" pos:column="60">.<pos:position pos:line="779" pos:column="61"/></operator><name pos:line="779" pos:column="61">this<pos:position pos:line="779" pos:column="65"/></name></name></expr></argument>, <argument><expr><name pos:line="779" pos:column="67">launcher<pos:position pos:line="779" pos:column="75"/></name></expr></argument>, <argument><expr><name pos:line="779" pos:column="77">listener<pos:position pos:line="779" pos:column="85"/></name></expr></argument>)<pos:position pos:line="779" pos:column="86"/></argument_list></call></expr>;<pos:position pos:line="779" pos:column="87"/></expr_stmt>
            }<pos:position pos:line="780" pos:column="14"/></block> <catch pos:line="780" pos:column="15">catch <parameter_list pos:line="780" pos:column="21">(<parameter><decl><type><name pos:line="780" pos:column="22">RequestAbortedException<pos:position pos:line="780" pos:column="45"/></name></type> <name pos:line="780" pos:column="46">ex<pos:position pos:line="780" pos:column="48"/></name></decl></parameter>)<pos:position pos:line="780" pos:column="49"/></parameter_list> <block pos:line="780" pos:column="50">{
                <comment type="line" pos:line="781" pos:column="17">// Channel is closed, do not continue</comment>
                <expr_stmt><expr><call><name pos:line="782" pos:column="17">reportBrokenChannel<pos:position pos:line="782" pos:column="36"/></name><argument_list pos:line="782" pos:column="36">(<argument><expr><name pos:line="782" pos:column="37">listener<pos:position pos:line="782" pos:column="45"/></name></expr></argument>)<pos:position pos:line="782" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="782" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="783" pos:column="14"/></block></catch> <catch pos:line="783" pos:column="15">catch <parameter_list pos:line="783" pos:column="21">(<parameter><decl><type><name pos:line="783" pos:column="22">ChannelClosedException<pos:position pos:line="783" pos:column="44"/></name></type> <name pos:line="783" pos:column="45">ex<pos:position pos:line="783" pos:column="47"/></name></decl></parameter>)<pos:position pos:line="783" pos:column="48"/></parameter_list> <block pos:line="783" pos:column="49">{
                <comment type="line" pos:line="784" pos:column="17">// Channel is closed, do not continue</comment>
                <expr_stmt><expr><call><name pos:line="785" pos:column="17">reportBrokenChannel<pos:position pos:line="785" pos:column="36"/></name><argument_list pos:line="785" pos:column="36">(<argument><expr><name pos:line="785" pos:column="37">listener<pos:position pos:line="785" pos:column="45"/></name></expr></argument>)<pos:position pos:line="785" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="785" pos:column="47"/></expr_stmt>
            }<pos:position pos:line="786" pos:column="14"/></block></catch> <catch pos:line="786" pos:column="15">catch <parameter_list pos:line="786" pos:column="21">(<parameter><decl><type><name pos:line="786" pos:column="22">RuntimeException<pos:position pos:line="786" pos:column="38"/></name></type> <name pos:line="786" pos:column="39">ex<pos:position pos:line="786" pos:column="41"/></name></decl></parameter>)<pos:position pos:line="786" pos:column="42"/></parameter_list> <block pos:line="786" pos:column="43">{
                <expr_stmt><expr><call><name><name pos:line="787" pos:column="17">Functions<pos:position pos:line="787" pos:column="26"/></name><operator pos:line="787" pos:column="26">.<pos:position pos:line="787" pos:column="27"/></operator><name pos:line="787" pos:column="27">printStackTrace<pos:position pos:line="787" pos:column="42"/></name></name><argument_list pos:line="787" pos:column="42">(<argument><expr><name pos:line="787" pos:column="43">ex<pos:position pos:line="787" pos:column="45"/></name></expr></argument>, <argument><expr><call><name><name pos:line="787" pos:column="47">listener<pos:position pos:line="787" pos:column="55"/></name><operator pos:line="787" pos:column="55">.<pos:position pos:line="787" pos:column="56"/></operator><name pos:line="787" pos:column="56">error<pos:position pos:line="787" pos:column="61"/></name></name><argument_list pos:line="787" pos:column="61">(<argument><expr><literal type="string" pos:line="787" pos:column="62">"Build step failed with exception"<pos:position pos:line="787" pos:column="96"/></literal></expr></argument>)<pos:position pos:line="787" pos:column="97"/></argument_list></call></expr></argument>)<pos:position pos:line="787" pos:column="98"/></argument_list></call></expr>;<pos:position pos:line="787" pos:column="99"/></expr_stmt>
            }<pos:position pos:line="788" pos:column="14"/></block></catch></try>

            <for pos:line="790" pos:column="13">for <control pos:line="790" pos:column="17">(<init><decl><type><name pos:line="790" pos:column="18">BuildStepListener<pos:position pos:line="790" pos:column="35"/></name></type> <name pos:line="790" pos:column="36">bsl<pos:position pos:line="790" pos:column="39"/></name> <range pos:line="790" pos:column="40">: <expr><call><name><name pos:line="790" pos:column="42">BuildStepListener<pos:position pos:line="790" pos:column="59"/></name><operator pos:line="790" pos:column="59">.<pos:position pos:line="790" pos:column="60"/></operator><name pos:line="790" pos:column="60">all<pos:position pos:line="790" pos:column="63"/></name></name><argument_list pos:line="790" pos:column="63">()<pos:position pos:line="790" pos:column="65"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="790" pos:column="66"/></control> <block pos:line="790" pos:column="67">{
                <expr_stmt><expr><call><name><name pos:line="791" pos:column="17">bsl<pos:position pos:line="791" pos:column="20"/></name><operator pos:line="791" pos:column="20">.<pos:position pos:line="791" pos:column="21"/></operator><name pos:line="791" pos:column="21">finished<pos:position pos:line="791" pos:column="29"/></name></name><argument_list pos:line="791" pos:column="29">(<argument><expr><name><name pos:line="791" pos:column="30">AbstractBuild<pos:position pos:line="791" pos:column="43"/></name><operator pos:line="791" pos:column="43">.<pos:position pos:line="791" pos:column="44"/></operator><name pos:line="791" pos:column="44">this<pos:position pos:line="791" pos:column="48"/></name></name></expr></argument>, <argument><expr><name pos:line="791" pos:column="50">bs<pos:position pos:line="791" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="791" pos:column="54">listener<pos:position pos:line="791" pos:column="62"/></name></expr></argument>, <argument><expr><name pos:line="791" pos:column="64">canContinue<pos:position pos:line="791" pos:column="75"/></name></expr></argument>)<pos:position pos:line="791" pos:column="76"/></argument_list></call></expr>;<pos:position pos:line="791" pos:column="77"/></expr_stmt>
            }<pos:position pos:line="792" pos:column="14"/></block></for>
            <decl_stmt><decl><type><name pos:line="793" pos:column="13">Result<pos:position pos:line="793" pos:column="19"/></name></type> <name pos:line="793" pos:column="20">newResult<pos:position pos:line="793" pos:column="29"/></name> <init pos:line="793" pos:column="30">= <expr><call><name><name pos:line="793" pos:column="32">AbstractBuild<pos:position pos:line="793" pos:column="45"/></name><operator pos:line="793" pos:column="45">.<pos:position pos:line="793" pos:column="46"/></operator><name pos:line="793" pos:column="46">this<pos:position pos:line="793" pos:column="50"/></name><operator pos:line="793" pos:column="50">.<pos:position pos:line="793" pos:column="51"/></operator><name pos:line="793" pos:column="51">getResult<pos:position pos:line="793" pos:column="60"/></name></name><argument_list pos:line="793" pos:column="60">()<pos:position pos:line="793" pos:column="62"/></argument_list></call></expr></init></decl>;<pos:position pos:line="793" pos:column="63"/></decl_stmt>
            <if pos:line="794" pos:column="13">if <condition pos:line="794" pos:column="16">(<expr><name pos:line="794" pos:column="17">newResult<pos:position pos:line="794" pos:column="26"/></name> <operator pos:line="794" pos:column="27">!=<pos:position pos:line="794" pos:column="29"/></operator> <name pos:line="794" pos:column="30">oldResult<pos:position pos:line="794" pos:column="39"/></name></expr>)<pos:position pos:line="794" pos:column="40"/></condition><then pos:line="794" pos:column="40"> <block pos:line="794" pos:column="41">{
                <decl_stmt><decl><type><name pos:line="795" pos:column="17">String<pos:position pos:line="795" pos:column="23"/></name></type> <name pos:line="795" pos:column="24">buildStepName<pos:position pos:line="795" pos:column="37"/></name> <init pos:line="795" pos:column="38">= <expr><call><name pos:line="795" pos:column="40">getBuildStepName<pos:position pos:line="795" pos:column="56"/></name><argument_list pos:line="795" pos:column="56">(<argument><expr><name pos:line="795" pos:column="57">bs<pos:position pos:line="795" pos:column="59"/></name></expr></argument>)<pos:position pos:line="795" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="795" pos:column="61"/></decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="796" pos:column="17">listener<pos:position pos:line="796" pos:column="25"/></name><operator pos:line="796" pos:column="25">.<pos:position pos:line="796" pos:column="26"/></operator><name pos:line="796" pos:column="26">getLogger<pos:position pos:line="796" pos:column="35"/></name></name><argument_list pos:line="796" pos:column="35">()<pos:position pos:line="796" pos:column="37"/></argument_list></call><operator pos:line="796" pos:column="37">.<pos:position pos:line="796" pos:column="38"/></operator><call><name pos:line="796" pos:column="38">format<pos:position pos:line="796" pos:column="44"/></name><argument_list pos:line="796" pos:column="44">(<argument><expr><literal type="string" pos:line="796" pos:column="45">"Build step '%s' changed build result to %s%n"<pos:position pos:line="796" pos:column="91"/></literal></expr></argument>, <argument><expr><name pos:line="796" pos:column="93">buildStepName<pos:position pos:line="796" pos:column="106"/></name></expr></argument>, <argument><expr><name pos:line="796" pos:column="108">newResult<pos:position pos:line="796" pos:column="117"/></name></expr></argument>)<pos:position pos:line="796" pos:column="118"/></argument_list></call></expr>;<pos:position pos:line="796" pos:column="119"/></expr_stmt>
            }<pos:position pos:line="797" pos:column="14"/></block></then></if>
            <if pos:line="798" pos:column="13">if <condition pos:line="798" pos:column="16">(<expr><operator pos:line="798" pos:column="17">!<pos:position pos:line="798" pos:column="18"/></operator><name pos:line="798" pos:column="18">canContinue<pos:position pos:line="798" pos:column="29"/></name></expr>)<pos:position pos:line="798" pos:column="30"/></condition><then pos:line="798" pos:column="30"> <block pos:line="798" pos:column="31">{
                <decl_stmt><decl><type><name pos:line="799" pos:column="17">String<pos:position pos:line="799" pos:column="23"/></name></type> <name pos:line="799" pos:column="24">buildStepName<pos:position pos:line="799" pos:column="37"/></name> <init pos:line="799" pos:column="38">= <expr><call><name pos:line="799" pos:column="40">getBuildStepName<pos:position pos:line="799" pos:column="56"/></name><argument_list pos:line="799" pos:column="56">(<argument><expr><name pos:line="799" pos:column="57">bs<pos:position pos:line="799" pos:column="59"/></name></expr></argument>)<pos:position pos:line="799" pos:column="60"/></argument_list></call></expr></init></decl>;<pos:position pos:line="799" pos:column="61"/></decl_stmt>
                <expr_stmt><expr><call><name><name pos:line="800" pos:column="17">listener<pos:position pos:line="800" pos:column="25"/></name><operator pos:line="800" pos:column="25">.<pos:position pos:line="800" pos:column="26"/></operator><name pos:line="800" pos:column="26">getLogger<pos:position pos:line="800" pos:column="35"/></name></name><argument_list pos:line="800" pos:column="35">()<pos:position pos:line="800" pos:column="37"/></argument_list></call><operator pos:line="800" pos:column="37">.<pos:position pos:line="800" pos:column="38"/></operator><call><name pos:line="800" pos:column="38">format<pos:position pos:line="800" pos:column="44"/></name><argument_list pos:line="800" pos:column="44">(<argument><expr><literal type="string" pos:line="800" pos:column="45">"Build step '%s' marked build as failure%n"<pos:position pos:line="800" pos:column="88"/></literal></expr></argument>, <argument><expr><name pos:line="800" pos:column="90">buildStepName<pos:position pos:line="800" pos:column="103"/></name></expr></argument>)<pos:position pos:line="800" pos:column="104"/></argument_list></call></expr>;<pos:position pos:line="800" pos:column="105"/></expr_stmt>
            }<pos:position pos:line="801" pos:column="14"/></block></then></if>
            <return pos:line="802" pos:column="13">return <expr><name pos:line="802" pos:column="20">canContinue<pos:position pos:line="802" pos:column="31"/></name></expr>;<pos:position pos:line="802" pos:column="32"/></return>
        }<pos:position pos:line="803" pos:column="10"/></block></function>

        <function><specifier pos:line="805" pos:column="9">private<pos:position pos:line="805" pos:column="16"/></specifier> <type><name pos:line="805" pos:column="17">void<pos:position pos:line="805" pos:column="21"/></name></type> <name pos:line="805" pos:column="22">reportBrokenChannel<pos:position pos:line="805" pos:column="41"/></name><parameter_list pos:line="805" pos:column="41">(<parameter><decl><type><name pos:line="805" pos:column="42">BuildListener<pos:position pos:line="805" pos:column="55"/></name></type> <name pos:line="805" pos:column="56">listener<pos:position pos:line="805" pos:column="64"/></name></decl></parameter>)<pos:position pos:line="805" pos:column="65"/></parameter_list> <throws pos:line="805" pos:column="66">throws <argument><expr><name pos:line="805" pos:column="73">IOException<pos:position pos:line="805" pos:column="84"/></name></expr></argument></throws> <block pos:line="805" pos:column="85">{
            <decl_stmt><decl><type><specifier pos:line="806" pos:column="13">final<pos:position pos:line="806" pos:column="18"/></specifier> <name pos:line="806" pos:column="19">Node<pos:position pos:line="806" pos:column="23"/></name></type> <name pos:line="806" pos:column="24">node<pos:position pos:line="806" pos:column="28"/></name> <init pos:line="806" pos:column="29">= <expr><call><name pos:line="806" pos:column="31">getCurrentNode<pos:position pos:line="806" pos:column="45"/></name><argument_list pos:line="806" pos:column="45">()<pos:position pos:line="806" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="806" pos:column="48"/></decl_stmt>
            <expr_stmt><expr><call><name><name pos:line="807" pos:column="13">listener<pos:position pos:line="807" pos:column="21"/></name><operator pos:line="807" pos:column="21">.<pos:position pos:line="807" pos:column="22"/></operator><name pos:line="807" pos:column="22">hyperlink<pos:position pos:line="807" pos:column="31"/></name></name><argument_list pos:line="807" pos:column="31">(<argument><expr><literal type="string" pos:line="807" pos:column="32">"/"<pos:position pos:line="807" pos:column="35"/></literal> <operator pos:line="807" pos:column="36">+<pos:position pos:line="807" pos:column="37"/></operator> <call><name><name pos:line="807" pos:column="38">node<pos:position pos:line="807" pos:column="42"/></name><operator pos:line="807" pos:column="42">.<pos:position pos:line="807" pos:column="43"/></operator><name pos:line="807" pos:column="43">toComputer<pos:position pos:line="807" pos:column="53"/></name></name><argument_list pos:line="807" pos:column="53">()<pos:position pos:line="807" pos:column="55"/></argument_list></call><operator pos:line="807" pos:column="55">.<pos:position pos:line="807" pos:column="56"/></operator><call><name pos:line="807" pos:column="56">getUrl<pos:position pos:line="807" pos:column="62"/></name><argument_list pos:line="807" pos:column="62">()<pos:position pos:line="807" pos:column="64"/></argument_list></call> <operator pos:line="807" pos:column="65">+<pos:position pos:line="807" pos:column="66"/></operator> <literal type="string" pos:line="807" pos:column="67">"log"<pos:position pos:line="807" pos:column="72"/></literal></expr></argument>, <argument><expr><literal type="string" pos:line="807" pos:column="74">"Agent went offline during the build"<pos:position pos:line="807" pos:column="111"/></literal></expr></argument>)<pos:position pos:line="807" pos:column="112"/></argument_list></call></expr>;<pos:position pos:line="807" pos:column="113"/></expr_stmt>
            <expr_stmt><expr><call><name><name pos:line="808" pos:column="13">listener<pos:position pos:line="808" pos:column="21"/></name><operator pos:line="808" pos:column="21">.<pos:position pos:line="808" pos:column="22"/></operator><name pos:line="808" pos:column="22">getLogger<pos:position pos:line="808" pos:column="31"/></name></name><argument_list pos:line="808" pos:column="31">()<pos:position pos:line="808" pos:column="33"/></argument_list></call><operator pos:line="808" pos:column="33">.<pos:position pos:line="808" pos:column="34"/></operator><call><name pos:line="808" pos:column="34">println<pos:position pos:line="808" pos:column="41"/></name><argument_list pos:line="808" pos:column="41">()<pos:position pos:line="808" pos:column="43"/></argument_list></call></expr>;<pos:position pos:line="808" pos:column="44"/></expr_stmt>
            <decl_stmt><decl><type><specifier pos:line="809" pos:column="13">final<pos:position pos:line="809" pos:column="18"/></specifier> <name pos:line="809" pos:column="19">OfflineCause<pos:position pos:line="809" pos:column="31"/></name></type> <name pos:line="809" pos:column="32">offlineCause<pos:position pos:line="809" pos:column="44"/></name> <init pos:line="809" pos:column="45">= <expr><call><name><name pos:line="809" pos:column="47">node<pos:position pos:line="809" pos:column="51"/></name><operator pos:line="809" pos:column="51">.<pos:position pos:line="809" pos:column="52"/></operator><name pos:line="809" pos:column="52">toComputer<pos:position pos:line="809" pos:column="62"/></name></name><argument_list pos:line="809" pos:column="62">()<pos:position pos:line="809" pos:column="64"/></argument_list></call><operator pos:line="809" pos:column="64">.<pos:position pos:line="809" pos:column="65"/></operator><call><name pos:line="809" pos:column="65">getOfflineCause<pos:position pos:line="809" pos:column="80"/></name><argument_list pos:line="809" pos:column="80">()<pos:position pos:line="809" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="809" pos:column="83"/></decl_stmt>
            <if pos:line="810" pos:column="13">if <condition pos:line="810" pos:column="16">(<expr><name pos:line="810" pos:column="17">offlineCause<pos:position pos:line="810" pos:column="29"/></name> <operator pos:line="810" pos:column="30">!=<pos:position pos:line="810" pos:column="32"/></operator> <literal type="null" pos:line="810" pos:column="33">null<pos:position pos:line="810" pos:column="37"/></literal></expr>)<pos:position pos:line="810" pos:column="38"/></condition><then pos:line="810" pos:column="38"> <block pos:line="810" pos:column="39">{
                <expr_stmt><expr><call><name><name pos:line="811" pos:column="17">listener<pos:position pos:line="811" pos:column="25"/></name><operator pos:line="811" pos:column="25">.<pos:position pos:line="811" pos:column="26"/></operator><name pos:line="811" pos:column="26">error<pos:position pos:line="811" pos:column="31"/></name></name><argument_list pos:line="811" pos:column="31">(<argument><expr><call><name><name pos:line="811" pos:column="32">offlineCause<pos:position pos:line="811" pos:column="44"/></name><operator pos:line="811" pos:column="44">.<pos:position pos:line="811" pos:column="45"/></operator><name pos:line="811" pos:column="45">toString<pos:position pos:line="811" pos:column="53"/></name></name><argument_list pos:line="811" pos:column="53">()<pos:position pos:line="811" pos:column="55"/></argument_list></call></expr></argument>)<pos:position pos:line="811" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="811" pos:column="57"/></expr_stmt>
            }<pos:position pos:line="812" pos:column="14"/></block></then></if>
        }<pos:position pos:line="813" pos:column="10"/></block></function>

        <function><specifier pos:line="815" pos:column="9">private<pos:position pos:line="815" pos:column="16"/></specifier> <type><name pos:line="815" pos:column="17">String<pos:position pos:line="815" pos:column="23"/></name></type> <name pos:line="815" pos:column="24">getBuildStepName<pos:position pos:line="815" pos:column="40"/></name><parameter_list pos:line="815" pos:column="40">(<parameter><decl><type><name pos:line="815" pos:column="41">BuildStep<pos:position pos:line="815" pos:column="50"/></name></type> <name pos:line="815" pos:column="51">bs<pos:position pos:line="815" pos:column="53"/></name></decl></parameter>)<pos:position pos:line="815" pos:column="54"/></parameter_list> <block pos:line="815" pos:column="55">{
            <if pos:line="816" pos:column="13">if <condition pos:line="816" pos:column="16">(<expr><ternary><condition><expr><name pos:line="816" pos:column="17">bs<pos:position pos:line="816" pos:column="19"/></name> <operator pos:line="816" pos:column="20">instanceof<pos:position pos:line="816" pos:column="30"/></operator> <name><name pos:line="816" pos:column="31">Describable<pos:position pos:line="816" pos:column="42"/></name><argument_list type="generic" pos:line="816" pos:column="42">&lt;<argument><name pos:line="816" pos:column="43">?<pos:position pos:line="816" pos:column="44"/></name></argument>&gt;<pos:position pos:line="816" pos:column="48"/></argument_list></name></expr>)<pos:position pos:line="816" pos:column="46"/></condition> <block pos:line="816" pos:column="47">{
                <return pos:line="817" pos:column="17">return <expr><operator pos:line="817" pos:column="24">(<pos:position pos:line="817" pos:column="25"/></operator><operator pos:line="817" pos:column="25">(<pos:position pos:line="817" pos:column="26"/></operator><ternary><condition><expr><name><name pos:line="817" pos:column="26">Describable<pos:position pos:line="817" pos:column="37"/></name><argument_list type="generic" pos:line="817" pos:column="37">&lt;<argument><name pos:line="817" pos:column="38">?<pos:position pos:line="817" pos:column="39"/></name></argument>&gt;<pos:position pos:line="817" pos:column="43"/></argument_list></name></expr></condition></ternary><operator pos:line="817" pos:column="40">)<pos:position pos:line="817" pos:column="41"/></operator> <name pos:line="817" pos:column="42">bs<pos:position pos:line="817" pos:column="44"/></name><operator pos:line="817" pos:column="44">)<pos:position pos:line="817" pos:column="45"/></operator><operator pos:line="817" pos:column="45">.<pos:position pos:line="817" pos:column="46"/></operator><call><name pos:line="817" pos:column="46">getDescriptor<pos:position pos:line="817" pos:column="59"/></name><argument_list pos:line="817" pos:column="59">()<pos:position pos:line="817" pos:column="61"/></argument_list></call><operator pos:line="817" pos:column="61">.<pos:position pos:line="817" pos:column="62"/></operator><call><name pos:line="817" pos:column="62">getDisplayName<pos:position pos:line="817" pos:column="76"/></name><argument_list pos:line="817" pos:column="76">()<pos:position pos:line="817" pos:column="78"/></argument_list></call></expr>;<pos:position pos:line="817" pos:column="79"/></return>
            }<pos:position pos:line="818" pos:column="14"/></block></ternary></expr></condition> <else pos:line="818" pos:column="15">else <block pos:line="818" pos:column="20">{
                <return pos:line="819" pos:column="17">return <expr><call><name><name pos:line="819" pos:column="24">bs<pos:position pos:line="819" pos:column="26"/></name><operator pos:line="819" pos:column="26">.<pos:position pos:line="819" pos:column="27"/></operator><name pos:line="819" pos:column="27">getClass<pos:position pos:line="819" pos:column="35"/></name></name><argument_list pos:line="819" pos:column="35">()<pos:position pos:line="819" pos:column="37"/></argument_list></call><operator pos:line="819" pos:column="37">.<pos:position pos:line="819" pos:column="38"/></operator><call><name pos:line="819" pos:column="38">getSimpleName<pos:position pos:line="819" pos:column="51"/></name><argument_list pos:line="819" pos:column="51">()<pos:position pos:line="819" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="819" pos:column="54"/></return>
            }<pos:position pos:line="820" pos:column="14"/></block></else></if>
        }<pos:position pos:line="821" pos:column="10"/></block></function>

        <function><specifier pos:line="823" pos:column="9">protected<pos:position pos:line="823" pos:column="18"/></specifier> <specifier pos:line="823" pos:column="19">final<pos:position pos:line="823" pos:column="24"/></specifier> <type><name pos:line="823" pos:column="25">boolean<pos:position pos:line="823" pos:column="32"/></name></type> <name pos:line="823" pos:column="33">preBuild<pos:position pos:line="823" pos:column="41"/></name><parameter_list pos:line="823" pos:column="41">(<parameter><decl><type><name pos:line="823" pos:column="42">BuildListener<pos:position pos:line="823" pos:column="55"/></name></type> <name pos:line="823" pos:column="56">listener<pos:position pos:line="823" pos:column="64"/></name></decl></parameter>,<parameter><decl><type><name><name pos:line="823" pos:column="65">Map<pos:position pos:line="823" pos:column="68"/></name><argument_list type="generic" pos:line="823" pos:column="68">&lt;<argument><name pos:line="823" pos:column="69">?<pos:position pos:line="823" pos:column="70"/></name></argument>,<argument><name pos:line="823" pos:column="71">?<pos:position pos:line="823" pos:column="72"/></name> <extends pos:line="823" pos:column="73">extends <name pos:line="823" pos:column="81">BuildStep<pos:position pos:line="823" pos:column="90"/></name></extends></argument>&gt;<pos:position pos:line="823" pos:column="94"/></argument_list></name></type> <name pos:line="823" pos:column="92">steps<pos:position pos:line="823" pos:column="97"/></name></decl></parameter>)<pos:position pos:line="823" pos:column="98"/></parameter_list> <block pos:line="823" pos:column="99">{
            <return pos:line="824" pos:column="13">return <expr><call><name pos:line="824" pos:column="20">preBuild<pos:position pos:line="824" pos:column="28"/></name><argument_list pos:line="824" pos:column="28">(<argument><expr><name pos:line="824" pos:column="29">listener<pos:position pos:line="824" pos:column="37"/></name></expr></argument>,<argument><expr><call><name><name pos:line="824" pos:column="38">steps<pos:position pos:line="824" pos:column="43"/></name><operator pos:line="824" pos:column="43">.<pos:position pos:line="824" pos:column="44"/></operator><name pos:line="824" pos:column="44">values<pos:position pos:line="824" pos:column="50"/></name></name><argument_list pos:line="824" pos:column="50">()<pos:position pos:line="824" pos:column="52"/></argument_list></call></expr></argument>)<pos:position pos:line="824" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="824" pos:column="54"/></return>
        }<pos:position pos:line="825" pos:column="10"/></block></function>

        <function><specifier pos:line="827" pos:column="9">protected<pos:position pos:line="827" pos:column="18"/></specifier> <specifier pos:line="827" pos:column="19">final<pos:position pos:line="827" pos:column="24"/></specifier> <type><name pos:line="827" pos:column="25">boolean<pos:position pos:line="827" pos:column="32"/></name></type> <name pos:line="827" pos:column="33">preBuild<pos:position pos:line="827" pos:column="41"/></name><parameter_list pos:line="827" pos:column="41">(<parameter><decl><type><name pos:line="827" pos:column="42">BuildListener<pos:position pos:line="827" pos:column="55"/></name></type> <name pos:line="827" pos:column="56">listener<pos:position pos:line="827" pos:column="64"/></name></decl></parameter>,<parameter><decl><type><name><name pos:line="827" pos:column="65">Collection<pos:position pos:line="827" pos:column="75"/></name><argument_list type="generic" pos:line="827" pos:column="75">&lt;<argument><name pos:line="827" pos:column="76">?<pos:position pos:line="827" pos:column="77"/></name> <extends pos:line="827" pos:column="78">extends <name pos:line="827" pos:column="86">BuildStep<pos:position pos:line="827" pos:column="95"/></name></extends></argument>&gt;<pos:position pos:line="827" pos:column="99"/></argument_list></name></type> <name pos:line="827" pos:column="97">steps<pos:position pos:line="827" pos:column="102"/></name></decl></parameter>)<pos:position pos:line="827" pos:column="103"/></parameter_list> <block pos:line="827" pos:column="104">{
            <return pos:line="828" pos:column="13">return <expr><call><name pos:line="828" pos:column="20">preBuild<pos:position pos:line="828" pos:column="28"/></name><argument_list pos:line="828" pos:column="28">(<argument><expr><name pos:line="828" pos:column="29">listener<pos:position pos:line="828" pos:column="37"/></name></expr></argument>,<argument><expr><operator pos:line="828" pos:column="38">(<pos:position pos:line="828" pos:column="39"/></operator><ternary><condition><expr><name><name pos:line="828" pos:column="39">Iterable<pos:position pos:line="828" pos:column="47"/></name><argument_list type="generic" pos:line="828" pos:column="47">&lt;<argument><name pos:line="828" pos:column="48">?<pos:position pos:line="828" pos:column="49"/></name> <extends pos:line="828" pos:column="50">extends <name pos:line="828" pos:column="58">BuildStep<pos:position pos:line="828" pos:column="67"/></name></extends></argument>&gt;<pos:position pos:line="828" pos:column="71"/></argument_list></name></expr></condition></ternary><operator pos:line="828" pos:column="68">)<pos:position pos:line="828" pos:column="69"/></operator><name pos:line="828" pos:column="69">steps<pos:position pos:line="828" pos:column="74"/></name></expr></argument>)<pos:position pos:line="828" pos:column="75"/></argument_list></call></expr>;<pos:position pos:line="828" pos:column="76"/></return>
        }<pos:position pos:line="829" pos:column="10"/></block></function>

        <function><specifier pos:line="831" pos:column="9">protected<pos:position pos:line="831" pos:column="18"/></specifier> <specifier pos:line="831" pos:column="19">final<pos:position pos:line="831" pos:column="24"/></specifier> <type><name pos:line="831" pos:column="25">boolean<pos:position pos:line="831" pos:column="32"/></name></type> <name pos:line="831" pos:column="33">preBuild<pos:position pos:line="831" pos:column="41"/></name><parameter_list pos:line="831" pos:column="41">(<parameter><decl><type><name pos:line="831" pos:column="42">BuildListener<pos:position pos:line="831" pos:column="55"/></name></type> <name pos:line="831" pos:column="56">listener<pos:position pos:line="831" pos:column="64"/></name></decl></parameter>,<parameter><decl><type><name><name pos:line="831" pos:column="65">Iterable<pos:position pos:line="831" pos:column="73"/></name><argument_list type="generic" pos:line="831" pos:column="73">&lt;<argument><name pos:line="831" pos:column="74">?<pos:position pos:line="831" pos:column="75"/></name> <extends pos:line="831" pos:column="76">extends <name pos:line="831" pos:column="84">BuildStep<pos:position pos:line="831" pos:column="93"/></name></extends></argument>&gt;<pos:position pos:line="831" pos:column="97"/></argument_list></name></type> <name pos:line="831" pos:column="95">steps<pos:position pos:line="831" pos:column="100"/></name></decl></parameter>)<pos:position pos:line="831" pos:column="101"/></parameter_list> <block pos:line="831" pos:column="102">{
            <for pos:line="832" pos:column="13">for <control pos:line="832" pos:column="17">(<init><decl><type><name pos:line="832" pos:column="18">BuildStep<pos:position pos:line="832" pos:column="27"/></name></type> <name pos:line="832" pos:column="28">bs<pos:position pos:line="832" pos:column="30"/></name> <range pos:line="832" pos:column="31">: <expr><name pos:line="832" pos:column="33">steps<pos:position pos:line="832" pos:column="38"/></name></expr></range></decl></init>)<pos:position pos:line="832" pos:column="39"/></control>
                <block type="pseudo"><if pos:line="833" pos:column="17">if <condition pos:line="833" pos:column="20">(<expr><operator pos:line="833" pos:column="21">!<pos:position pos:line="833" pos:column="22"/></operator><call><name><name pos:line="833" pos:column="22">bs<pos:position pos:line="833" pos:column="24"/></name><operator pos:line="833" pos:column="24">.<pos:position pos:line="833" pos:column="25"/></operator><name pos:line="833" pos:column="25">prebuild<pos:position pos:line="833" pos:column="33"/></name></name><argument_list pos:line="833" pos:column="33">(<argument><expr><name><name pos:line="833" pos:column="34">AbstractBuild<pos:position pos:line="833" pos:column="47"/></name><operator pos:line="833" pos:column="47">.<pos:position pos:line="833" pos:column="48"/></operator><name pos:line="833" pos:column="48">this<pos:position pos:line="833" pos:column="52"/></name></name></expr></argument>,<argument><expr><name pos:line="833" pos:column="53">listener<pos:position pos:line="833" pos:column="61"/></name></expr></argument>)<pos:position pos:line="833" pos:column="62"/></argument_list></call></expr>)<pos:position pos:line="833" pos:column="63"/></condition><then pos:line="833" pos:column="63"> <block pos:line="833" pos:column="64">{
                    <expr_stmt><expr><call><name><name pos:line="834" pos:column="21">LOGGER<pos:position pos:line="834" pos:column="27"/></name><operator pos:line="834" pos:column="27">.<pos:position pos:line="834" pos:column="28"/></operator><name pos:line="834" pos:column="28">log<pos:position pos:line="834" pos:column="31"/></name></name><argument_list pos:line="834" pos:column="31">(<argument><expr><name><name pos:line="834" pos:column="32">Level<pos:position pos:line="834" pos:column="37"/></name><operator pos:line="834" pos:column="37">.<pos:position pos:line="834" pos:column="38"/></operator><name pos:line="834" pos:column="38">FINE<pos:position pos:line="834" pos:column="42"/></name></name></expr></argument>, <argument><expr><literal type="string" pos:line="834" pos:column="44">"{0} : {1} failed"<pos:position pos:line="834" pos:column="62"/></literal></expr></argument>, <argument><expr><operator pos:line="834" pos:column="64">new<pos:position pos:line="834" pos:column="67"/></operator> <name><name pos:line="834" pos:column="68">Object<pos:position pos:line="834" pos:column="74"/></name><index pos:line="834" pos:column="74">[]<pos:position pos:line="834" pos:column="76"/></index></name> <block pos:line="834" pos:column="77">{<expr><name><name pos:line="834" pos:column="78">AbstractBuild<pos:position pos:line="834" pos:column="91"/></name><operator pos:line="834" pos:column="91">.<pos:position pos:line="834" pos:column="92"/></operator><name pos:line="834" pos:column="92">this<pos:position pos:line="834" pos:column="96"/></name></name></expr>, <expr><name pos:line="834" pos:column="98">bs<pos:position pos:line="834" pos:column="100"/></name></expr>}<pos:position pos:line="834" pos:column="101"/></block></expr></argument>)<pos:position pos:line="834" pos:column="102"/></argument_list></call></expr>;<pos:position pos:line="834" pos:column="103"/></expr_stmt>
                    <return pos:line="835" pos:column="21">return <expr><literal type="boolean" pos:line="835" pos:column="28">false<pos:position pos:line="835" pos:column="33"/></literal></expr>;<pos:position pos:line="835" pos:column="34"/></return>
                }<pos:position pos:line="836" pos:column="18"/></block></then></if></block></for>
            <return pos:line="837" pos:column="13">return <expr><literal type="boolean" pos:line="837" pos:column="20">true<pos:position pos:line="837" pos:column="24"/></literal></expr>;<pos:position pos:line="837" pos:column="25"/></return>
        }<pos:position pos:line="838" pos:column="10"/></block></function>
    }<pos:position pos:line="839" pos:column="6"/></block></class>

    <comment type="block" format="javadoc" pos:line="841" pos:column="5">/**
     * get the fingerprints associated with this build
     *
     * @return never null
     */</comment>
    <function><annotation pos:line="846" pos:column="5">@<name pos:line="846" pos:column="6">Exported<pos:position pos:line="846" pos:column="14"/></name><argument_list pos:line="846" pos:column="14">(<argument><expr><name pos:line="846" pos:column="15">name<pos:position pos:line="846" pos:column="19"/></name> <operator pos:line="846" pos:column="20">=<pos:position pos:line="846" pos:column="21"/></operator> <literal type="string" pos:line="846" pos:column="22">"fingerprint"<pos:position pos:line="846" pos:column="35"/></literal></expr></argument>, <argument><expr><name pos:line="846" pos:column="37">inline<pos:position pos:line="846" pos:column="43"/></name> <operator pos:line="846" pos:column="44">=<pos:position pos:line="846" pos:column="45"/></operator> <literal type="boolean" pos:line="846" pos:column="46">true<pos:position pos:line="846" pos:column="50"/></literal></expr></argument>, <argument><expr><name pos:line="846" pos:column="52">visibility<pos:position pos:line="846" pos:column="62"/></name> <operator pos:line="846" pos:column="63">=<pos:position pos:line="846" pos:column="64"/></operator> <operator pos:line="846" pos:column="65">-<pos:position pos:line="846" pos:column="66"/></operator><literal type="number" pos:line="846" pos:column="66">1<pos:position pos:line="846" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="846" pos:column="68"/></argument_list></annotation>
    <specifier pos:line="847" pos:column="5">public<pos:position pos:line="847" pos:column="11"/></specifier> <type><name><name pos:line="847" pos:column="12">Collection<pos:position pos:line="847" pos:column="22"/></name><argument_list type="generic" pos:line="847" pos:column="22">&lt;<argument><name pos:line="847" pos:column="23">Fingerprint<pos:position pos:line="847" pos:column="34"/></name></argument>&gt;<pos:position pos:line="847" pos:column="38"/></argument_list></name></type> <name pos:line="847" pos:column="36">getBuildFingerprints<pos:position pos:line="847" pos:column="56"/></name><parameter_list pos:line="847" pos:column="56">()<pos:position pos:line="847" pos:column="58"/></parameter_list> <block pos:line="847" pos:column="59">{
        <decl_stmt><decl><type><name pos:line="848" pos:column="9">FingerprintAction<pos:position pos:line="848" pos:column="26"/></name></type> <name pos:line="848" pos:column="27">fingerprintAction<pos:position pos:line="848" pos:column="44"/></name> <init pos:line="848" pos:column="45">= <expr><call><name pos:line="848" pos:column="47">getAction<pos:position pos:line="848" pos:column="56"/></name><argument_list pos:line="848" pos:column="56">(<argument><expr><name><name pos:line="848" pos:column="57">FingerprintAction<pos:position pos:line="848" pos:column="74"/></name><operator pos:line="848" pos:column="74">.<pos:position pos:line="848" pos:column="75"/></operator><name pos:line="848" pos:column="75">class<pos:position pos:line="848" pos:column="80"/></name></name></expr></argument>)<pos:position pos:line="848" pos:column="81"/></argument_list></call></expr></init></decl>;<pos:position pos:line="848" pos:column="82"/></decl_stmt>
        <if pos:line="849" pos:column="9">if <condition pos:line="849" pos:column="12">(<expr><name pos:line="849" pos:column="13">fingerprintAction<pos:position pos:line="849" pos:column="30"/></name> <operator pos:line="849" pos:column="31">!=<pos:position pos:line="849" pos:column="33"/></operator> <literal type="null" pos:line="849" pos:column="34">null<pos:position pos:line="849" pos:column="38"/></literal></expr>)<pos:position pos:line="849" pos:column="39"/></condition><then pos:line="849" pos:column="39"> <block pos:line="849" pos:column="40">{
            <return pos:line="850" pos:column="13">return <expr><call><name><name pos:line="850" pos:column="20">fingerprintAction<pos:position pos:line="850" pos:column="37"/></name><operator pos:line="850" pos:column="37">.<pos:position pos:line="850" pos:column="38"/></operator><name pos:line="850" pos:column="38">getFingerprints<pos:position pos:line="850" pos:column="53"/></name></name><argument_list pos:line="850" pos:column="53">()<pos:position pos:line="850" pos:column="55"/></argument_list></call><operator pos:line="850" pos:column="55">.<pos:position pos:line="850" pos:column="56"/></operator><call><name pos:line="850" pos:column="56">values<pos:position pos:line="850" pos:column="62"/></name><argument_list pos:line="850" pos:column="62">()<pos:position pos:line="850" pos:column="64"/></argument_list></call></expr>;<pos:position pos:line="850" pos:column="65"/></return>
        }<pos:position pos:line="851" pos:column="10"/></block></then></if>
        <return pos:line="852" pos:column="9">return <expr><name><name pos:line="852" pos:column="16">Collections<pos:position pos:line="852" pos:column="27"/></name><operator pos:line="852" pos:column="27">.<pos:position pos:line="852" pos:column="28"/></operator></name>&lt;<name pos:line="852" pos:column="29">Fingerprint<pos:position pos:line="852" pos:column="40"/></name><operator pos:line="852" pos:column="40">&gt;<pos:position pos:line="852" pos:column="44"/></operator><call><name pos:line="852" pos:column="41">emptyList<pos:position pos:line="852" pos:column="50"/></name><argument_list pos:line="852" pos:column="50">()<pos:position pos:line="852" pos:column="52"/></argument_list></call></expr>;<pos:position pos:line="852" pos:column="53"/></return>
    }<pos:position pos:line="853" pos:column="6"/></block></function>

	<comment type="block" pos:line="855" pos:column="2">/*
     * No need to lock the entire AbstractBuild on change set calculation
     */</comment>
    <decl_stmt><decl><specifier pos:line="858" pos:column="5">private<pos:position pos:line="858" pos:column="12"/></specifier> <specifier pos:line="858" pos:column="13">transient<pos:position pos:line="858" pos:column="22"/></specifier> <type><name pos:line="858" pos:column="23">Object<pos:position pos:line="858" pos:column="29"/></name></type> <name pos:line="858" pos:column="30">changeSetLock<pos:position pos:line="858" pos:column="43"/></name> <init pos:line="858" pos:column="44">= <expr><operator pos:line="858" pos:column="46">new<pos:position pos:line="858" pos:column="49"/></operator> <call><name pos:line="858" pos:column="50">Object<pos:position pos:line="858" pos:column="56"/></name><argument_list pos:line="858" pos:column="56">()<pos:position pos:line="858" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="858" pos:column="59"/></decl_stmt>
    
    <comment type="block" format="javadoc" pos:line="860" pos:column="5">/**
     * Gets the changes incorporated into this build.
     *
     * @return never null.
     */</comment>
    <function><annotation pos:line="865" pos:column="5">@<name pos:line="865" pos:column="6">Exported<pos:position pos:line="865" pos:column="14"/></name></annotation>
    <specifier pos:line="866" pos:column="5">public<pos:position pos:line="866" pos:column="11"/></specifier> <type><name><name pos:line="866" pos:column="12">ChangeLogSet<pos:position pos:line="866" pos:column="24"/></name><argument_list type="generic" pos:line="866" pos:column="24">&lt;<argument><name pos:line="866" pos:column="25">?<pos:position pos:line="866" pos:column="26"/></name> <extends pos:line="866" pos:column="27">extends <name pos:line="866" pos:column="35">Entry<pos:position pos:line="866" pos:column="40"/></name></extends></argument>&gt;<pos:position pos:line="866" pos:column="44"/></argument_list></name></type> <name pos:line="866" pos:column="42">getChangeSet<pos:position pos:line="866" pos:column="54"/></name><parameter_list pos:line="866" pos:column="54">()<pos:position pos:line="866" pos:column="56"/></parameter_list> <block pos:line="866" pos:column="57">{
        <synchronized pos:line="867" pos:column="9">synchronized <init pos:line="867" pos:column="22">(<expr><name pos:line="867" pos:column="23">changeSetLock<pos:position pos:line="867" pos:column="36"/></name></expr>)<pos:position pos:line="867" pos:column="37"/></init> <block pos:line="867" pos:column="38">{
            <if pos:line="868" pos:column="13">if <condition pos:line="868" pos:column="16">(<expr><name pos:line="868" pos:column="17">scm<pos:position pos:line="868" pos:column="20"/></name><operator pos:line="868" pos:column="20">==<pos:position pos:line="868" pos:column="22"/></operator><literal type="null" pos:line="868" pos:column="22">null<pos:position pos:line="868" pos:column="26"/></literal></expr>)<pos:position pos:line="868" pos:column="27"/></condition><then pos:line="868" pos:column="27"> <block pos:line="868" pos:column="28">{
                <expr_stmt><expr><name pos:line="869" pos:column="17">scm<pos:position pos:line="869" pos:column="20"/></name> <operator pos:line="869" pos:column="21">=<pos:position pos:line="869" pos:column="22"/></operator> <name><name pos:line="869" pos:column="23">NullChangeLogParser<pos:position pos:line="869" pos:column="42"/></name><operator pos:line="869" pos:column="42">.<pos:position pos:line="869" pos:column="43"/></operator><name pos:line="869" pos:column="43">INSTANCE<pos:position pos:line="869" pos:column="51"/></name></name></expr>;<pos:position pos:line="869" pos:column="52"/></expr_stmt>                
            }<pos:position pos:line="870" pos:column="14"/></block></then></if>
        }<pos:position pos:line="871" pos:column="10"/></block></synchronized>

        <decl_stmt><decl><type><name><name pos:line="873" pos:column="9">ChangeLogSet<pos:position pos:line="873" pos:column="21"/></name><argument_list type="generic" pos:line="873" pos:column="21">&lt;<argument><name pos:line="873" pos:column="22">?<pos:position pos:line="873" pos:column="23"/></name> <extends pos:line="873" pos:column="24">extends <name pos:line="873" pos:column="32">Entry<pos:position pos:line="873" pos:column="37"/></name></extends></argument>&gt;<pos:position pos:line="873" pos:column="41"/></argument_list></name></type> <name pos:line="873" pos:column="39">cs<pos:position pos:line="873" pos:column="41"/></name> <init pos:line="873" pos:column="42">= <expr><literal type="null" pos:line="873" pos:column="44">null<pos:position pos:line="873" pos:column="48"/></literal></expr></init></decl>;<pos:position pos:line="873" pos:column="49"/></decl_stmt>
        <if pos:line="874" pos:column="9">if <condition pos:line="874" pos:column="12">(<expr><name pos:line="874" pos:column="13">changeSet<pos:position pos:line="874" pos:column="22"/></name><operator pos:line="874" pos:column="22">!=<pos:position pos:line="874" pos:column="24"/></operator><literal type="null" pos:line="874" pos:column="24">null<pos:position pos:line="874" pos:column="28"/></literal></expr>)<pos:position pos:line="874" pos:column="29"/></condition><then pos:line="874" pos:column="29">
            <block type="pseudo"><expr_stmt><expr><name pos:line="875" pos:column="13">cs<pos:position pos:line="875" pos:column="15"/></name> <operator pos:line="875" pos:column="16">=<pos:position pos:line="875" pos:column="17"/></operator> <call><name><name pos:line="875" pos:column="18">changeSet<pos:position pos:line="875" pos:column="27"/></name><operator pos:line="875" pos:column="27">.<pos:position pos:line="875" pos:column="28"/></operator><name pos:line="875" pos:column="28">get<pos:position pos:line="875" pos:column="31"/></name></name><argument_list pos:line="875" pos:column="31">()<pos:position pos:line="875" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="875" pos:column="34"/></expr_stmt></block></then></if>

        <if pos:line="877" pos:column="9">if <condition pos:line="877" pos:column="12">(<expr><name pos:line="877" pos:column="13">cs<pos:position pos:line="877" pos:column="15"/></name><operator pos:line="877" pos:column="15">==<pos:position pos:line="877" pos:column="17"/></operator><literal type="null" pos:line="877" pos:column="17">null<pos:position pos:line="877" pos:column="21"/></literal></expr>)<pos:position pos:line="877" pos:column="22"/></condition><then pos:line="877" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><name pos:line="878" pos:column="13">cs<pos:position pos:line="878" pos:column="15"/></name> <operator pos:line="878" pos:column="16">=<pos:position pos:line="878" pos:column="17"/></operator> <call><name pos:line="878" pos:column="18">calcChangeSet<pos:position pos:line="878" pos:column="31"/></name><argument_list pos:line="878" pos:column="31">()<pos:position pos:line="878" pos:column="33"/></argument_list></call></expr>;<pos:position pos:line="878" pos:column="34"/></expr_stmt></block></then></if>

        <comment type="line" pos:line="880" pos:column="9">// defensive check. if the calculation fails (such as through an exception),</comment>
        <comment type="line" pos:line="881" pos:column="9">// set a dummy value so that it'll work the next time. the exception will</comment>
        <comment type="line" pos:line="882" pos:column="9">// be still reported, giving the plugin developer an opportunity to fix it.</comment>
        <if pos:line="883" pos:column="9">if <condition pos:line="883" pos:column="12">(<expr><name pos:line="883" pos:column="13">cs<pos:position pos:line="883" pos:column="15"/></name><operator pos:line="883" pos:column="15">==<pos:position pos:line="883" pos:column="17"/></operator><literal type="null" pos:line="883" pos:column="17">null<pos:position pos:line="883" pos:column="21"/></literal></expr>)<pos:position pos:line="883" pos:column="22"/></condition><then pos:line="883" pos:column="22">
            <block type="pseudo"><expr_stmt><expr><name pos:line="884" pos:column="13">cs<pos:position pos:line="884" pos:column="15"/></name> <operator pos:line="884" pos:column="16">=<pos:position pos:line="884" pos:column="17"/></operator> <call><name><name pos:line="884" pos:column="18">ChangeLogSet<pos:position pos:line="884" pos:column="30"/></name><operator pos:line="884" pos:column="30">.<pos:position pos:line="884" pos:column="31"/></operator><name pos:line="884" pos:column="31">createEmpty<pos:position pos:line="884" pos:column="42"/></name></name><argument_list pos:line="884" pos:column="42">(<argument><expr><name pos:line="884" pos:column="43">this<pos:position pos:line="884" pos:column="47"/></name></expr></argument>)<pos:position pos:line="884" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="884" pos:column="49"/></expr_stmt></block></then></if>

        <expr_stmt><expr><name pos:line="886" pos:column="9">changeSet<pos:position pos:line="886" pos:column="18"/></name> <operator pos:line="886" pos:column="19">=<pos:position pos:line="886" pos:column="20"/></operator> <ternary><condition><expr><operator pos:line="886" pos:column="21">new<pos:position pos:line="886" pos:column="24"/></operator> <call><name><name pos:line="886" pos:column="25">WeakReference<pos:position pos:line="886" pos:column="38"/></name><argument_list type="generic" pos:line="886" pos:column="38">&lt;<argument><name><name pos:line="886" pos:column="39">ChangeLogSet<pos:position pos:line="886" pos:column="51"/></name><argument_list type="generic" pos:line="886" pos:column="51">&lt;<argument><name pos:line="886" pos:column="52">?<pos:position pos:line="886" pos:column="53"/></name> <extends pos:line="886" pos:column="54">extends <name pos:line="886" pos:column="62">Entry<pos:position pos:line="886" pos:column="67"/></name></extends></argument>&gt;<pos:position pos:line="886" pos:column="71"/></argument_list></name></argument>&gt;<pos:position pos:line="886" pos:column="72"/></argument_list></name><argument_list pos:line="886" pos:column="69">(<argument><expr><name pos:line="886" pos:column="70">cs<pos:position pos:line="886" pos:column="72"/></name></expr></argument>)<pos:position pos:line="886" pos:column="73"/></argument_list></call></expr></condition></ternary></expr>;<pos:position pos:line="886" pos:column="74"/></expr_stmt>
        <return pos:line="887" pos:column="9">return <expr><name pos:line="887" pos:column="16">cs<pos:position pos:line="887" pos:column="18"/></name></expr>;<pos:position pos:line="887" pos:column="19"/></return>
    }<pos:position pos:line="888" pos:column="6"/></block></function>

    <function><annotation pos:line="890" pos:column="5">@<name pos:line="890" pos:column="6">Restricted<pos:position pos:line="890" pos:column="16"/></name><argument_list pos:line="890" pos:column="16">(<argument><expr><name><name pos:line="890" pos:column="17">DoNotUse<pos:position pos:line="890" pos:column="25"/></name><operator pos:line="890" pos:column="25">.<pos:position pos:line="890" pos:column="26"/></operator><name pos:line="890" pos:column="26">class<pos:position pos:line="890" pos:column="31"/></name></name></expr></argument>)<pos:position pos:line="890" pos:column="32"/></argument_list></annotation> <comment type="line" pos:line="890" pos:column="33">// for project-changes.jelly</comment>
    <specifier pos:line="891" pos:column="5">public<pos:position pos:line="891" pos:column="11"/></specifier> <type><name><name pos:line="891" pos:column="12">List<pos:position pos:line="891" pos:column="16"/></name><argument_list type="generic" pos:line="891" pos:column="16">&lt;<argument><name><name pos:line="891" pos:column="17">ChangeLogSet<pos:position pos:line="891" pos:column="29"/></name><argument_list type="generic" pos:line="891" pos:column="29">&lt;<argument><name pos:line="891" pos:column="30">?<pos:position pos:line="891" pos:column="31"/></name> <extends pos:line="891" pos:column="32">extends <name pos:line="891" pos:column="40">ChangeLogSet<pos:position pos:line="891" pos:column="52"/></name><operator pos:line="891" pos:column="52">.<pos:position pos:line="891" pos:column="53"/></operator><name pos:line="891" pos:column="53">Entry<pos:position pos:line="891" pos:column="58"/></name></extends></argument>&gt;<pos:position pos:line="891" pos:column="62"/></argument_list></name></argument>&gt;<pos:position pos:line="891" pos:column="63"/></argument_list></name></type> <name pos:line="891" pos:column="61">getChangeSets<pos:position pos:line="891" pos:column="74"/></name><parameter_list pos:line="891" pos:column="74">()<pos:position pos:line="891" pos:column="76"/></parameter_list> <block pos:line="891" pos:column="77">{
        <decl_stmt><decl><type><name><name pos:line="892" pos:column="9">ChangeLogSet<pos:position pos:line="892" pos:column="21"/></name><argument_list type="generic" pos:line="892" pos:column="21">&lt;<argument><name pos:line="892" pos:column="22">?<pos:position pos:line="892" pos:column="23"/></name> <extends pos:line="892" pos:column="24">extends <name pos:line="892" pos:column="32">Entry<pos:position pos:line="892" pos:column="37"/></name></extends></argument>&gt;<pos:position pos:line="892" pos:column="41"/></argument_list></name></type> <name pos:line="892" pos:column="39">cs<pos:position pos:line="892" pos:column="41"/></name> <init pos:line="892" pos:column="42">= <expr><call><name pos:line="892" pos:column="44">getChangeSet<pos:position pos:line="892" pos:column="56"/></name><argument_list pos:line="892" pos:column="56">()<pos:position pos:line="892" pos:column="58"/></argument_list></call></expr></init></decl>;<pos:position pos:line="892" pos:column="59"/></decl_stmt>
        <return pos:line="893" pos:column="9">return <expr><ternary><condition><expr><call><name><name pos:line="893" pos:column="16">cs<pos:position pos:line="893" pos:column="18"/></name><operator pos:line="893" pos:column="18">.<pos:position pos:line="893" pos:column="19"/></operator><name pos:line="893" pos:column="19">isEmptySet<pos:position pos:line="893" pos:column="29"/></name></name><argument_list pos:line="893" pos:column="29">()<pos:position pos:line="893" pos:column="31"/></argument_list></call></expr> ?<pos:position pos:line="893" pos:column="33"/></condition><then pos:line="893" pos:column="33"> <expr><ternary><condition><expr><name><name pos:line="893" pos:column="34">Collections<pos:position pos:line="893" pos:column="45"/></name><operator pos:line="893" pos:column="45">.<pos:position pos:line="893" pos:column="46"/></operator></name>&lt;<name><name pos:line="893" pos:column="47">ChangeLogSet<pos:position pos:line="893" pos:column="59"/></name><argument_list type="generic" pos:line="893" pos:column="59">&lt;<argument><name pos:line="893" pos:column="60">?<pos:position pos:line="893" pos:column="61"/></name> <extends pos:line="893" pos:column="62">extends <name pos:line="893" pos:column="70">ChangeLogSet<pos:position pos:line="893" pos:column="82"/></name><operator pos:line="893" pos:column="82">.<pos:position pos:line="893" pos:column="83"/></operator><name pos:line="893" pos:column="83">Entry<pos:position pos:line="893" pos:column="88"/></name></extends></argument>&gt;<pos:position pos:line="893" pos:column="92"/></argument_list></name><operator pos:line="893" pos:column="89">&gt;<pos:position pos:line="893" pos:column="93"/></operator><call><name pos:line="893" pos:column="90">emptyList<pos:position pos:line="893" pos:column="99"/></name><argument_list pos:line="893" pos:column="99">()<pos:position pos:line="893" pos:column="101"/></argument_list></call></expr></condition></ternary></expr> <pos:position pos:line="893" pos:column="102"/></then><else pos:line="893" pos:column="102">: <expr><ternary><condition><expr><name><name pos:line="893" pos:column="104">Collections<pos:position pos:line="893" pos:column="115"/></name><operator pos:line="893" pos:column="115">.<pos:position pos:line="893" pos:column="116"/></operator></name>&lt;<name><name pos:line="893" pos:column="117">ChangeLogSet<pos:position pos:line="893" pos:column="129"/></name><argument_list type="generic" pos:line="893" pos:column="129">&lt;<argument><name pos:line="893" pos:column="130">?<pos:position pos:line="893" pos:column="131"/></name> <extends pos:line="893" pos:column="132">extends <name pos:line="893" pos:column="140">ChangeLogSet<pos:position pos:line="893" pos:column="152"/></name><operator pos:line="893" pos:column="152">.<pos:position pos:line="893" pos:column="153"/></operator><name pos:line="893" pos:column="153">Entry<pos:position pos:line="893" pos:column="158"/></name></extends></argument>&gt;<pos:position pos:line="893" pos:column="162"/></argument_list></name><operator pos:line="893" pos:column="159">&gt;<pos:position pos:line="893" pos:column="163"/></operator><call><name pos:line="893" pos:column="160">singletonList<pos:position pos:line="893" pos:column="173"/></name><argument_list pos:line="893" pos:column="173">(<argument><expr><name pos:line="893" pos:column="174">cs<pos:position pos:line="893" pos:column="176"/></name></expr></argument>)<pos:position pos:line="893" pos:column="177"/></argument_list></call></expr></condition></ternary></expr></else></ternary></expr>;<pos:position pos:line="893" pos:column="178"/></return>
    }<pos:position pos:line="894" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="896" pos:column="5">/**
     * Returns true if the changelog is already computed.
     */</comment>
    <function><specifier pos:line="899" pos:column="5">public<pos:position pos:line="899" pos:column="11"/></specifier> <type><name pos:line="899" pos:column="12">boolean<pos:position pos:line="899" pos:column="19"/></name></type> <name pos:line="899" pos:column="20">hasChangeSetComputed<pos:position pos:line="899" pos:column="40"/></name><parameter_list pos:line="899" pos:column="40">()<pos:position pos:line="899" pos:column="42"/></parameter_list> <block pos:line="899" pos:column="43">{
        <decl_stmt><decl><type><name pos:line="900" pos:column="9">File<pos:position pos:line="900" pos:column="13"/></name></type> <name pos:line="900" pos:column="14">changelogFile<pos:position pos:line="900" pos:column="27"/></name> <init pos:line="900" pos:column="28">= <expr><operator pos:line="900" pos:column="30">new<pos:position pos:line="900" pos:column="33"/></operator> <call><name pos:line="900" pos:column="34">File<pos:position pos:line="900" pos:column="38"/></name><argument_list pos:line="900" pos:column="38">(<argument><expr><call><name pos:line="900" pos:column="39">getRootDir<pos:position pos:line="900" pos:column="49"/></name><argument_list pos:line="900" pos:column="49">()<pos:position pos:line="900" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="900" pos:column="53">"changelog.xml"<pos:position pos:line="900" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="900" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="900" pos:column="70"/></decl_stmt>
        <return pos:line="901" pos:column="9">return <expr><call><name><name pos:line="901" pos:column="16">changelogFile<pos:position pos:line="901" pos:column="29"/></name><operator pos:line="901" pos:column="29">.<pos:position pos:line="901" pos:column="30"/></operator><name pos:line="901" pos:column="30">exists<pos:position pos:line="901" pos:column="36"/></name></name><argument_list pos:line="901" pos:column="36">()<pos:position pos:line="901" pos:column="38"/></argument_list></call></expr>;<pos:position pos:line="901" pos:column="39"/></return>
    }<pos:position pos:line="902" pos:column="6"/></block></function>

    <function><specifier pos:line="904" pos:column="5">private<pos:position pos:line="904" pos:column="12"/></specifier> <type><name><name pos:line="904" pos:column="13">ChangeLogSet<pos:position pos:line="904" pos:column="25"/></name><argument_list type="generic" pos:line="904" pos:column="25">&lt;<argument><name pos:line="904" pos:column="26">?<pos:position pos:line="904" pos:column="27"/></name> <extends pos:line="904" pos:column="28">extends <name pos:line="904" pos:column="36">Entry<pos:position pos:line="904" pos:column="41"/></name></extends></argument>&gt;<pos:position pos:line="904" pos:column="45"/></argument_list></name></type> <name pos:line="904" pos:column="43">calcChangeSet<pos:position pos:line="904" pos:column="56"/></name><parameter_list pos:line="904" pos:column="56">()<pos:position pos:line="904" pos:column="58"/></parameter_list> <block pos:line="904" pos:column="59">{
        <decl_stmt><decl><type><name pos:line="905" pos:column="9">File<pos:position pos:line="905" pos:column="13"/></name></type> <name pos:line="905" pos:column="14">changelogFile<pos:position pos:line="905" pos:column="27"/></name> <init pos:line="905" pos:column="28">= <expr><operator pos:line="905" pos:column="30">new<pos:position pos:line="905" pos:column="33"/></operator> <call><name pos:line="905" pos:column="34">File<pos:position pos:line="905" pos:column="38"/></name><argument_list pos:line="905" pos:column="38">(<argument><expr><call><name pos:line="905" pos:column="39">getRootDir<pos:position pos:line="905" pos:column="49"/></name><argument_list pos:line="905" pos:column="49">()<pos:position pos:line="905" pos:column="51"/></argument_list></call></expr></argument>, <argument><expr><literal type="string" pos:line="905" pos:column="53">"changelog.xml"<pos:position pos:line="905" pos:column="68"/></literal></expr></argument>)<pos:position pos:line="905" pos:column="69"/></argument_list></call></expr></init></decl>;<pos:position pos:line="905" pos:column="70"/></decl_stmt>
        <if pos:line="906" pos:column="9">if <condition pos:line="906" pos:column="12">(<expr><operator pos:line="906" pos:column="13">!<pos:position pos:line="906" pos:column="14"/></operator><call><name><name pos:line="906" pos:column="14">changelogFile<pos:position pos:line="906" pos:column="27"/></name><operator pos:line="906" pos:column="27">.<pos:position pos:line="906" pos:column="28"/></operator><name pos:line="906" pos:column="28">exists<pos:position pos:line="906" pos:column="34"/></name></name><argument_list pos:line="906" pos:column="34">()<pos:position pos:line="906" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="906" pos:column="37"/></condition><then pos:line="906" pos:column="37">
            <block type="pseudo"><return pos:line="907" pos:column="13">return <expr><call><name><name pos:line="907" pos:column="20">ChangeLogSet<pos:position pos:line="907" pos:column="32"/></name><operator pos:line="907" pos:column="32">.<pos:position pos:line="907" pos:column="33"/></operator><name pos:line="907" pos:column="33">createEmpty<pos:position pos:line="907" pos:column="44"/></name></name><argument_list pos:line="907" pos:column="44">(<argument><expr><name pos:line="907" pos:column="45">this<pos:position pos:line="907" pos:column="49"/></name></expr></argument>)<pos:position pos:line="907" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="907" pos:column="51"/></return></block></then></if>

        <try pos:line="909" pos:column="9">try <block pos:line="909" pos:column="13">{
            <return pos:line="910" pos:column="13">return <expr><call><name><name pos:line="910" pos:column="20">scm<pos:position pos:line="910" pos:column="23"/></name><operator pos:line="910" pos:column="23">.<pos:position pos:line="910" pos:column="24"/></operator><name pos:line="910" pos:column="24">parse<pos:position pos:line="910" pos:column="29"/></name></name><argument_list pos:line="910" pos:column="29">(<argument><expr><name pos:line="910" pos:column="30">this<pos:position pos:line="910" pos:column="34"/></name></expr></argument>,<argument><expr><name pos:line="910" pos:column="35">changelogFile<pos:position pos:line="910" pos:column="48"/></name></expr></argument>)<pos:position pos:line="910" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="910" pos:column="50"/></return>
        }<pos:position pos:line="911" pos:column="10"/></block> <catch pos:line="911" pos:column="11">catch <parameter_list pos:line="911" pos:column="17">(<parameter><decl><type><name pos:line="911" pos:column="18">IOException<pos:position pos:line="911" pos:column="29"/></name></type> <name pos:line="911" pos:column="30">e<pos:position pos:line="911" pos:column="31"/></name></decl></parameter>)<pos:position pos:line="911" pos:column="32"/></parameter_list> <block pos:line="911" pos:column="33">{
            <expr_stmt><expr><call><name><name pos:line="912" pos:column="13">LOGGER<pos:position pos:line="912" pos:column="19"/></name><operator pos:line="912" pos:column="19">.<pos:position pos:line="912" pos:column="20"/></operator><name pos:line="912" pos:column="20">log<pos:position pos:line="912" pos:column="23"/></name></name><argument_list pos:line="912" pos:column="23">(<argument><expr><name pos:line="912" pos:column="24">WARNING<pos:position pos:line="912" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="912" pos:column="33">"Failed to parse "<pos:position pos:line="912" pos:column="51"/></literal><operator pos:line="912" pos:column="51">+<pos:position pos:line="912" pos:column="52"/></operator><name pos:line="912" pos:column="52">changelogFile<pos:position pos:line="912" pos:column="65"/></name></expr></argument>,<argument><expr><name pos:line="912" pos:column="66">e<pos:position pos:line="912" pos:column="67"/></name></expr></argument>)<pos:position pos:line="912" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="912" pos:column="69"/></expr_stmt>
        }<pos:position pos:line="913" pos:column="10"/></block></catch> <catch pos:line="913" pos:column="11">catch <parameter_list pos:line="913" pos:column="17">(<parameter><decl><type><name pos:line="913" pos:column="18">SAXException<pos:position pos:line="913" pos:column="30"/></name></type> <name pos:line="913" pos:column="31">e<pos:position pos:line="913" pos:column="32"/></name></decl></parameter>)<pos:position pos:line="913" pos:column="33"/></parameter_list> <block pos:line="913" pos:column="34">{
            <expr_stmt><expr><call><name><name pos:line="914" pos:column="13">LOGGER<pos:position pos:line="914" pos:column="19"/></name><operator pos:line="914" pos:column="19">.<pos:position pos:line="914" pos:column="20"/></operator><name pos:line="914" pos:column="20">log<pos:position pos:line="914" pos:column="23"/></name></name><argument_list pos:line="914" pos:column="23">(<argument><expr><name pos:line="914" pos:column="24">WARNING<pos:position pos:line="914" pos:column="31"/></name></expr></argument>, <argument><expr><literal type="string" pos:line="914" pos:column="33">"Failed to parse "<pos:position pos:line="914" pos:column="51"/></literal><operator pos:line="914" pos:column="51">+<pos:position pos:line="914" pos:column="52"/></operator><name pos:line="914" pos:column="52">changelogFile<pos:position pos:line="914" pos:column="65"/></name></expr></argument>,<argument><expr><name pos:line="914" pos:column="66">e<pos:position pos:line="914" pos:column="67"/></name></expr></argument>)<pos:position pos:line="914" pos:column="68"/></argument_list></call></expr>;<pos:position pos:line="914" pos:column="69"/></expr_stmt>
        }<pos:position pos:line="915" pos:column="10"/></block></catch></try>
        <return pos:line="916" pos:column="9">return <expr><call><name><name pos:line="916" pos:column="16">ChangeLogSet<pos:position pos:line="916" pos:column="28"/></name><operator pos:line="916" pos:column="28">.<pos:position pos:line="916" pos:column="29"/></operator><name pos:line="916" pos:column="29">createEmpty<pos:position pos:line="916" pos:column="40"/></name></name><argument_list pos:line="916" pos:column="40">(<argument><expr><name pos:line="916" pos:column="41">this<pos:position pos:line="916" pos:column="45"/></name></expr></argument>)<pos:position pos:line="916" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="916" pos:column="47"/></return>
    }<pos:position pos:line="917" pos:column="6"/></block></function>

    <function><annotation pos:line="919" pos:column="5">@<name pos:line="919" pos:column="6">Override<pos:position pos:line="919" pos:column="14"/></name></annotation>
    <specifier pos:line="920" pos:column="5">public<pos:position pos:line="920" pos:column="11"/></specifier> <type><name pos:line="920" pos:column="12">EnvVars<pos:position pos:line="920" pos:column="19"/></name></type> <name pos:line="920" pos:column="20">getEnvironment<pos:position pos:line="920" pos:column="34"/></name><parameter_list pos:line="920" pos:column="34">(<parameter><decl><type><name pos:line="920" pos:column="35">TaskListener<pos:position pos:line="920" pos:column="47"/></name></type> <name pos:line="920" pos:column="48">log<pos:position pos:line="920" pos:column="51"/></name></decl></parameter>)<pos:position pos:line="920" pos:column="52"/></parameter_list> <throws pos:line="920" pos:column="53">throws <argument><expr><name pos:line="920" pos:column="60">IOException<pos:position pos:line="920" pos:column="71"/></name></expr></argument>, <argument><expr><name pos:line="920" pos:column="73">InterruptedException<pos:position pos:line="920" pos:column="93"/></name></expr></argument></throws> <block pos:line="920" pos:column="94">{
        <decl_stmt><decl><type><name pos:line="921" pos:column="9">EnvVars<pos:position pos:line="921" pos:column="16"/></name></type> <name pos:line="921" pos:column="17">env<pos:position pos:line="921" pos:column="20"/></name> <init pos:line="921" pos:column="21">= <expr><call><name><name pos:line="921" pos:column="23">super<pos:position pos:line="921" pos:column="28"/></name><operator pos:line="921" pos:column="28">.<pos:position pos:line="921" pos:column="29"/></operator><name pos:line="921" pos:column="29">getEnvironment<pos:position pos:line="921" pos:column="43"/></name></name><argument_list pos:line="921" pos:column="43">(<argument><expr><name pos:line="921" pos:column="44">log<pos:position pos:line="921" pos:column="47"/></name></expr></argument>)<pos:position pos:line="921" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="921" pos:column="49"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="922" pos:column="9">FilePath<pos:position pos:line="922" pos:column="17"/></name></type> <name pos:line="922" pos:column="18">ws<pos:position pos:line="922" pos:column="20"/></name> <init pos:line="922" pos:column="21">= <expr><call><name pos:line="922" pos:column="23">getWorkspace<pos:position pos:line="922" pos:column="35"/></name><argument_list pos:line="922" pos:column="35">()<pos:position pos:line="922" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="922" pos:column="38"/></decl_stmt>
        <if pos:line="923" pos:column="9">if <condition pos:line="923" pos:column="12">(<expr><name pos:line="923" pos:column="13">ws<pos:position pos:line="923" pos:column="15"/></name><operator pos:line="923" pos:column="15">!=<pos:position pos:line="923" pos:column="17"/></operator><literal type="null" pos:line="923" pos:column="17">null<pos:position pos:line="923" pos:column="21"/></literal></expr>)<pos:position pos:line="923" pos:column="22"/></condition><then pos:line="923" pos:column="22">   <comment type="line" pos:line="923" pos:column="25">// if this is done very early on in the build, workspace may not be decided yet. see HUDSON-3997</comment>
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="924" pos:column="13">env<pos:position pos:line="924" pos:column="16"/></name><operator pos:line="924" pos:column="16">.<pos:position pos:line="924" pos:column="17"/></operator><name pos:line="924" pos:column="17">put<pos:position pos:line="924" pos:column="20"/></name></name><argument_list pos:line="924" pos:column="20">(<argument><expr><literal type="string" pos:line="924" pos:column="21">"WORKSPACE"<pos:position pos:line="924" pos:column="32"/></literal></expr></argument>, <argument><expr><call><name><name pos:line="924" pos:column="34">ws<pos:position pos:line="924" pos:column="36"/></name><operator pos:line="924" pos:column="36">.<pos:position pos:line="924" pos:column="37"/></operator><name pos:line="924" pos:column="37">getRemote<pos:position pos:line="924" pos:column="46"/></name></name><argument_list pos:line="924" pos:column="46">()<pos:position pos:line="924" pos:column="48"/></argument_list></call></expr></argument>)<pos:position pos:line="924" pos:column="49"/></argument_list></call></expr>;<pos:position pos:line="924" pos:column="50"/></expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name pos:line="926" pos:column="9">project<pos:position pos:line="926" pos:column="16"/></name><operator pos:line="926" pos:column="16">.<pos:position pos:line="926" pos:column="17"/></operator><name pos:line="926" pos:column="17">getScm<pos:position pos:line="926" pos:column="23"/></name></name><argument_list pos:line="926" pos:column="23">()<pos:position pos:line="926" pos:column="25"/></argument_list></call><operator pos:line="926" pos:column="25">.<pos:position pos:line="926" pos:column="26"/></operator><call><name pos:line="926" pos:column="26">buildEnvVars<pos:position pos:line="926" pos:column="38"/></name><argument_list pos:line="926" pos:column="38">(<argument><expr><name pos:line="926" pos:column="39">this<pos:position pos:line="926" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="926" pos:column="44">env<pos:position pos:line="926" pos:column="47"/></name></expr></argument>)<pos:position pos:line="926" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="926" pos:column="49"/></expr_stmt>

        <if pos:line="928" pos:column="9">if <condition pos:line="928" pos:column="12">(<expr><name pos:line="928" pos:column="13">buildEnvironments<pos:position pos:line="928" pos:column="30"/></name><operator pos:line="928" pos:column="30">!=<pos:position pos:line="928" pos:column="32"/></operator><literal type="null" pos:line="928" pos:column="32">null<pos:position pos:line="928" pos:column="36"/></literal></expr>)<pos:position pos:line="928" pos:column="37"/></condition><then pos:line="928" pos:column="37">
            <block type="pseudo"><for pos:line="929" pos:column="13">for <control pos:line="929" pos:column="17">(<init><decl><type><name pos:line="929" pos:column="18">Environment<pos:position pos:line="929" pos:column="29"/></name></type> <name pos:line="929" pos:column="30">e<pos:position pos:line="929" pos:column="31"/></name> <range pos:line="929" pos:column="32">: <expr><name pos:line="929" pos:column="34">buildEnvironments<pos:position pos:line="929" pos:column="51"/></name></expr></range></decl></init>)<pos:position pos:line="929" pos:column="52"/></control>
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="930" pos:column="17">e<pos:position pos:line="930" pos:column="18"/></name><operator pos:line="930" pos:column="18">.<pos:position pos:line="930" pos:column="19"/></operator><name pos:line="930" pos:column="19">buildEnvVars<pos:position pos:line="930" pos:column="31"/></name></name><argument_list pos:line="930" pos:column="31">(<argument><expr><name pos:line="930" pos:column="32">env<pos:position pos:line="930" pos:column="35"/></name></expr></argument>)<pos:position pos:line="930" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="930" pos:column="37"/></expr_stmt></block></for></block></then></if>

        <for pos:line="932" pos:column="9">for <control pos:line="932" pos:column="13">(<init><decl><type><name pos:line="932" pos:column="14">EnvironmentContributingAction<pos:position pos:line="932" pos:column="43"/></name></type> <name pos:line="932" pos:column="44">a<pos:position pos:line="932" pos:column="45"/></name> <range pos:line="932" pos:column="46">: <expr><call><name pos:line="932" pos:column="48">getActions<pos:position pos:line="932" pos:column="58"/></name><argument_list pos:line="932" pos:column="58">(<argument><expr><name><name pos:line="932" pos:column="59">EnvironmentContributingAction<pos:position pos:line="932" pos:column="88"/></name><operator pos:line="932" pos:column="88">.<pos:position pos:line="932" pos:column="89"/></operator><name pos:line="932" pos:column="89">class<pos:position pos:line="932" pos:column="94"/></name></name></expr></argument>)<pos:position pos:line="932" pos:column="95"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="932" pos:column="96"/></control>
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="933" pos:column="13">a<pos:position pos:line="933" pos:column="14"/></name><operator pos:line="933" pos:column="14">.<pos:position pos:line="933" pos:column="15"/></operator><name pos:line="933" pos:column="15">buildEnvVars<pos:position pos:line="933" pos:column="27"/></name></name><argument_list pos:line="933" pos:column="27">(<argument><expr><name pos:line="933" pos:column="28">this<pos:position pos:line="933" pos:column="32"/></name></expr></argument>,<argument><expr><name pos:line="933" pos:column="33">env<pos:position pos:line="933" pos:column="36"/></name></expr></argument>)<pos:position pos:line="933" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="933" pos:column="38"/></expr_stmt></block></for>

        <expr_stmt><expr><call><name><name pos:line="935" pos:column="9">EnvVars<pos:position pos:line="935" pos:column="16"/></name><operator pos:line="935" pos:column="16">.<pos:position pos:line="935" pos:column="17"/></operator><name pos:line="935" pos:column="17">resolve<pos:position pos:line="935" pos:column="24"/></name></name><argument_list pos:line="935" pos:column="24">(<argument><expr><name pos:line="935" pos:column="25">env<pos:position pos:line="935" pos:column="28"/></name></expr></argument>)<pos:position pos:line="935" pos:column="29"/></argument_list></call></expr>;<pos:position pos:line="935" pos:column="30"/></expr_stmt>

        <return pos:line="937" pos:column="9">return <expr><name pos:line="937" pos:column="16">env<pos:position pos:line="937" pos:column="19"/></name></expr>;<pos:position pos:line="937" pos:column="20"/></return>
    }<pos:position pos:line="938" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="940" pos:column="5">/**
     * During the build, expose the environments contributed by {@link BuildWrapper}s and others.
     * 
     * &lt;p&gt;
     * Since 1.444, executor thread that's doing the build can access mutable underlying list,
     * which allows the caller to add/remove environments. The recommended way of adding
     * environment is through {@link BuildWrapper}, but this might be handy for build steps
     * who wants to expose additional environment variables to the rest of the build.
     * 
     * @return can be empty list, but never null. Immutable.
     * @since 1.437
     */</comment>
    <function><specifier pos:line="952" pos:column="5">public<pos:position pos:line="952" pos:column="11"/></specifier> <type><name pos:line="952" pos:column="12">EnvironmentList<pos:position pos:line="952" pos:column="27"/></name></type> <name pos:line="952" pos:column="28">getEnvironments<pos:position pos:line="952" pos:column="43"/></name><parameter_list pos:line="952" pos:column="43">()<pos:position pos:line="952" pos:column="45"/></parameter_list> <block pos:line="952" pos:column="46">{
        <decl_stmt><decl><type><name pos:line="953" pos:column="9">Executor<pos:position pos:line="953" pos:column="17"/></name></type> <name pos:line="953" pos:column="18">e<pos:position pos:line="953" pos:column="19"/></name> <init pos:line="953" pos:column="20">= <expr><call><name><name pos:line="953" pos:column="22">Executor<pos:position pos:line="953" pos:column="30"/></name><operator pos:line="953" pos:column="30">.<pos:position pos:line="953" pos:column="31"/></operator><name pos:line="953" pos:column="31">currentExecutor<pos:position pos:line="953" pos:column="46"/></name></name><argument_list pos:line="953" pos:column="46">()<pos:position pos:line="953" pos:column="48"/></argument_list></call></expr></init></decl>;<pos:position pos:line="953" pos:column="49"/></decl_stmt>
        <if pos:line="954" pos:column="9">if <condition pos:line="954" pos:column="12">(<expr><name pos:line="954" pos:column="13">e<pos:position pos:line="954" pos:column="14"/></name><operator pos:line="954" pos:column="14">!=<pos:position pos:line="954" pos:column="16"/></operator><literal type="null" pos:line="954" pos:column="16">null<pos:position pos:line="954" pos:column="20"/></literal> <operator pos:line="954" pos:column="21">&amp;&amp;<pos:position pos:line="954" pos:column="31"/></operator> <call><name><name pos:line="954" pos:column="24">e<pos:position pos:line="954" pos:column="25"/></name><operator pos:line="954" pos:column="25">.<pos:position pos:line="954" pos:column="26"/></operator><name pos:line="954" pos:column="26">getCurrentExecutable<pos:position pos:line="954" pos:column="46"/></name></name><argument_list pos:line="954" pos:column="46">()<pos:position pos:line="954" pos:column="48"/></argument_list></call><operator pos:line="954" pos:column="48">==<pos:position pos:line="954" pos:column="50"/></operator><name pos:line="954" pos:column="50">this<pos:position pos:line="954" pos:column="54"/></name></expr>)<pos:position pos:line="954" pos:column="55"/></condition><then pos:line="954" pos:column="55"> <block pos:line="954" pos:column="56">{
            <if pos:line="955" pos:column="13">if <condition pos:line="955" pos:column="16">(<expr><name pos:line="955" pos:column="17">buildEnvironments<pos:position pos:line="955" pos:column="34"/></name><operator pos:line="955" pos:column="34">==<pos:position pos:line="955" pos:column="36"/></operator><literal type="null" pos:line="955" pos:column="36">null<pos:position pos:line="955" pos:column="40"/></literal></expr>)<pos:position pos:line="955" pos:column="41"/></condition><then pos:line="955" pos:column="41">    <block type="pseudo"><expr_stmt><expr><name pos:line="955" pos:column="45">buildEnvironments<pos:position pos:line="955" pos:column="62"/></name> <operator pos:line="955" pos:column="63">=<pos:position pos:line="955" pos:column="64"/></operator> <operator pos:line="955" pos:column="65">new<pos:position pos:line="955" pos:column="68"/></operator> <call><name><name pos:line="955" pos:column="69">ArrayList<pos:position pos:line="955" pos:column="78"/></name><argument_list type="generic" pos:line="955" pos:column="78">&lt;<argument><name pos:line="955" pos:column="79">Environment<pos:position pos:line="955" pos:column="90"/></name></argument>&gt;<pos:position pos:line="955" pos:column="94"/></argument_list></name><argument_list pos:line="955" pos:column="91">()<pos:position pos:line="955" pos:column="93"/></argument_list></call></expr>;<pos:position pos:line="955" pos:column="94"/></expr_stmt></block></then></if>
            <return pos:line="956" pos:column="13">return <expr><operator pos:line="956" pos:column="20">new<pos:position pos:line="956" pos:column="23"/></operator> <call><name pos:line="956" pos:column="24">EnvironmentList<pos:position pos:line="956" pos:column="39"/></name><argument_list pos:line="956" pos:column="39">(<argument><expr><name pos:line="956" pos:column="40">buildEnvironments<pos:position pos:line="956" pos:column="57"/></name></expr></argument>)<pos:position pos:line="956" pos:column="58"/></argument_list></call></expr>;<pos:position pos:line="956" pos:column="59"/></return> 
        }<pos:position pos:line="957" pos:column="10"/></block></then></if>
        
        <return pos:line="959" pos:column="9">return <expr><operator pos:line="959" pos:column="16">new<pos:position pos:line="959" pos:column="19"/></operator> <call><name pos:line="959" pos:column="20">EnvironmentList<pos:position pos:line="959" pos:column="35"/></name><argument_list pos:line="959" pos:column="35">(<argument><expr><ternary><condition><expr><name pos:line="959" pos:column="36">buildEnvironments<pos:position pos:line="959" pos:column="53"/></name><operator pos:line="959" pos:column="53">==<pos:position pos:line="959" pos:column="55"/></operator><literal type="null" pos:line="959" pos:column="55">null<pos:position pos:line="959" pos:column="59"/></literal></expr> ?<pos:position pos:line="959" pos:column="61"/></condition><then pos:line="959" pos:column="61"> <expr><name><name pos:line="959" pos:column="62">Collections<pos:position pos:line="959" pos:column="73"/></name><operator pos:line="959" pos:column="73">.<pos:position pos:line="959" pos:column="74"/></operator></name>&lt;<name pos:line="959" pos:column="75">Environment<pos:position pos:line="959" pos:column="86"/></name><operator pos:line="959" pos:column="86">&gt;<pos:position pos:line="959" pos:column="90"/></operator><call><name pos:line="959" pos:column="87">emptyList<pos:position pos:line="959" pos:column="96"/></name><argument_list pos:line="959" pos:column="96">()<pos:position pos:line="959" pos:column="98"/></argument_list></call></expr> <pos:position pos:line="959" pos:column="99"/></then><else pos:line="959" pos:column="99">: <expr><call><name><name pos:line="959" pos:column="101">ImmutableList<pos:position pos:line="959" pos:column="114"/></name><operator pos:line="959" pos:column="114">.<pos:position pos:line="959" pos:column="115"/></operator><name pos:line="959" pos:column="115">copyOf<pos:position pos:line="959" pos:column="121"/></name></name><argument_list pos:line="959" pos:column="121">(<argument><expr><name pos:line="959" pos:column="122">buildEnvironments<pos:position pos:line="959" pos:column="139"/></name></expr></argument>)<pos:position pos:line="959" pos:column="140"/></argument_list></call></expr></else></ternary></expr></argument>)<pos:position pos:line="959" pos:column="141"/></argument_list></call></expr>;<pos:position pos:line="959" pos:column="142"/></return>
    }<pos:position pos:line="960" pos:column="6"/></block></function>

    <function><specifier pos:line="962" pos:column="5">public<pos:position pos:line="962" pos:column="11"/></specifier> <type><name pos:line="962" pos:column="12">Calendar<pos:position pos:line="962" pos:column="20"/></name></type> <name pos:line="962" pos:column="21">due<pos:position pos:line="962" pos:column="24"/></name><parameter_list pos:line="962" pos:column="24">()<pos:position pos:line="962" pos:column="26"/></parameter_list> <block pos:line="962" pos:column="27">{
        <return pos:line="963" pos:column="9">return <expr><call><name pos:line="963" pos:column="16">getTimestamp<pos:position pos:line="963" pos:column="28"/></name><argument_list pos:line="963" pos:column="28">()<pos:position pos:line="963" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="963" pos:column="31"/></return>
    }<pos:position pos:line="964" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="966" pos:column="5">/**
     * {@inheritDoc}
     * The action may have a {@code summary.jelly} view containing a {@code &lt;t:summary&gt;} or other {@code &lt;tr&gt;}.
     */</comment>
    <function><annotation pos:line="970" pos:column="5">@<name pos:line="970" pos:column="6">Override<pos:position pos:line="970" pos:column="14"/></name></annotation> <specifier pos:line="970" pos:column="15">public<pos:position pos:line="970" pos:column="21"/></specifier> <type><name pos:line="970" pos:column="22">void<pos:position pos:line="970" pos:column="26"/></name></type> <name pos:line="970" pos:column="27">addAction<pos:position pos:line="970" pos:column="36"/></name><parameter_list pos:line="970" pos:column="36">(<parameter><decl><type><name pos:line="970" pos:column="37">Action<pos:position pos:line="970" pos:column="43"/></name></type> <name pos:line="970" pos:column="44">a<pos:position pos:line="970" pos:column="45"/></name></decl></parameter>)<pos:position pos:line="970" pos:column="46"/></parameter_list> <block pos:line="970" pos:column="47">{
        <expr_stmt><expr><call><name><name pos:line="971" pos:column="9">super<pos:position pos:line="971" pos:column="14"/></name><operator pos:line="971" pos:column="14">.<pos:position pos:line="971" pos:column="15"/></operator><name pos:line="971" pos:column="15">addAction<pos:position pos:line="971" pos:column="24"/></name></name><argument_list pos:line="971" pos:column="24">(<argument><expr><name pos:line="971" pos:column="25">a<pos:position pos:line="971" pos:column="26"/></name></expr></argument>)<pos:position pos:line="971" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="971" pos:column="28"/></expr_stmt>
    }<pos:position pos:line="972" pos:column="6"/></block></function>
      
    <function><annotation pos:line="974" pos:column="5">@<name pos:line="974" pos:column="6">SuppressWarnings<pos:position pos:line="974" pos:column="22"/></name><argument_list pos:line="974" pos:column="22">(<argument><expr><literal type="string" pos:line="974" pos:column="23">"deprecation"<pos:position pos:line="974" pos:column="36"/></literal></expr></argument>)<pos:position pos:line="974" pos:column="37"/></argument_list></annotation>
    <specifier pos:line="975" pos:column="5">public<pos:position pos:line="975" pos:column="11"/></specifier> <type><name><name pos:line="975" pos:column="12">List<pos:position pos:line="975" pos:column="16"/></name><argument_list type="generic" pos:line="975" pos:column="16">&lt;<argument><name pos:line="975" pos:column="17">Action<pos:position pos:line="975" pos:column="23"/></name></argument>&gt;<pos:position pos:line="975" pos:column="27"/></argument_list></name></type> <name pos:line="975" pos:column="25">getPersistentActions<pos:position pos:line="975" pos:column="45"/></name><parameter_list pos:line="975" pos:column="45">()<pos:position pos:line="975" pos:column="47"/></parameter_list><block pos:line="975" pos:column="47">{
        <return pos:line="976" pos:column="9">return <expr><call><name><name pos:line="976" pos:column="16">super<pos:position pos:line="976" pos:column="21"/></name><operator pos:line="976" pos:column="21">.<pos:position pos:line="976" pos:column="22"/></operator><name pos:line="976" pos:column="22">getActions<pos:position pos:line="976" pos:column="32"/></name></name><argument_list pos:line="976" pos:column="32">()<pos:position pos:line="976" pos:column="34"/></argument_list></call></expr>;<pos:position pos:line="976" pos:column="35"/></return>
    }<pos:position pos:line="977" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="979" pos:column="5">/**
     * Builds up a set of variable names that contain sensitive values that
     * should not be exposed. The expectation is that this set is populated with
     * keys returned by {@link #getBuildVariables()} that should have their
     * values masked for display purposes.
     *
     * @since 1.378
     */</comment>
    <function><specifier pos:line="987" pos:column="5">public<pos:position pos:line="987" pos:column="11"/></specifier> <type><name><name pos:line="987" pos:column="12">Set<pos:position pos:line="987" pos:column="15"/></name><argument_list type="generic" pos:line="987" pos:column="15">&lt;<argument><name pos:line="987" pos:column="16">String<pos:position pos:line="987" pos:column="22"/></name></argument>&gt;<pos:position pos:line="987" pos:column="26"/></argument_list></name></type> <name pos:line="987" pos:column="24">getSensitiveBuildVariables<pos:position pos:line="987" pos:column="50"/></name><parameter_list pos:line="987" pos:column="50">()<pos:position pos:line="987" pos:column="52"/></parameter_list> <block pos:line="987" pos:column="53">{
        <decl_stmt><decl><type><name><name pos:line="988" pos:column="9">Set<pos:position pos:line="988" pos:column="12"/></name><argument_list type="generic" pos:line="988" pos:column="12">&lt;<argument><name pos:line="988" pos:column="13">String<pos:position pos:line="988" pos:column="19"/></name></argument>&gt;<pos:position pos:line="988" pos:column="23"/></argument_list></name></type> <name pos:line="988" pos:column="21">s<pos:position pos:line="988" pos:column="22"/></name> <init pos:line="988" pos:column="23">= <expr><operator pos:line="988" pos:column="25">new<pos:position pos:line="988" pos:column="28"/></operator> <call><name><name pos:line="988" pos:column="29">HashSet<pos:position pos:line="988" pos:column="36"/></name><argument_list type="generic" pos:line="988" pos:column="36">&lt;<argument><name pos:line="988" pos:column="37">String<pos:position pos:line="988" pos:column="43"/></name></argument>&gt;<pos:position pos:line="988" pos:column="47"/></argument_list></name><argument_list pos:line="988" pos:column="44">()<pos:position pos:line="988" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="988" pos:column="47"/></decl_stmt>

        <decl_stmt><decl><type><name pos:line="990" pos:column="9">ParametersAction<pos:position pos:line="990" pos:column="25"/></name></type> <name pos:line="990" pos:column="26">parameters<pos:position pos:line="990" pos:column="36"/></name> <init pos:line="990" pos:column="37">= <expr><call><name pos:line="990" pos:column="39">getAction<pos:position pos:line="990" pos:column="48"/></name><argument_list pos:line="990" pos:column="48">(<argument><expr><name><name pos:line="990" pos:column="49">ParametersAction<pos:position pos:line="990" pos:column="65"/></name><operator pos:line="990" pos:column="65">.<pos:position pos:line="990" pos:column="66"/></operator><name pos:line="990" pos:column="66">class<pos:position pos:line="990" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="990" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="990" pos:column="73"/></decl_stmt>
        <if pos:line="991" pos:column="9">if <condition pos:line="991" pos:column="12">(<expr><name pos:line="991" pos:column="13">parameters<pos:position pos:line="991" pos:column="23"/></name> <operator pos:line="991" pos:column="24">!=<pos:position pos:line="991" pos:column="26"/></operator> <literal type="null" pos:line="991" pos:column="27">null<pos:position pos:line="991" pos:column="31"/></literal></expr>)<pos:position pos:line="991" pos:column="32"/></condition><then pos:line="991" pos:column="32"> <block pos:line="991" pos:column="33">{
            <for pos:line="992" pos:column="13">for <control pos:line="992" pos:column="17">(<init><decl><type><name pos:line="992" pos:column="18">ParameterValue<pos:position pos:line="992" pos:column="32"/></name></type> <name pos:line="992" pos:column="33">p<pos:position pos:line="992" pos:column="34"/></name> <range pos:line="992" pos:column="35">: <expr><name pos:line="992" pos:column="37">parameters<pos:position pos:line="992" pos:column="47"/></name></expr></range></decl></init>)<pos:position pos:line="992" pos:column="48"/></control> <block pos:line="992" pos:column="49">{
                <if pos:line="993" pos:column="17">if <condition pos:line="993" pos:column="20">(<expr><call><name><name pos:line="993" pos:column="21">p<pos:position pos:line="993" pos:column="22"/></name><operator pos:line="993" pos:column="22">.<pos:position pos:line="993" pos:column="23"/></operator><name pos:line="993" pos:column="23">isSensitive<pos:position pos:line="993" pos:column="34"/></name></name><argument_list pos:line="993" pos:column="34">()<pos:position pos:line="993" pos:column="36"/></argument_list></call></expr>)<pos:position pos:line="993" pos:column="37"/></condition><then pos:line="993" pos:column="37"> <block pos:line="993" pos:column="38">{
                    <expr_stmt><expr><call><name><name pos:line="994" pos:column="21">s<pos:position pos:line="994" pos:column="22"/></name><operator pos:line="994" pos:column="22">.<pos:position pos:line="994" pos:column="23"/></operator><name pos:line="994" pos:column="23">add<pos:position pos:line="994" pos:column="26"/></name></name><argument_list pos:line="994" pos:column="26">(<argument><expr><call><name><name pos:line="994" pos:column="27">p<pos:position pos:line="994" pos:column="28"/></name><operator pos:line="994" pos:column="28">.<pos:position pos:line="994" pos:column="29"/></operator><name pos:line="994" pos:column="29">getName<pos:position pos:line="994" pos:column="36"/></name></name><argument_list pos:line="994" pos:column="36">()<pos:position pos:line="994" pos:column="38"/></argument_list></call></expr></argument>)<pos:position pos:line="994" pos:column="39"/></argument_list></call></expr>;<pos:position pos:line="994" pos:column="40"/></expr_stmt>
                }<pos:position pos:line="995" pos:column="18"/></block></then></if>
            }<pos:position pos:line="996" pos:column="14"/></block></for>
        }<pos:position pos:line="997" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="999" pos:column="9">// Allow BuildWrappers to determine if any of their data is sensitive</comment>
        <if pos:line="1000" pos:column="9">if <condition pos:line="1000" pos:column="12">(<expr><name pos:line="1000" pos:column="13">project<pos:position pos:line="1000" pos:column="20"/></name> <operator pos:line="1000" pos:column="21">instanceof<pos:position pos:line="1000" pos:column="31"/></operator> <name pos:line="1000" pos:column="32">BuildableItemWithBuildWrappers<pos:position pos:line="1000" pos:column="62"/></name></expr>)<pos:position pos:line="1000" pos:column="63"/></condition><then pos:line="1000" pos:column="63"> <block pos:line="1000" pos:column="64">{
            <for pos:line="1001" pos:column="13">for <control pos:line="1001" pos:column="17">(<init><decl><type><name pos:line="1001" pos:column="18">BuildWrapper<pos:position pos:line="1001" pos:column="30"/></name></type> <name pos:line="1001" pos:column="31">bw<pos:position pos:line="1001" pos:column="33"/></name> <range pos:line="1001" pos:column="34">: <expr><operator pos:line="1001" pos:column="36">(<pos:position pos:line="1001" pos:column="37"/></operator><operator pos:line="1001" pos:column="37">(<pos:position pos:line="1001" pos:column="38"/></operator><name pos:line="1001" pos:column="38">BuildableItemWithBuildWrappers<pos:position pos:line="1001" pos:column="68"/></name><operator pos:line="1001" pos:column="68">)<pos:position pos:line="1001" pos:column="69"/></operator> <name pos:line="1001" pos:column="70">project<pos:position pos:line="1001" pos:column="77"/></name><operator pos:line="1001" pos:column="77">)<pos:position pos:line="1001" pos:column="78"/></operator><operator pos:line="1001" pos:column="78">.<pos:position pos:line="1001" pos:column="79"/></operator><call><name pos:line="1001" pos:column="79">getBuildWrappersList<pos:position pos:line="1001" pos:column="99"/></name><argument_list pos:line="1001" pos:column="99">()<pos:position pos:line="1001" pos:column="101"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="1001" pos:column="102"/></control> <block pos:line="1001" pos:column="103">{
                <expr_stmt><expr><call><name><name pos:line="1002" pos:column="17">bw<pos:position pos:line="1002" pos:column="19"/></name><operator pos:line="1002" pos:column="19">.<pos:position pos:line="1002" pos:column="20"/></operator><name pos:line="1002" pos:column="20">makeSensitiveBuildVariables<pos:position pos:line="1002" pos:column="47"/></name></name><argument_list pos:line="1002" pos:column="47">(<argument><expr><name pos:line="1002" pos:column="48">this<pos:position pos:line="1002" pos:column="52"/></name></expr></argument>, <argument><expr><name pos:line="1002" pos:column="54">s<pos:position pos:line="1002" pos:column="55"/></name></expr></argument>)<pos:position pos:line="1002" pos:column="56"/></argument_list></call></expr>;<pos:position pos:line="1002" pos:column="57"/></expr_stmt>
            }<pos:position pos:line="1003" pos:column="14"/></block></for>
        }<pos:position pos:line="1004" pos:column="10"/></block></then></if>
        
        <return pos:line="1006" pos:column="9">return <expr><name pos:line="1006" pos:column="16">s<pos:position pos:line="1006" pos:column="17"/></name></expr>;<pos:position pos:line="1006" pos:column="18"/></return>
    }<pos:position pos:line="1007" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1009" pos:column="5">/**
     * Provides additional variables and their values to {@link Builder}s.
     *
     * &lt;p&gt;
     * This mechanism is used by {@code MatrixConfiguration} to pass
     * the configuration values to the current build. It is up to
     * {@link Builder}s to decide whether they want to recognize the values
     * or how to use them.
     *
     * &lt;p&gt;
     * This also includes build parameters if a build is parameterized.
     *
     * @return
     *      The returned map is mutable so that subtypes can put more values.
     */</comment>
    <function><specifier pos:line="1024" pos:column="5">public<pos:position pos:line="1024" pos:column="11"/></specifier> <type><name><name pos:line="1024" pos:column="12">Map<pos:position pos:line="1024" pos:column="15"/></name><argument_list type="generic" pos:line="1024" pos:column="15">&lt;<argument><name pos:line="1024" pos:column="16">String<pos:position pos:line="1024" pos:column="22"/></name></argument>,<argument><name pos:line="1024" pos:column="23">String<pos:position pos:line="1024" pos:column="29"/></name></argument>&gt;<pos:position pos:line="1024" pos:column="33"/></argument_list></name></type> <name pos:line="1024" pos:column="31">getBuildVariables<pos:position pos:line="1024" pos:column="48"/></name><parameter_list pos:line="1024" pos:column="48">()<pos:position pos:line="1024" pos:column="50"/></parameter_list> <block pos:line="1024" pos:column="51">{
        <decl_stmt><decl><type><name><name pos:line="1025" pos:column="9">Map<pos:position pos:line="1025" pos:column="12"/></name><argument_list type="generic" pos:line="1025" pos:column="12">&lt;<argument><name pos:line="1025" pos:column="13">String<pos:position pos:line="1025" pos:column="19"/></name></argument>,<argument><name pos:line="1025" pos:column="20">String<pos:position pos:line="1025" pos:column="26"/></name></argument>&gt;<pos:position pos:line="1025" pos:column="30"/></argument_list></name></type> <name pos:line="1025" pos:column="28">r<pos:position pos:line="1025" pos:column="29"/></name> <init pos:line="1025" pos:column="30">= <expr><operator pos:line="1025" pos:column="32">new<pos:position pos:line="1025" pos:column="35"/></operator> <call><name><name pos:line="1025" pos:column="36">HashMap<pos:position pos:line="1025" pos:column="43"/></name><argument_list type="generic" pos:line="1025" pos:column="43">&lt;<argument><name pos:line="1025" pos:column="44">String<pos:position pos:line="1025" pos:column="50"/></name></argument>, <argument><name pos:line="1025" pos:column="52">String<pos:position pos:line="1025" pos:column="58"/></name></argument>&gt;<pos:position pos:line="1025" pos:column="62"/></argument_list></name><argument_list pos:line="1025" pos:column="59">()<pos:position pos:line="1025" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1025" pos:column="62"/></decl_stmt>

        <decl_stmt><decl><type><name pos:line="1027" pos:column="9">ParametersAction<pos:position pos:line="1027" pos:column="25"/></name></type> <name pos:line="1027" pos:column="26">parameters<pos:position pos:line="1027" pos:column="36"/></name> <init pos:line="1027" pos:column="37">= <expr><call><name pos:line="1027" pos:column="39">getAction<pos:position pos:line="1027" pos:column="48"/></name><argument_list pos:line="1027" pos:column="48">(<argument><expr><name><name pos:line="1027" pos:column="49">ParametersAction<pos:position pos:line="1027" pos:column="65"/></name><operator pos:line="1027" pos:column="65">.<pos:position pos:line="1027" pos:column="66"/></operator><name pos:line="1027" pos:column="66">class<pos:position pos:line="1027" pos:column="71"/></name></name></expr></argument>)<pos:position pos:line="1027" pos:column="72"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1027" pos:column="73"/></decl_stmt>
        <if pos:line="1028" pos:column="9">if <condition pos:line="1028" pos:column="12">(<expr><name pos:line="1028" pos:column="13">parameters<pos:position pos:line="1028" pos:column="23"/></name><operator pos:line="1028" pos:column="23">!=<pos:position pos:line="1028" pos:column="25"/></operator><literal type="null" pos:line="1028" pos:column="25">null<pos:position pos:line="1028" pos:column="29"/></literal></expr>)<pos:position pos:line="1028" pos:column="30"/></condition><then pos:line="1028" pos:column="30"> <block pos:line="1028" pos:column="31">{
            <comment type="line" pos:line="1029" pos:column="13">// this is a rather round about way of doing this...</comment>
            <for pos:line="1030" pos:column="13">for <control pos:line="1030" pos:column="17">(<init><decl><type><name pos:line="1030" pos:column="18">ParameterValue<pos:position pos:line="1030" pos:column="32"/></name></type> <name pos:line="1030" pos:column="33">p<pos:position pos:line="1030" pos:column="34"/></name> <range pos:line="1030" pos:column="35">: <expr><name pos:line="1030" pos:column="37">parameters<pos:position pos:line="1030" pos:column="47"/></name></expr></range></decl></init>)<pos:position pos:line="1030" pos:column="48"/></control> <block pos:line="1030" pos:column="49">{
                <decl_stmt><decl><type><name pos:line="1031" pos:column="17">String<pos:position pos:line="1031" pos:column="23"/></name></type> <name pos:line="1031" pos:column="24">v<pos:position pos:line="1031" pos:column="25"/></name> <init pos:line="1031" pos:column="26">= <expr><call><name><name pos:line="1031" pos:column="28">p<pos:position pos:line="1031" pos:column="29"/></name><operator pos:line="1031" pos:column="29">.<pos:position pos:line="1031" pos:column="30"/></operator><name pos:line="1031" pos:column="30">createVariableResolver<pos:position pos:line="1031" pos:column="52"/></name></name><argument_list pos:line="1031" pos:column="52">(<argument><expr><name pos:line="1031" pos:column="53">this<pos:position pos:line="1031" pos:column="57"/></name></expr></argument>)<pos:position pos:line="1031" pos:column="58"/></argument_list></call><operator pos:line="1031" pos:column="58">.<pos:position pos:line="1031" pos:column="59"/></operator><call><name pos:line="1031" pos:column="59">resolve<pos:position pos:line="1031" pos:column="66"/></name><argument_list pos:line="1031" pos:column="66">(<argument><expr><call><name><name pos:line="1031" pos:column="67">p<pos:position pos:line="1031" pos:column="68"/></name><operator pos:line="1031" pos:column="68">.<pos:position pos:line="1031" pos:column="69"/></operator><name pos:line="1031" pos:column="69">getName<pos:position pos:line="1031" pos:column="76"/></name></name><argument_list pos:line="1031" pos:column="76">()<pos:position pos:line="1031" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="1031" pos:column="79"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1031" pos:column="80"/></decl_stmt>
                <if pos:line="1032" pos:column="17">if <condition pos:line="1032" pos:column="20">(<expr><name pos:line="1032" pos:column="21">v<pos:position pos:line="1032" pos:column="22"/></name><operator pos:line="1032" pos:column="22">!=<pos:position pos:line="1032" pos:column="24"/></operator><literal type="null" pos:line="1032" pos:column="24">null<pos:position pos:line="1032" pos:column="28"/></literal></expr>)<pos:position pos:line="1032" pos:column="29"/></condition><then pos:line="1032" pos:column="29"> <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="1032" pos:column="30">r<pos:position pos:line="1032" pos:column="31"/></name><operator pos:line="1032" pos:column="31">.<pos:position pos:line="1032" pos:column="32"/></operator><name pos:line="1032" pos:column="32">put<pos:position pos:line="1032" pos:column="35"/></name></name><argument_list pos:line="1032" pos:column="35">(<argument><expr><call><name><name pos:line="1032" pos:column="36">p<pos:position pos:line="1032" pos:column="37"/></name><operator pos:line="1032" pos:column="37">.<pos:position pos:line="1032" pos:column="38"/></operator><name pos:line="1032" pos:column="38">getName<pos:position pos:line="1032" pos:column="45"/></name></name><argument_list pos:line="1032" pos:column="45">()<pos:position pos:line="1032" pos:column="47"/></argument_list></call></expr></argument>,<argument><expr><name pos:line="1032" pos:column="48">v<pos:position pos:line="1032" pos:column="49"/></name></expr></argument>)<pos:position pos:line="1032" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1032" pos:column="51"/></expr_stmt></block></then></if>
            }<pos:position pos:line="1033" pos:column="14"/></block></for>
        }<pos:position pos:line="1034" pos:column="10"/></block></then></if>

        <comment type="line" pos:line="1036" pos:column="9">// allow the BuildWrappers to contribute additional build variables</comment>
        <if pos:line="1037" pos:column="9">if <condition pos:line="1037" pos:column="12">(<expr><name pos:line="1037" pos:column="13">project<pos:position pos:line="1037" pos:column="20"/></name> <operator pos:line="1037" pos:column="21">instanceof<pos:position pos:line="1037" pos:column="31"/></operator> <name pos:line="1037" pos:column="32">BuildableItemWithBuildWrappers<pos:position pos:line="1037" pos:column="62"/></name></expr>)<pos:position pos:line="1037" pos:column="63"/></condition><then pos:line="1037" pos:column="63"> <block pos:line="1037" pos:column="64">{
            <for pos:line="1038" pos:column="13">for <control pos:line="1038" pos:column="17">(<init><decl><type><name pos:line="1038" pos:column="18">BuildWrapper<pos:position pos:line="1038" pos:column="30"/></name></type> <name pos:line="1038" pos:column="31">bw<pos:position pos:line="1038" pos:column="33"/></name> <range pos:line="1038" pos:column="34">: <expr><operator pos:line="1038" pos:column="36">(<pos:position pos:line="1038" pos:column="37"/></operator><operator pos:line="1038" pos:column="37">(<pos:position pos:line="1038" pos:column="38"/></operator><name pos:line="1038" pos:column="38">BuildableItemWithBuildWrappers<pos:position pos:line="1038" pos:column="68"/></name><operator pos:line="1038" pos:column="68">)<pos:position pos:line="1038" pos:column="69"/></operator> <name pos:line="1038" pos:column="70">project<pos:position pos:line="1038" pos:column="77"/></name><operator pos:line="1038" pos:column="77">)<pos:position pos:line="1038" pos:column="78"/></operator><operator pos:line="1038" pos:column="78">.<pos:position pos:line="1038" pos:column="79"/></operator><call><name pos:line="1038" pos:column="79">getBuildWrappersList<pos:position pos:line="1038" pos:column="99"/></name><argument_list pos:line="1038" pos:column="99">()<pos:position pos:line="1038" pos:column="101"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="1038" pos:column="102"/></control>
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="1039" pos:column="17">bw<pos:position pos:line="1039" pos:column="19"/></name><operator pos:line="1039" pos:column="19">.<pos:position pos:line="1039" pos:column="20"/></operator><name pos:line="1039" pos:column="20">makeBuildVariables<pos:position pos:line="1039" pos:column="38"/></name></name><argument_list pos:line="1039" pos:column="38">(<argument><expr><name pos:line="1039" pos:column="39">this<pos:position pos:line="1039" pos:column="43"/></name></expr></argument>,<argument><expr><name pos:line="1039" pos:column="44">r<pos:position pos:line="1039" pos:column="45"/></name></expr></argument>)<pos:position pos:line="1039" pos:column="46"/></argument_list></call></expr>;<pos:position pos:line="1039" pos:column="47"/></expr_stmt></block></for>
        }<pos:position pos:line="1040" pos:column="10"/></block></then></if>

        <for pos:line="1042" pos:column="9">for <control pos:line="1042" pos:column="13">(<init><decl><type><name pos:line="1042" pos:column="14">BuildVariableContributor<pos:position pos:line="1042" pos:column="38"/></name></type> <name pos:line="1042" pos:column="39">bvc<pos:position pos:line="1042" pos:column="42"/></name> <range pos:line="1042" pos:column="43">: <expr><call><name><name pos:line="1042" pos:column="45">BuildVariableContributor<pos:position pos:line="1042" pos:column="69"/></name><operator pos:line="1042" pos:column="69">.<pos:position pos:line="1042" pos:column="70"/></operator><name pos:line="1042" pos:column="70">all<pos:position pos:line="1042" pos:column="73"/></name></name><argument_list pos:line="1042" pos:column="73">()<pos:position pos:line="1042" pos:column="75"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="1042" pos:column="76"/></control>
            <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="1043" pos:column="13">bvc<pos:position pos:line="1043" pos:column="16"/></name><operator pos:line="1043" pos:column="16">.<pos:position pos:line="1043" pos:column="17"/></operator><name pos:line="1043" pos:column="17">buildVariablesFor<pos:position pos:line="1043" pos:column="34"/></name></name><argument_list pos:line="1043" pos:column="34">(<argument><expr><name pos:line="1043" pos:column="35">this<pos:position pos:line="1043" pos:column="39"/></name></expr></argument>,<argument><expr><name pos:line="1043" pos:column="40">r<pos:position pos:line="1043" pos:column="41"/></name></expr></argument>)<pos:position pos:line="1043" pos:column="42"/></argument_list></call></expr>;<pos:position pos:line="1043" pos:column="43"/></expr_stmt></block></for>

        <return pos:line="1045" pos:column="9">return <expr><name pos:line="1045" pos:column="16">r<pos:position pos:line="1045" pos:column="17"/></name></expr>;<pos:position pos:line="1045" pos:column="18"/></return>
    }<pos:position pos:line="1046" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1048" pos:column="5">/**
     * Creates {@link VariableResolver} backed by {@link #getBuildVariables()}.
     */</comment>
    <function><specifier pos:line="1051" pos:column="5">public<pos:position pos:line="1051" pos:column="11"/></specifier> <specifier pos:line="1051" pos:column="12">final<pos:position pos:line="1051" pos:column="17"/></specifier> <type><name><name pos:line="1051" pos:column="18">VariableResolver<pos:position pos:line="1051" pos:column="34"/></name><argument_list type="generic" pos:line="1051" pos:column="34">&lt;<argument><name pos:line="1051" pos:column="35">String<pos:position pos:line="1051" pos:column="41"/></name></argument>&gt;<pos:position pos:line="1051" pos:column="45"/></argument_list></name></type> <name pos:line="1051" pos:column="43">getBuildVariableResolver<pos:position pos:line="1051" pos:column="67"/></name><parameter_list pos:line="1051" pos:column="67">()<pos:position pos:line="1051" pos:column="69"/></parameter_list> <block pos:line="1051" pos:column="70">{
        <return pos:line="1052" pos:column="9">return <expr><operator pos:line="1052" pos:column="16">new<pos:position pos:line="1052" pos:column="19"/></operator> <call><name><name pos:line="1052" pos:column="20">VariableResolver<pos:position pos:line="1052" pos:column="36"/></name><operator pos:line="1052" pos:column="36">.<pos:position pos:line="1052" pos:column="37"/></operator><name><name pos:line="1052" pos:column="37">ByMap<pos:position pos:line="1052" pos:column="42"/></name><argument_list type="generic" pos:line="1052" pos:column="42">&lt;<argument><name pos:line="1052" pos:column="43">String<pos:position pos:line="1052" pos:column="49"/></name></argument>&gt;<pos:position pos:line="1052" pos:column="53"/></argument_list></name></name><argument_list pos:line="1052" pos:column="50">(<argument><expr><call><name pos:line="1052" pos:column="51">getBuildVariables<pos:position pos:line="1052" pos:column="68"/></name><argument_list pos:line="1052" pos:column="68">()<pos:position pos:line="1052" pos:column="70"/></argument_list></call></expr></argument>)<pos:position pos:line="1052" pos:column="71"/></argument_list></call></expr>;<pos:position pos:line="1052" pos:column="72"/></return>
    }<pos:position pos:line="1053" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1055" pos:column="5">/**
     * @deprecated Use {@link #getAction(Class)} on {@link AbstractTestResultAction}.
     */</comment>
    <function><annotation pos:line="1058" pos:column="5">@<name pos:line="1058" pos:column="6">Deprecated<pos:position pos:line="1058" pos:column="16"/></name></annotation>
    <specifier pos:line="1059" pos:column="5">public<pos:position pos:line="1059" pos:column="11"/></specifier> <type><name pos:line="1059" pos:column="12">Action<pos:position pos:line="1059" pos:column="18"/></name></type> <name pos:line="1059" pos:column="19">getTestResultAction<pos:position pos:line="1059" pos:column="38"/></name><parameter_list pos:line="1059" pos:column="38">()<pos:position pos:line="1059" pos:column="40"/></parameter_list> <block pos:line="1059" pos:column="41">{
        <try pos:line="1060" pos:column="9">try <block pos:line="1060" pos:column="13">{
            <return pos:line="1061" pos:column="13">return <expr><call><name pos:line="1061" pos:column="20">getAction<pos:position pos:line="1061" pos:column="29"/></name><argument_list pos:line="1061" pos:column="29">(<argument><expr><call><name><name pos:line="1061" pos:column="30">Jenkins<pos:position pos:line="1061" pos:column="37"/></name><operator pos:line="1061" pos:column="37">.<pos:position pos:line="1061" pos:column="38"/></operator><name pos:line="1061" pos:column="38">getInstance<pos:position pos:line="1061" pos:column="49"/></name></name><argument_list pos:line="1061" pos:column="49">()<pos:position pos:line="1061" pos:column="51"/></argument_list></call><operator pos:line="1061" pos:column="51">.<pos:position pos:line="1061" pos:column="52"/></operator><call><name pos:line="1061" pos:column="52">getPluginManager<pos:position pos:line="1061" pos:column="68"/></name><argument_list pos:line="1061" pos:column="68">()<pos:position pos:line="1061" pos:column="70"/></argument_list></call><operator pos:line="1061" pos:column="70">.<pos:position pos:line="1061" pos:column="71"/></operator><call><name><name pos:line="1061" pos:column="71">uberClassLoader<pos:position pos:line="1061" pos:column="86"/></name><operator pos:line="1061" pos:column="86">.<pos:position pos:line="1061" pos:column="87"/></operator><name pos:line="1061" pos:column="87">loadClass<pos:position pos:line="1061" pos:column="96"/></name></name><argument_list pos:line="1061" pos:column="96">(<argument><expr><literal type="string" pos:line="1061" pos:column="97">"hudson.tasks.test.AbstractTestResultAction"<pos:position pos:line="1061" pos:column="141"/></literal></expr></argument>)<pos:position pos:line="1061" pos:column="142"/></argument_list></call><operator pos:line="1061" pos:column="142">.<pos:position pos:line="1061" pos:column="143"/></operator><call><name pos:line="1061" pos:column="143">asSubclass<pos:position pos:line="1061" pos:column="153"/></name><argument_list pos:line="1061" pos:column="153">(<argument><expr><name><name pos:line="1061" pos:column="154">Action<pos:position pos:line="1061" pos:column="160"/></name><operator pos:line="1061" pos:column="160">.<pos:position pos:line="1061" pos:column="161"/></operator><name pos:line="1061" pos:column="161">class<pos:position pos:line="1061" pos:column="166"/></name></name></expr></argument>)<pos:position pos:line="1061" pos:column="167"/></argument_list></call></expr></argument>)<pos:position pos:line="1061" pos:column="168"/></argument_list></call></expr>;<pos:position pos:line="1061" pos:column="169"/></return>
        }<pos:position pos:line="1062" pos:column="10"/></block> <catch pos:line="1062" pos:column="11">catch <parameter_list pos:line="1062" pos:column="17">(<parameter><decl><type><name pos:line="1062" pos:column="18">ClassNotFoundException<pos:position pos:line="1062" pos:column="40"/></name></type> <name pos:line="1062" pos:column="41">x<pos:position pos:line="1062" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1062" pos:column="43"/></parameter_list> <block pos:line="1062" pos:column="44">{
            <return pos:line="1063" pos:column="13">return <expr><literal type="null" pos:line="1063" pos:column="20">null<pos:position pos:line="1063" pos:column="24"/></literal></expr>;<pos:position pos:line="1063" pos:column="25"/></return>
        }<pos:position pos:line="1064" pos:column="10"/></block></catch></try>
    }<pos:position pos:line="1065" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1067" pos:column="5">/**
     * @deprecated Use {@link #getAction(Class)} on {@link AggregatedTestResultAction}.
     */</comment>
    <function><annotation pos:line="1070" pos:column="5">@<name pos:line="1070" pos:column="6">Deprecated<pos:position pos:line="1070" pos:column="16"/></name></annotation>
    <specifier pos:line="1071" pos:column="5">public<pos:position pos:line="1071" pos:column="11"/></specifier> <type><name pos:line="1071" pos:column="12">Action<pos:position pos:line="1071" pos:column="18"/></name></type> <name pos:line="1071" pos:column="19">getAggregatedTestResultAction<pos:position pos:line="1071" pos:column="48"/></name><parameter_list pos:line="1071" pos:column="48">()<pos:position pos:line="1071" pos:column="50"/></parameter_list> <block pos:line="1071" pos:column="51">{
        <try pos:line="1072" pos:column="9">try <block pos:line="1072" pos:column="13">{
            <return pos:line="1073" pos:column="13">return <expr><call><name pos:line="1073" pos:column="20">getAction<pos:position pos:line="1073" pos:column="29"/></name><argument_list pos:line="1073" pos:column="29">(<argument><expr><call><name><name pos:line="1073" pos:column="30">Jenkins<pos:position pos:line="1073" pos:column="37"/></name><operator pos:line="1073" pos:column="37">.<pos:position pos:line="1073" pos:column="38"/></operator><name pos:line="1073" pos:column="38">getInstance<pos:position pos:line="1073" pos:column="49"/></name></name><argument_list pos:line="1073" pos:column="49">()<pos:position pos:line="1073" pos:column="51"/></argument_list></call><operator pos:line="1073" pos:column="51">.<pos:position pos:line="1073" pos:column="52"/></operator><call><name pos:line="1073" pos:column="52">getPluginManager<pos:position pos:line="1073" pos:column="68"/></name><argument_list pos:line="1073" pos:column="68">()<pos:position pos:line="1073" pos:column="70"/></argument_list></call><operator pos:line="1073" pos:column="70">.<pos:position pos:line="1073" pos:column="71"/></operator><call><name><name pos:line="1073" pos:column="71">uberClassLoader<pos:position pos:line="1073" pos:column="86"/></name><operator pos:line="1073" pos:column="86">.<pos:position pos:line="1073" pos:column="87"/></operator><name pos:line="1073" pos:column="87">loadClass<pos:position pos:line="1073" pos:column="96"/></name></name><argument_list pos:line="1073" pos:column="96">(<argument><expr><literal type="string" pos:line="1073" pos:column="97">"hudson.tasks.test.AggregatedTestResultAction"<pos:position pos:line="1073" pos:column="143"/></literal></expr></argument>)<pos:position pos:line="1073" pos:column="144"/></argument_list></call><operator pos:line="1073" pos:column="144">.<pos:position pos:line="1073" pos:column="145"/></operator><call><name pos:line="1073" pos:column="145">asSubclass<pos:position pos:line="1073" pos:column="155"/></name><argument_list pos:line="1073" pos:column="155">(<argument><expr><name><name pos:line="1073" pos:column="156">Action<pos:position pos:line="1073" pos:column="162"/></name><operator pos:line="1073" pos:column="162">.<pos:position pos:line="1073" pos:column="163"/></operator><name pos:line="1073" pos:column="163">class<pos:position pos:line="1073" pos:column="168"/></name></name></expr></argument>)<pos:position pos:line="1073" pos:column="169"/></argument_list></call></expr></argument>)<pos:position pos:line="1073" pos:column="170"/></argument_list></call></expr>;<pos:position pos:line="1073" pos:column="171"/></return>
        }<pos:position pos:line="1074" pos:column="10"/></block> <catch pos:line="1074" pos:column="11">catch <parameter_list pos:line="1074" pos:column="17">(<parameter><decl><type><name pos:line="1074" pos:column="18">ClassNotFoundException<pos:position pos:line="1074" pos:column="40"/></name></type> <name pos:line="1074" pos:column="41">x<pos:position pos:line="1074" pos:column="42"/></name></decl></parameter>)<pos:position pos:line="1074" pos:column="43"/></parameter_list> <block pos:line="1074" pos:column="44">{
            <return pos:line="1075" pos:column="13">return <expr><literal type="null" pos:line="1075" pos:column="20">null<pos:position pos:line="1075" pos:column="24"/></literal></expr>;<pos:position pos:line="1075" pos:column="25"/></return>
        }<pos:position pos:line="1076" pos:column="10"/></block></catch></try>
    }<pos:position pos:line="1077" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1079" pos:column="5">/**
     * Invoked by {@link Executor} to performs a build.
     */</comment>
    <function_decl><specifier pos:line="1082" pos:column="5">public<pos:position pos:line="1082" pos:column="11"/></specifier> <specifier pos:line="1082" pos:column="12">abstract<pos:position pos:line="1082" pos:column="20"/></specifier> <type><name pos:line="1082" pos:column="21">void<pos:position pos:line="1082" pos:column="25"/></name></type> <name pos:line="1082" pos:column="26">run<pos:position pos:line="1082" pos:column="29"/></name><parameter_list pos:line="1082" pos:column="29">()<pos:position pos:line="1082" pos:column="31"/></parameter_list>;<pos:position pos:line="1082" pos:column="32"/></function_decl>

<comment type="line" pos:line="1084" pos:column="1">//</comment>
<comment type="line" pos:line="1085" pos:column="1">//</comment>
<comment type="line" pos:line="1086" pos:column="1">// fingerprint related stuff</comment>
<comment type="line" pos:line="1087" pos:column="1">//</comment>
<comment type="line" pos:line="1088" pos:column="1">//</comment>

    <function><annotation pos:line="1090" pos:column="5">@<name pos:line="1090" pos:column="6">Override<pos:position pos:line="1090" pos:column="14"/></name></annotation>
    <specifier pos:line="1091" pos:column="5">public<pos:position pos:line="1091" pos:column="11"/></specifier> <type><name pos:line="1091" pos:column="12">String<pos:position pos:line="1091" pos:column="18"/></name></type> <name pos:line="1091" pos:column="19">getWhyKeepLog<pos:position pos:line="1091" pos:column="32"/></name><parameter_list pos:line="1091" pos:column="32">()<pos:position pos:line="1091" pos:column="34"/></parameter_list> <block pos:line="1091" pos:column="35">{
        <comment type="line" pos:line="1092" pos:column="9">// if any of the downstream project is configured with 'keep dependency component',</comment>
        <comment type="line" pos:line="1093" pos:column="9">// we need to keep this log</comment>
        <label><name pos:line="1094" pos:column="9">OUTER<pos:position pos:line="1094" pos:column="14"/></name>:<pos:position pos:line="1094" pos:column="15"/></label>
        <for pos:line="1095" pos:column="9">for <control pos:line="1095" pos:column="13">(<init><decl><type><name><name pos:line="1095" pos:column="14">AbstractProject<pos:position pos:line="1095" pos:column="29"/></name><argument_list type="generic" pos:line="1095" pos:column="29">&lt;<argument><name pos:line="1095" pos:column="30">?<pos:position pos:line="1095" pos:column="31"/></name></argument>,<argument><name pos:line="1095" pos:column="32">?<pos:position pos:line="1095" pos:column="33"/></name></argument>&gt;<pos:position pos:line="1095" pos:column="37"/></argument_list></name></type> <name pos:line="1095" pos:column="35">p<pos:position pos:line="1095" pos:column="36"/></name> <range pos:line="1095" pos:column="37">: <expr><call><name pos:line="1095" pos:column="39">getParent<pos:position pos:line="1095" pos:column="48"/></name><argument_list pos:line="1095" pos:column="48">()<pos:position pos:line="1095" pos:column="50"/></argument_list></call><operator pos:line="1095" pos:column="50">.<pos:position pos:line="1095" pos:column="51"/></operator><call><name pos:line="1095" pos:column="51">getDownstreamProjects<pos:position pos:line="1095" pos:column="72"/></name><argument_list pos:line="1095" pos:column="72">()<pos:position pos:line="1095" pos:column="74"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="1095" pos:column="75"/></control> <block pos:line="1095" pos:column="76">{
            <if pos:line="1096" pos:column="13">if <condition pos:line="1096" pos:column="16">(<expr><operator pos:line="1096" pos:column="17">!<pos:position pos:line="1096" pos:column="18"/></operator><call><name><name pos:line="1096" pos:column="18">p<pos:position pos:line="1096" pos:column="19"/></name><operator pos:line="1096" pos:column="19">.<pos:position pos:line="1096" pos:column="20"/></operator><name pos:line="1096" pos:column="20">isKeepDependencies<pos:position pos:line="1096" pos:column="38"/></name></name><argument_list pos:line="1096" pos:column="38">()<pos:position pos:line="1096" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="1096" pos:column="41"/></condition><then pos:line="1096" pos:column="41"> <block type="pseudo"><continue pos:line="1096" pos:column="42">continue;<pos:position pos:line="1096" pos:column="51"/></continue></block></then></if>

            <decl_stmt><decl><type><name><name pos:line="1098" pos:column="13">AbstractBuild<pos:position pos:line="1098" pos:column="26"/></name><argument_list type="generic" pos:line="1098" pos:column="26">&lt;<argument><name pos:line="1098" pos:column="27">?<pos:position pos:line="1098" pos:column="28"/></name></argument>,<argument><name pos:line="1098" pos:column="29">?<pos:position pos:line="1098" pos:column="30"/></name></argument>&gt;<pos:position pos:line="1098" pos:column="34"/></argument_list></name></type> <name pos:line="1098" pos:column="32">fb<pos:position pos:line="1098" pos:column="34"/></name> <init pos:line="1098" pos:column="35">= <expr><call><name><name pos:line="1098" pos:column="37">p<pos:position pos:line="1098" pos:column="38"/></name><operator pos:line="1098" pos:column="38">.<pos:position pos:line="1098" pos:column="39"/></operator><name pos:line="1098" pos:column="39">getFirstBuild<pos:position pos:line="1098" pos:column="52"/></name></name><argument_list pos:line="1098" pos:column="52">()<pos:position pos:line="1098" pos:column="54"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1098" pos:column="55"/></decl_stmt>
            <if pos:line="1099" pos:column="13">if <condition pos:line="1099" pos:column="16">(<expr><name pos:line="1099" pos:column="17">fb<pos:position pos:line="1099" pos:column="19"/></name><operator pos:line="1099" pos:column="19">==<pos:position pos:line="1099" pos:column="21"/></operator><literal type="null" pos:line="1099" pos:column="21">null<pos:position pos:line="1099" pos:column="25"/></literal></expr>)<pos:position pos:line="1099" pos:column="26"/></condition><then pos:line="1099" pos:column="26">        <block type="pseudo"><continue pos:line="1099" pos:column="34">continue;<pos:position pos:line="1099" pos:column="43"/></continue></block></then></if> <comment type="line" pos:line="1099" pos:column="44">// no active record</comment>

            <comment type="line" pos:line="1101" pos:column="13">// is there any active build that depends on us?</comment>
            <for pos:line="1102" pos:column="13">for <control pos:line="1102" pos:column="17">(<init><decl><type><name pos:line="1102" pos:column="18">int<pos:position pos:line="1102" pos:column="21"/></name></type> <name pos:line="1102" pos:column="22">i<pos:position pos:line="1102" pos:column="23"/></name> <range pos:line="1102" pos:column="24">: <expr><call><name pos:line="1102" pos:column="26">getDownstreamRelationship<pos:position pos:line="1102" pos:column="51"/></name><argument_list pos:line="1102" pos:column="51">(<argument><expr><name pos:line="1102" pos:column="52">p<pos:position pos:line="1102" pos:column="53"/></name></expr></argument>)<pos:position pos:line="1102" pos:column="54"/></argument_list></call><operator pos:line="1102" pos:column="54">.<pos:position pos:line="1102" pos:column="55"/></operator><call><name pos:line="1102" pos:column="55">listNumbersReverse<pos:position pos:line="1102" pos:column="73"/></name><argument_list pos:line="1102" pos:column="73">()<pos:position pos:line="1102" pos:column="75"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="1102" pos:column="76"/></control> <block pos:line="1102" pos:column="77">{
                <comment type="line" pos:line="1103" pos:column="17">// TODO: this is essentially a "find intersection between two sparse sequences"</comment>
                <comment type="line" pos:line="1104" pos:column="17">// and we should be able to do much better.</comment>

                <if pos:line="1106" pos:column="17">if <condition pos:line="1106" pos:column="20">(<expr><name pos:line="1106" pos:column="21">i<pos:position pos:line="1106" pos:column="22"/></name><operator pos:line="1106" pos:column="22">&lt;<pos:position pos:line="1106" pos:column="26"/></operator><call><name><name pos:line="1106" pos:column="23">fb<pos:position pos:line="1106" pos:column="25"/></name><operator pos:line="1106" pos:column="25">.<pos:position pos:line="1106" pos:column="26"/></operator><name pos:line="1106" pos:column="26">getNumber<pos:position pos:line="1106" pos:column="35"/></name></name><argument_list pos:line="1106" pos:column="35">()<pos:position pos:line="1106" pos:column="37"/></argument_list></call></expr>)<pos:position pos:line="1106" pos:column="38"/></condition><then pos:line="1106" pos:column="38">
                    <block type="pseudo"><continue pos:line="1107" pos:column="21">continue <name pos:line="1107" pos:column="30">OUTER<pos:position pos:line="1107" pos:column="35"/></name>;<pos:position pos:line="1107" pos:column="36"/></continue></block></then></if> <comment type="line" pos:line="1107" pos:column="37">// all the other records are younger than the first record, so pointless to search.</comment>

                <decl_stmt><decl><type><name><name pos:line="1109" pos:column="17">AbstractBuild<pos:position pos:line="1109" pos:column="30"/></name><argument_list type="generic" pos:line="1109" pos:column="30">&lt;<argument><name pos:line="1109" pos:column="31">?<pos:position pos:line="1109" pos:column="32"/></name></argument>,<argument><name pos:line="1109" pos:column="33">?<pos:position pos:line="1109" pos:column="34"/></name></argument>&gt;<pos:position pos:line="1109" pos:column="38"/></argument_list></name></type> <name pos:line="1109" pos:column="36">b<pos:position pos:line="1109" pos:column="37"/></name> <init pos:line="1109" pos:column="38">= <expr><call><name><name pos:line="1109" pos:column="40">p<pos:position pos:line="1109" pos:column="41"/></name><operator pos:line="1109" pos:column="41">.<pos:position pos:line="1109" pos:column="42"/></operator><name pos:line="1109" pos:column="42">getBuildByNumber<pos:position pos:line="1109" pos:column="58"/></name></name><argument_list pos:line="1109" pos:column="58">(<argument><expr><name pos:line="1109" pos:column="59">i<pos:position pos:line="1109" pos:column="60"/></name></expr></argument>)<pos:position pos:line="1109" pos:column="61"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1109" pos:column="62"/></decl_stmt>
                <if pos:line="1110" pos:column="17">if <condition pos:line="1110" pos:column="20">(<expr><name pos:line="1110" pos:column="21">b<pos:position pos:line="1110" pos:column="22"/></name><operator pos:line="1110" pos:column="22">!=<pos:position pos:line="1110" pos:column="24"/></operator><literal type="null" pos:line="1110" pos:column="24">null<pos:position pos:line="1110" pos:column="28"/></literal></expr>)<pos:position pos:line="1110" pos:column="29"/></condition><then pos:line="1110" pos:column="29">
                    <block type="pseudo"><return pos:line="1111" pos:column="21">return <expr><call><name><name pos:line="1111" pos:column="28">Messages<pos:position pos:line="1111" pos:column="36"/></name><operator pos:line="1111" pos:column="36">.<pos:position pos:line="1111" pos:column="37"/></operator><name pos:line="1111" pos:column="37">AbstractBuild_KeptBecause<pos:position pos:line="1111" pos:column="62"/></name></name><argument_list pos:line="1111" pos:column="62">(<argument><expr><ternary><condition><expr><call><name><name pos:line="1111" pos:column="63">p<pos:position pos:line="1111" pos:column="64"/></name><operator pos:line="1111" pos:column="64">.<pos:position pos:line="1111" pos:column="65"/></operator><name pos:line="1111" pos:column="65">hasPermission<pos:position pos:line="1111" pos:column="78"/></name></name><argument_list pos:line="1111" pos:column="78">(<argument><expr><name><name pos:line="1111" pos:column="79">Item<pos:position pos:line="1111" pos:column="83"/></name><operator pos:line="1111" pos:column="83">.<pos:position pos:line="1111" pos:column="84"/></operator><name pos:line="1111" pos:column="84">READ<pos:position pos:line="1111" pos:column="88"/></name></name></expr></argument>)<pos:position pos:line="1111" pos:column="89"/></argument_list></call></expr> ?<pos:position pos:line="1111" pos:column="91"/></condition><then pos:line="1111" pos:column="91"> <expr><call><name><name pos:line="1111" pos:column="92">b<pos:position pos:line="1111" pos:column="93"/></name><operator pos:line="1111" pos:column="93">.<pos:position pos:line="1111" pos:column="94"/></operator><name pos:line="1111" pos:column="94">toString<pos:position pos:line="1111" pos:column="102"/></name></name><argument_list pos:line="1111" pos:column="102">()<pos:position pos:line="1111" pos:column="104"/></argument_list></call></expr> <pos:position pos:line="1111" pos:column="105"/></then><else pos:line="1111" pos:column="105">: <expr><literal type="string" pos:line="1111" pos:column="107">"?"<pos:position pos:line="1111" pos:column="110"/></literal></expr></else></ternary></expr></argument>)<pos:position pos:line="1111" pos:column="111"/></argument_list></call></expr>;<pos:position pos:line="1111" pos:column="112"/></return></block></then></if>
            }<pos:position pos:line="1112" pos:column="14"/></block></for>
        }<pos:position pos:line="1113" pos:column="10"/></block></for>

        <return pos:line="1115" pos:column="9">return <expr><call><name><name pos:line="1115" pos:column="16">super<pos:position pos:line="1115" pos:column="21"/></name><operator pos:line="1115" pos:column="21">.<pos:position pos:line="1115" pos:column="22"/></operator><name pos:line="1115" pos:column="22">getWhyKeepLog<pos:position pos:line="1115" pos:column="35"/></name></name><argument_list pos:line="1115" pos:column="35">()<pos:position pos:line="1115" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1115" pos:column="38"/></return>
    }<pos:position pos:line="1116" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1118" pos:column="5">/**
     * Gets the dependency relationship from this build (as the source)
     * and that project (as the sink.)
     *
     * @return
     *      range of build numbers that represent which downstream builds are using this build.
     *      The range will be empty if no build of that project matches this (or there is no {@link FingerprintAction}), but it'll never be null.
     */</comment>
    <function><specifier pos:line="1126" pos:column="5">public<pos:position pos:line="1126" pos:column="11"/></specifier> <type><name pos:line="1126" pos:column="12">RangeSet<pos:position pos:line="1126" pos:column="20"/></name></type> <name pos:line="1126" pos:column="21">getDownstreamRelationship<pos:position pos:line="1126" pos:column="46"/></name><parameter_list pos:line="1126" pos:column="46">(<parameter><decl><type><name pos:line="1126" pos:column="47">AbstractProject<pos:position pos:line="1126" pos:column="62"/></name></type> <name pos:line="1126" pos:column="63">that<pos:position pos:line="1126" pos:column="67"/></name></decl></parameter>)<pos:position pos:line="1126" pos:column="68"/></parameter_list> <block pos:line="1126" pos:column="69">{
        <decl_stmt><decl><type><name pos:line="1127" pos:column="9">RangeSet<pos:position pos:line="1127" pos:column="17"/></name></type> <name pos:line="1127" pos:column="18">rs<pos:position pos:line="1127" pos:column="20"/></name> <init pos:line="1127" pos:column="21">= <expr><operator pos:line="1127" pos:column="23">new<pos:position pos:line="1127" pos:column="26"/></operator> <call><name pos:line="1127" pos:column="27">RangeSet<pos:position pos:line="1127" pos:column="35"/></name><argument_list pos:line="1127" pos:column="35">()<pos:position pos:line="1127" pos:column="37"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1127" pos:column="38"/></decl_stmt>

        <decl_stmt><decl><type><name pos:line="1129" pos:column="9">FingerprintAction<pos:position pos:line="1129" pos:column="26"/></name></type> <name pos:line="1129" pos:column="27">f<pos:position pos:line="1129" pos:column="28"/></name> <init pos:line="1129" pos:column="29">= <expr><call><name pos:line="1129" pos:column="31">getAction<pos:position pos:line="1129" pos:column="40"/></name><argument_list pos:line="1129" pos:column="40">(<argument><expr><name><name pos:line="1129" pos:column="41">FingerprintAction<pos:position pos:line="1129" pos:column="58"/></name><operator pos:line="1129" pos:column="58">.<pos:position pos:line="1129" pos:column="59"/></operator><name pos:line="1129" pos:column="59">class<pos:position pos:line="1129" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="1129" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1129" pos:column="66"/></decl_stmt>
        <if pos:line="1130" pos:column="9">if <condition pos:line="1130" pos:column="12">(<expr><name pos:line="1130" pos:column="13">f<pos:position pos:line="1130" pos:column="14"/></name><operator pos:line="1130" pos:column="14">==<pos:position pos:line="1130" pos:column="16"/></operator><literal type="null" pos:line="1130" pos:column="16">null<pos:position pos:line="1130" pos:column="20"/></literal></expr>)<pos:position pos:line="1130" pos:column="21"/></condition><then pos:line="1130" pos:column="21">     <block type="pseudo"><return pos:line="1130" pos:column="26">return <expr><name pos:line="1130" pos:column="33">rs<pos:position pos:line="1130" pos:column="35"/></name></expr>;<pos:position pos:line="1130" pos:column="36"/></return></block></then></if>

        <comment type="line" pos:line="1132" pos:column="9">// look for fingerprints that point to this build as the source, and merge them all</comment>
        <for pos:line="1133" pos:column="9">for <control pos:line="1133" pos:column="13">(<init><decl><type><name pos:line="1133" pos:column="14">Fingerprint<pos:position pos:line="1133" pos:column="25"/></name></type> <name pos:line="1133" pos:column="26">e<pos:position pos:line="1133" pos:column="27"/></name> <range pos:line="1133" pos:column="28">: <expr><call><name><name pos:line="1133" pos:column="30">f<pos:position pos:line="1133" pos:column="31"/></name><operator pos:line="1133" pos:column="31">.<pos:position pos:line="1133" pos:column="32"/></operator><name pos:line="1133" pos:column="32">getFingerprints<pos:position pos:line="1133" pos:column="47"/></name></name><argument_list pos:line="1133" pos:column="47">()<pos:position pos:line="1133" pos:column="49"/></argument_list></call><operator pos:line="1133" pos:column="49">.<pos:position pos:line="1133" pos:column="50"/></operator><call><name pos:line="1133" pos:column="50">values<pos:position pos:line="1133" pos:column="56"/></name><argument_list pos:line="1133" pos:column="56">()<pos:position pos:line="1133" pos:column="58"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="1133" pos:column="59"/></control> <block pos:line="1133" pos:column="60">{

            <if pos:line="1135" pos:column="13">if <condition pos:line="1135" pos:column="16">(<expr><name pos:line="1135" pos:column="17">upstreamCulprits<pos:position pos:line="1135" pos:column="33"/></name></expr>)<pos:position pos:line="1135" pos:column="34"/></condition><then pos:line="1135" pos:column="34"> <block pos:line="1135" pos:column="35">{
                <comment type="line" pos:line="1136" pos:column="17">// With upstreamCulprits, we allow downstream relationships</comment>
                <comment type="line" pos:line="1137" pos:column="17">// from intermediate jobs</comment>
                <expr_stmt><expr><call><name><name pos:line="1138" pos:column="17">rs<pos:position pos:line="1138" pos:column="19"/></name><operator pos:line="1138" pos:column="19">.<pos:position pos:line="1138" pos:column="20"/></operator><name pos:line="1138" pos:column="20">add<pos:position pos:line="1138" pos:column="23"/></name></name><argument_list pos:line="1138" pos:column="23">(<argument><expr><call><name><name pos:line="1138" pos:column="24">e<pos:position pos:line="1138" pos:column="25"/></name><operator pos:line="1138" pos:column="25">.<pos:position pos:line="1138" pos:column="26"/></operator><name pos:line="1138" pos:column="26">getRangeSet<pos:position pos:line="1138" pos:column="37"/></name></name><argument_list pos:line="1138" pos:column="37">(<argument><expr><name pos:line="1138" pos:column="38">that<pos:position pos:line="1138" pos:column="42"/></name></expr></argument>)<pos:position pos:line="1138" pos:column="43"/></argument_list></call></expr></argument>)<pos:position pos:line="1138" pos:column="44"/></argument_list></call></expr>;<pos:position pos:line="1138" pos:column="45"/></expr_stmt>
            }<pos:position pos:line="1139" pos:column="14"/></block></then> <else pos:line="1139" pos:column="15">else <block pos:line="1139" pos:column="20">{
                <decl_stmt><decl><type><name pos:line="1140" pos:column="17">BuildPtr<pos:position pos:line="1140" pos:column="25"/></name></type> <name pos:line="1140" pos:column="26">o<pos:position pos:line="1140" pos:column="27"/></name> <init pos:line="1140" pos:column="28">= <expr><call><name><name pos:line="1140" pos:column="30">e<pos:position pos:line="1140" pos:column="31"/></name><operator pos:line="1140" pos:column="31">.<pos:position pos:line="1140" pos:column="32"/></operator><name pos:line="1140" pos:column="32">getOriginal<pos:position pos:line="1140" pos:column="43"/></name></name><argument_list pos:line="1140" pos:column="43">()<pos:position pos:line="1140" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1140" pos:column="46"/></decl_stmt>
                <if pos:line="1141" pos:column="17">if <condition pos:line="1141" pos:column="20">(<expr><name pos:line="1141" pos:column="21">o<pos:position pos:line="1141" pos:column="22"/></name><operator pos:line="1141" pos:column="22">!=<pos:position pos:line="1141" pos:column="24"/></operator><literal type="null" pos:line="1141" pos:column="24">null<pos:position pos:line="1141" pos:column="28"/></literal> <operator pos:line="1141" pos:column="29">&amp;&amp;<pos:position pos:line="1141" pos:column="39"/></operator> <call><name><name pos:line="1141" pos:column="32">o<pos:position pos:line="1141" pos:column="33"/></name><operator pos:line="1141" pos:column="33">.<pos:position pos:line="1141" pos:column="34"/></operator><name pos:line="1141" pos:column="34">is<pos:position pos:line="1141" pos:column="36"/></name></name><argument_list pos:line="1141" pos:column="36">(<argument><expr><name pos:line="1141" pos:column="37">this<pos:position pos:line="1141" pos:column="41"/></name></expr></argument>)<pos:position pos:line="1141" pos:column="42"/></argument_list></call></expr>)<pos:position pos:line="1141" pos:column="43"/></condition><then pos:line="1141" pos:column="43">
                    <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="1142" pos:column="21">rs<pos:position pos:line="1142" pos:column="23"/></name><operator pos:line="1142" pos:column="23">.<pos:position pos:line="1142" pos:column="24"/></operator><name pos:line="1142" pos:column="24">add<pos:position pos:line="1142" pos:column="27"/></name></name><argument_list pos:line="1142" pos:column="27">(<argument><expr><call><name><name pos:line="1142" pos:column="28">e<pos:position pos:line="1142" pos:column="29"/></name><operator pos:line="1142" pos:column="29">.<pos:position pos:line="1142" pos:column="30"/></operator><name pos:line="1142" pos:column="30">getRangeSet<pos:position pos:line="1142" pos:column="41"/></name></name><argument_list pos:line="1142" pos:column="41">(<argument><expr><name pos:line="1142" pos:column="42">that<pos:position pos:line="1142" pos:column="46"/></name></expr></argument>)<pos:position pos:line="1142" pos:column="47"/></argument_list></call></expr></argument>)<pos:position pos:line="1142" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1142" pos:column="49"/></expr_stmt></block></then></if>
            }<pos:position pos:line="1143" pos:column="14"/></block></else></if>
        }<pos:position pos:line="1144" pos:column="10"/></block></for>

        <return pos:line="1146" pos:column="9">return <expr><name pos:line="1146" pos:column="16">rs<pos:position pos:line="1146" pos:column="18"/></name></expr>;<pos:position pos:line="1146" pos:column="19"/></return>
    }<pos:position pos:line="1147" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1149" pos:column="5">/**
     * Works like {@link #getDownstreamRelationship(AbstractProject)} but returns
     * the actual build objects, in ascending order.
     * @since 1.150
     */</comment>
    <function><specifier pos:line="1154" pos:column="5">public<pos:position pos:line="1154" pos:column="11"/></specifier> <type><name><name pos:line="1154" pos:column="12">Iterable<pos:position pos:line="1154" pos:column="20"/></name><argument_list type="generic" pos:line="1154" pos:column="20">&lt;<argument><name><name pos:line="1154" pos:column="21">AbstractBuild<pos:position pos:line="1154" pos:column="34"/></name><argument_list type="generic" pos:line="1154" pos:column="34">&lt;<argument><name pos:line="1154" pos:column="35">?<pos:position pos:line="1154" pos:column="36"/></name></argument>,<argument><name pos:line="1154" pos:column="37">?<pos:position pos:line="1154" pos:column="38"/></name></argument>&gt;<pos:position pos:line="1154" pos:column="42"/></argument_list></name></argument>&gt;<pos:position pos:line="1154" pos:column="43"/></argument_list></name></type> <name pos:line="1154" pos:column="41">getDownstreamBuilds<pos:position pos:line="1154" pos:column="60"/></name><parameter_list pos:line="1154" pos:column="60">(<parameter><decl><type><specifier pos:line="1154" pos:column="61">final<pos:position pos:line="1154" pos:column="66"/></specifier> <name><name pos:line="1154" pos:column="67">AbstractProject<pos:position pos:line="1154" pos:column="82"/></name><argument_list type="generic" pos:line="1154" pos:column="82">&lt;<argument><name pos:line="1154" pos:column="83">?<pos:position pos:line="1154" pos:column="84"/></name></argument>,<argument><name pos:line="1154" pos:column="85">?<pos:position pos:line="1154" pos:column="86"/></name></argument>&gt;<pos:position pos:line="1154" pos:column="90"/></argument_list></name></type> <name pos:line="1154" pos:column="88">that<pos:position pos:line="1154" pos:column="92"/></name></decl></parameter>)<pos:position pos:line="1154" pos:column="93"/></parameter_list> <block pos:line="1154" pos:column="94">{
        <decl_stmt><decl><type><specifier pos:line="1155" pos:column="9">final<pos:position pos:line="1155" pos:column="14"/></specifier> <name><name pos:line="1155" pos:column="15">Iterable<pos:position pos:line="1155" pos:column="23"/></name><argument_list type="generic" pos:line="1155" pos:column="23">&lt;<argument><name pos:line="1155" pos:column="24">Integer<pos:position pos:line="1155" pos:column="31"/></name></argument>&gt;<pos:position pos:line="1155" pos:column="35"/></argument_list></name></type> <name pos:line="1155" pos:column="33">nums<pos:position pos:line="1155" pos:column="37"/></name> <init pos:line="1155" pos:column="38">= <expr><call><name pos:line="1155" pos:column="40">getDownstreamRelationship<pos:position pos:line="1155" pos:column="65"/></name><argument_list pos:line="1155" pos:column="65">(<argument><expr><name pos:line="1155" pos:column="66">that<pos:position pos:line="1155" pos:column="70"/></name></expr></argument>)<pos:position pos:line="1155" pos:column="71"/></argument_list></call><operator pos:line="1155" pos:column="71">.<pos:position pos:line="1155" pos:column="72"/></operator><call><name pos:line="1155" pos:column="72">listNumbers<pos:position pos:line="1155" pos:column="83"/></name><argument_list pos:line="1155" pos:column="83">()<pos:position pos:line="1155" pos:column="85"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1155" pos:column="86"/></decl_stmt>

        <return pos:line="1157" pos:column="9">return <expr><ternary><condition><expr><operator pos:line="1157" pos:column="16">new<pos:position pos:line="1157" pos:column="19"/></operator> <class><super><name><name pos:line="1157" pos:column="20">Iterable<pos:position pos:line="1157" pos:column="28"/></name><argument_list type="generic" pos:line="1157" pos:column="28">&lt;<argument><name><name pos:line="1157" pos:column="29">AbstractBuild<pos:position pos:line="1157" pos:column="42"/></name><argument_list type="generic" pos:line="1157" pos:column="42">&lt;<argument><name pos:line="1157" pos:column="43">?<pos:position pos:line="1157" pos:column="44"/></name></argument>, <argument><name pos:line="1157" pos:column="46">?<pos:position pos:line="1157" pos:column="47"/></name></argument>&gt;<pos:position pos:line="1157" pos:column="51"/></argument_list></name></argument>&gt;<pos:position pos:line="1157" pos:column="52"/></argument_list></name></super><argument_list pos:line="1157" pos:column="49">()<pos:position pos:line="1157" pos:column="51"/></argument_list></class></expr></condition> <block pos:line="1157" pos:column="52">{
            <function><specifier pos:line="1158" pos:column="13">public<pos:position pos:line="1158" pos:column="19"/></specifier> <type><name><name pos:line="1158" pos:column="20">Iterator<pos:position pos:line="1158" pos:column="28"/></name><argument_list type="generic" pos:line="1158" pos:column="28">&lt;<argument><name><name pos:line="1158" pos:column="29">AbstractBuild<pos:position pos:line="1158" pos:column="42"/></name><argument_list type="generic" pos:line="1158" pos:column="42">&lt;<argument><name pos:line="1158" pos:column="43">?<pos:position pos:line="1158" pos:column="44"/></name></argument>, <argument><name pos:line="1158" pos:column="46">?<pos:position pos:line="1158" pos:column="47"/></name></argument>&gt;<pos:position pos:line="1158" pos:column="51"/></argument_list></name></argument>&gt;<pos:position pos:line="1158" pos:column="52"/></argument_list></name></type> <name pos:line="1158" pos:column="50">iterator<pos:position pos:line="1158" pos:column="58"/></name><parameter_list pos:line="1158" pos:column="58">()<pos:position pos:line="1158" pos:column="60"/></parameter_list> <block pos:line="1158" pos:column="61">{
                <return pos:line="1159" pos:column="17">return <expr><call><name><name pos:line="1159" pos:column="24">Iterators<pos:position pos:line="1159" pos:column="33"/></name><operator pos:line="1159" pos:column="33">.<pos:position pos:line="1159" pos:column="34"/></operator><name pos:line="1159" pos:column="34">removeNull<pos:position pos:line="1159" pos:column="44"/></name></name><argument_list pos:line="1159" pos:column="44">(
                    <argument><expr><operator pos:line="1160" pos:column="21">new<pos:position pos:line="1160" pos:column="24"/></operator> <class><super><name><name pos:line="1160" pos:column="25">AdaptedIterator<pos:position pos:line="1160" pos:column="40"/></name><argument_list type="generic" pos:line="1160" pos:column="40">&lt;<argument><name pos:line="1160" pos:column="41">Integer<pos:position pos:line="1160" pos:column="48"/></name></argument>,<argument><name><name pos:line="1160" pos:column="49">AbstractBuild<pos:position pos:line="1160" pos:column="62"/></name><argument_list type="generic" pos:line="1160" pos:column="62">&lt;<argument><name pos:line="1160" pos:column="63">?<pos:position pos:line="1160" pos:column="64"/></name></argument>,<argument><name pos:line="1160" pos:column="65">?<pos:position pos:line="1160" pos:column="66"/></name></argument>&gt;<pos:position pos:line="1160" pos:column="70"/></argument_list></name></argument>&gt;<pos:position pos:line="1160" pos:column="71"/></argument_list></name></super><argument_list pos:line="1160" pos:column="68">(<argument><expr><name pos:line="1160" pos:column="69">nums<pos:position pos:line="1160" pos:column="73"/></name></expr></argument>)<pos:position pos:line="1160" pos:column="74"/></argument_list> <block pos:line="1160" pos:column="75">{
                        <function><specifier pos:line="1161" pos:column="25">protected<pos:position pos:line="1161" pos:column="34"/></specifier> <type><name><name pos:line="1161" pos:column="35">AbstractBuild<pos:position pos:line="1161" pos:column="48"/></name><argument_list type="generic" pos:line="1161" pos:column="48">&lt;<argument><name pos:line="1161" pos:column="49">?<pos:position pos:line="1161" pos:column="50"/></name></argument>, <argument><name pos:line="1161" pos:column="52">?<pos:position pos:line="1161" pos:column="53"/></name></argument>&gt;<pos:position pos:line="1161" pos:column="57"/></argument_list></name></type> <name pos:line="1161" pos:column="55">adapt<pos:position pos:line="1161" pos:column="60"/></name><parameter_list pos:line="1161" pos:column="60">(<parameter><decl><type><name pos:line="1161" pos:column="61">Integer<pos:position pos:line="1161" pos:column="68"/></name></type> <name pos:line="1161" pos:column="69">item<pos:position pos:line="1161" pos:column="73"/></name></decl></parameter>)<pos:position pos:line="1161" pos:column="74"/></parameter_list> <block pos:line="1161" pos:column="75">{
                            <return pos:line="1162" pos:column="29">return <expr><call><name><name pos:line="1162" pos:column="36">that<pos:position pos:line="1162" pos:column="40"/></name><operator pos:line="1162" pos:column="40">.<pos:position pos:line="1162" pos:column="41"/></operator><name pos:line="1162" pos:column="41">getBuildByNumber<pos:position pos:line="1162" pos:column="57"/></name></name><argument_list pos:line="1162" pos:column="57">(<argument><expr><name pos:line="1162" pos:column="58">item<pos:position pos:line="1162" pos:column="62"/></name></expr></argument>)<pos:position pos:line="1162" pos:column="63"/></argument_list></call></expr>;<pos:position pos:line="1162" pos:column="64"/></return>
                        }<pos:position pos:line="1163" pos:column="26"/></block></function>
                    }<pos:position pos:line="1164" pos:column="22"/></block></class></expr></argument>)<pos:position pos:line="1164" pos:column="23"/></argument_list></call></expr>;<pos:position pos:line="1164" pos:column="24"/></return>
            }<pos:position pos:line="1165" pos:column="14"/></block></function>
        }<pos:position pos:line="1166" pos:column="10"/></block></ternary></expr></return><empty_stmt pos:line="1166" pos:column="10">;<pos:position pos:line="1166" pos:column="11"/></empty_stmt>
    }<pos:position pos:line="1167" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1169" pos:column="5">/**
     * Gets the dependency relationship from this build (as the sink)
     * and that project (as the source.)
     *
     * @return
     *      Build number of the upstream build that feed into this build,
     *      or -1 if no record is available (for example if there is no {@link FingerprintAction}, even if there is an {@link Cause.UpstreamCause}).
     */</comment>
    <function><specifier pos:line="1177" pos:column="5">public<pos:position pos:line="1177" pos:column="11"/></specifier> <type><name pos:line="1177" pos:column="12">int<pos:position pos:line="1177" pos:column="15"/></name></type> <name pos:line="1177" pos:column="16">getUpstreamRelationship<pos:position pos:line="1177" pos:column="39"/></name><parameter_list pos:line="1177" pos:column="39">(<parameter><decl><type><name pos:line="1177" pos:column="40">AbstractProject<pos:position pos:line="1177" pos:column="55"/></name></type> <name pos:line="1177" pos:column="56">that<pos:position pos:line="1177" pos:column="60"/></name></decl></parameter>)<pos:position pos:line="1177" pos:column="61"/></parameter_list> <block pos:line="1177" pos:column="62">{
        <decl_stmt><decl><type><name pos:line="1178" pos:column="9">FingerprintAction<pos:position pos:line="1178" pos:column="26"/></name></type> <name pos:line="1178" pos:column="27">f<pos:position pos:line="1178" pos:column="28"/></name> <init pos:line="1178" pos:column="29">= <expr><call><name pos:line="1178" pos:column="31">getAction<pos:position pos:line="1178" pos:column="40"/></name><argument_list pos:line="1178" pos:column="40">(<argument><expr><name><name pos:line="1178" pos:column="41">FingerprintAction<pos:position pos:line="1178" pos:column="58"/></name><operator pos:line="1178" pos:column="58">.<pos:position pos:line="1178" pos:column="59"/></operator><name pos:line="1178" pos:column="59">class<pos:position pos:line="1178" pos:column="64"/></name></name></expr></argument>)<pos:position pos:line="1178" pos:column="65"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1178" pos:column="66"/></decl_stmt>
        <if pos:line="1179" pos:column="9">if <condition pos:line="1179" pos:column="12">(<expr><name pos:line="1179" pos:column="13">f<pos:position pos:line="1179" pos:column="14"/></name><operator pos:line="1179" pos:column="14">==<pos:position pos:line="1179" pos:column="16"/></operator><literal type="null" pos:line="1179" pos:column="16">null<pos:position pos:line="1179" pos:column="20"/></literal></expr>)<pos:position pos:line="1179" pos:column="21"/></condition><then pos:line="1179" pos:column="21">     <block type="pseudo"><return pos:line="1179" pos:column="26">return <expr><operator pos:line="1179" pos:column="33">-<pos:position pos:line="1179" pos:column="34"/></operator><literal type="number" pos:line="1179" pos:column="34">1<pos:position pos:line="1179" pos:column="35"/></literal></expr>;<pos:position pos:line="1179" pos:column="36"/></return></block></then></if>

        <decl_stmt><decl><type><name pos:line="1181" pos:column="9">int<pos:position pos:line="1181" pos:column="12"/></name></type> <name pos:line="1181" pos:column="13">n<pos:position pos:line="1181" pos:column="14"/></name> <init pos:line="1181" pos:column="15">= <expr><operator pos:line="1181" pos:column="17">-<pos:position pos:line="1181" pos:column="18"/></operator><literal type="number" pos:line="1181" pos:column="18">1<pos:position pos:line="1181" pos:column="19"/></literal></expr></init></decl>;<pos:position pos:line="1181" pos:column="20"/></decl_stmt>

        <comment type="line" pos:line="1183" pos:column="9">// look for fingerprints that point to the given project as the source, and merge them all</comment>
        <for pos:line="1184" pos:column="9">for <control pos:line="1184" pos:column="13">(<init><decl><type><name pos:line="1184" pos:column="14">Fingerprint<pos:position pos:line="1184" pos:column="25"/></name></type> <name pos:line="1184" pos:column="26">e<pos:position pos:line="1184" pos:column="27"/></name> <range pos:line="1184" pos:column="28">: <expr><call><name><name pos:line="1184" pos:column="30">f<pos:position pos:line="1184" pos:column="31"/></name><operator pos:line="1184" pos:column="31">.<pos:position pos:line="1184" pos:column="32"/></operator><name pos:line="1184" pos:column="32">getFingerprints<pos:position pos:line="1184" pos:column="47"/></name></name><argument_list pos:line="1184" pos:column="47">()<pos:position pos:line="1184" pos:column="49"/></argument_list></call><operator pos:line="1184" pos:column="49">.<pos:position pos:line="1184" pos:column="50"/></operator><call><name pos:line="1184" pos:column="50">values<pos:position pos:line="1184" pos:column="56"/></name><argument_list pos:line="1184" pos:column="56">()<pos:position pos:line="1184" pos:column="58"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="1184" pos:column="59"/></control> <block pos:line="1184" pos:column="60">{
            <if pos:line="1185" pos:column="13">if <condition pos:line="1185" pos:column="16">(<expr><name pos:line="1185" pos:column="17">upstreamCulprits<pos:position pos:line="1185" pos:column="33"/></name></expr>)<pos:position pos:line="1185" pos:column="34"/></condition><then pos:line="1185" pos:column="34"> <block pos:line="1185" pos:column="35">{
                <comment type="line" pos:line="1186" pos:column="17">// With upstreamCulprits, we allow upstream relationships</comment>
                <comment type="line" pos:line="1187" pos:column="17">// from intermediate jobs</comment>
                <decl_stmt><decl><type><name><name pos:line="1188" pos:column="17">Fingerprint<pos:position pos:line="1188" pos:column="28"/></name><operator pos:line="1188" pos:column="28">.<pos:position pos:line="1188" pos:column="29"/></operator><name pos:line="1188" pos:column="29">RangeSet<pos:position pos:line="1188" pos:column="37"/></name></name></type> <name pos:line="1188" pos:column="38">rangeset<pos:position pos:line="1188" pos:column="46"/></name> <init pos:line="1188" pos:column="47">= <expr><call><name><name pos:line="1188" pos:column="49">e<pos:position pos:line="1188" pos:column="50"/></name><operator pos:line="1188" pos:column="50">.<pos:position pos:line="1188" pos:column="51"/></operator><name pos:line="1188" pos:column="51">getRangeSet<pos:position pos:line="1188" pos:column="62"/></name></name><argument_list pos:line="1188" pos:column="62">(<argument><expr><name pos:line="1188" pos:column="63">that<pos:position pos:line="1188" pos:column="67"/></name></expr></argument>)<pos:position pos:line="1188" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1188" pos:column="69"/></decl_stmt>
                <if pos:line="1189" pos:column="17">if <condition pos:line="1189" pos:column="20">(<expr><operator pos:line="1189" pos:column="21">!<pos:position pos:line="1189" pos:column="22"/></operator><call><name><name pos:line="1189" pos:column="22">rangeset<pos:position pos:line="1189" pos:column="30"/></name><operator pos:line="1189" pos:column="30">.<pos:position pos:line="1189" pos:column="31"/></operator><name pos:line="1189" pos:column="31">isEmpty<pos:position pos:line="1189" pos:column="38"/></name></name><argument_list pos:line="1189" pos:column="38">()<pos:position pos:line="1189" pos:column="40"/></argument_list></call></expr>)<pos:position pos:line="1189" pos:column="41"/></condition><then pos:line="1189" pos:column="41"> <block pos:line="1189" pos:column="42">{
                    <expr_stmt><expr><name pos:line="1190" pos:column="21">n<pos:position pos:line="1190" pos:column="22"/></name> <operator pos:line="1190" pos:column="23">=<pos:position pos:line="1190" pos:column="24"/></operator> <call><name><name pos:line="1190" pos:column="25">Math<pos:position pos:line="1190" pos:column="29"/></name><operator pos:line="1190" pos:column="29">.<pos:position pos:line="1190" pos:column="30"/></operator><name pos:line="1190" pos:column="30">max<pos:position pos:line="1190" pos:column="33"/></name></name><argument_list pos:line="1190" pos:column="33">(<argument><expr><name pos:line="1190" pos:column="34">n<pos:position pos:line="1190" pos:column="35"/></name></expr></argument>, <argument><expr><call><name><name pos:line="1190" pos:column="37">rangeset<pos:position pos:line="1190" pos:column="45"/></name><operator pos:line="1190" pos:column="45">.<pos:position pos:line="1190" pos:column="46"/></operator><name pos:line="1190" pos:column="46">listNumbersReverse<pos:position pos:line="1190" pos:column="64"/></name></name><argument_list pos:line="1190" pos:column="64">()<pos:position pos:line="1190" pos:column="66"/></argument_list></call><operator pos:line="1190" pos:column="66">.<pos:position pos:line="1190" pos:column="67"/></operator><call><name pos:line="1190" pos:column="67">iterator<pos:position pos:line="1190" pos:column="75"/></name><argument_list pos:line="1190" pos:column="75">()<pos:position pos:line="1190" pos:column="77"/></argument_list></call><operator pos:line="1190" pos:column="77">.<pos:position pos:line="1190" pos:column="78"/></operator><call><name pos:line="1190" pos:column="78">next<pos:position pos:line="1190" pos:column="82"/></name><argument_list pos:line="1190" pos:column="82">()<pos:position pos:line="1190" pos:column="84"/></argument_list></call></expr></argument>)<pos:position pos:line="1190" pos:column="85"/></argument_list></call></expr>;<pos:position pos:line="1190" pos:column="86"/></expr_stmt>
                }<pos:position pos:line="1191" pos:column="18"/></block></then></if>
            }<pos:position pos:line="1192" pos:column="14"/></block></then> <else pos:line="1192" pos:column="15">else <block pos:line="1192" pos:column="20">{
                <decl_stmt><decl><type><name pos:line="1193" pos:column="17">BuildPtr<pos:position pos:line="1193" pos:column="25"/></name></type> <name pos:line="1193" pos:column="26">o<pos:position pos:line="1193" pos:column="27"/></name> <init pos:line="1193" pos:column="28">= <expr><call><name><name pos:line="1193" pos:column="30">e<pos:position pos:line="1193" pos:column="31"/></name><operator pos:line="1193" pos:column="31">.<pos:position pos:line="1193" pos:column="32"/></operator><name pos:line="1193" pos:column="32">getOriginal<pos:position pos:line="1193" pos:column="43"/></name></name><argument_list pos:line="1193" pos:column="43">()<pos:position pos:line="1193" pos:column="45"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1193" pos:column="46"/></decl_stmt>
                <if pos:line="1194" pos:column="17">if <condition pos:line="1194" pos:column="20">(<expr><name pos:line="1194" pos:column="21">o<pos:position pos:line="1194" pos:column="22"/></name><operator pos:line="1194" pos:column="22">!=<pos:position pos:line="1194" pos:column="24"/></operator><literal type="null" pos:line="1194" pos:column="24">null<pos:position pos:line="1194" pos:column="28"/></literal> <operator pos:line="1194" pos:column="29">&amp;&amp;<pos:position pos:line="1194" pos:column="39"/></operator> <call><name><name pos:line="1194" pos:column="32">o<pos:position pos:line="1194" pos:column="33"/></name><operator pos:line="1194" pos:column="33">.<pos:position pos:line="1194" pos:column="34"/></operator><name pos:line="1194" pos:column="34">belongsTo<pos:position pos:line="1194" pos:column="43"/></name></name><argument_list pos:line="1194" pos:column="43">(<argument><expr><name pos:line="1194" pos:column="44">that<pos:position pos:line="1194" pos:column="48"/></name></expr></argument>)<pos:position pos:line="1194" pos:column="49"/></argument_list></call></expr>)<pos:position pos:line="1194" pos:column="50"/></condition><then pos:line="1194" pos:column="50">
                    <block type="pseudo"><expr_stmt><expr><name pos:line="1195" pos:column="21">n<pos:position pos:line="1195" pos:column="22"/></name> <operator pos:line="1195" pos:column="23">=<pos:position pos:line="1195" pos:column="24"/></operator> <call><name><name pos:line="1195" pos:column="25">Math<pos:position pos:line="1195" pos:column="29"/></name><operator pos:line="1195" pos:column="29">.<pos:position pos:line="1195" pos:column="30"/></operator><name pos:line="1195" pos:column="30">max<pos:position pos:line="1195" pos:column="33"/></name></name><argument_list pos:line="1195" pos:column="33">(<argument><expr><name pos:line="1195" pos:column="34">n<pos:position pos:line="1195" pos:column="35"/></name></expr></argument>,<argument><expr><call><name><name pos:line="1195" pos:column="36">o<pos:position pos:line="1195" pos:column="37"/></name><operator pos:line="1195" pos:column="37">.<pos:position pos:line="1195" pos:column="38"/></operator><name pos:line="1195" pos:column="38">getNumber<pos:position pos:line="1195" pos:column="47"/></name></name><argument_list pos:line="1195" pos:column="47">()<pos:position pos:line="1195" pos:column="49"/></argument_list></call></expr></argument>)<pos:position pos:line="1195" pos:column="50"/></argument_list></call></expr>;<pos:position pos:line="1195" pos:column="51"/></expr_stmt></block></then></if>
            }<pos:position pos:line="1196" pos:column="14"/></block></else></if>
        }<pos:position pos:line="1197" pos:column="10"/></block></for>

        <return pos:line="1199" pos:column="9">return <expr><name pos:line="1199" pos:column="16">n<pos:position pos:line="1199" pos:column="17"/></name></expr>;<pos:position pos:line="1199" pos:column="18"/></return>
    }<pos:position pos:line="1200" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1202" pos:column="5">/**
     * Works like {@link #getUpstreamRelationship(AbstractProject)} but returns the
     * actual build object.
     *
     * @return
     *      null if no such upstream build was found, or it was found but the
     *      build record is already lost.
     */</comment>
    <function><specifier pos:line="1210" pos:column="5">public<pos:position pos:line="1210" pos:column="11"/></specifier> <type><name><name pos:line="1210" pos:column="12">AbstractBuild<pos:position pos:line="1210" pos:column="25"/></name><argument_list type="generic" pos:line="1210" pos:column="25">&lt;<argument><name pos:line="1210" pos:column="26">?<pos:position pos:line="1210" pos:column="27"/></name></argument>,<argument><name pos:line="1210" pos:column="28">?<pos:position pos:line="1210" pos:column="29"/></name></argument>&gt;<pos:position pos:line="1210" pos:column="33"/></argument_list></name></type> <name pos:line="1210" pos:column="31">getUpstreamRelationshipBuild<pos:position pos:line="1210" pos:column="59"/></name><parameter_list pos:line="1210" pos:column="59">(<parameter><decl><type><name><name pos:line="1210" pos:column="60">AbstractProject<pos:position pos:line="1210" pos:column="75"/></name><argument_list type="generic" pos:line="1210" pos:column="75">&lt;<argument><name pos:line="1210" pos:column="76">?<pos:position pos:line="1210" pos:column="77"/></name></argument>,<argument><name pos:line="1210" pos:column="78">?<pos:position pos:line="1210" pos:column="79"/></name></argument>&gt;<pos:position pos:line="1210" pos:column="83"/></argument_list></name></type> <name pos:line="1210" pos:column="81">that<pos:position pos:line="1210" pos:column="85"/></name></decl></parameter>)<pos:position pos:line="1210" pos:column="86"/></parameter_list> <block pos:line="1210" pos:column="87">{
        <decl_stmt><decl><type><name pos:line="1211" pos:column="9">int<pos:position pos:line="1211" pos:column="12"/></name></type> <name pos:line="1211" pos:column="13">n<pos:position pos:line="1211" pos:column="14"/></name> <init pos:line="1211" pos:column="15">= <expr><call><name pos:line="1211" pos:column="17">getUpstreamRelationship<pos:position pos:line="1211" pos:column="40"/></name><argument_list pos:line="1211" pos:column="40">(<argument><expr><name pos:line="1211" pos:column="41">that<pos:position pos:line="1211" pos:column="45"/></name></expr></argument>)<pos:position pos:line="1211" pos:column="46"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1211" pos:column="47"/></decl_stmt>
        <if pos:line="1212" pos:column="9">if <condition pos:line="1212" pos:column="12">(<expr><name pos:line="1212" pos:column="13">n<pos:position pos:line="1212" pos:column="14"/></name><operator pos:line="1212" pos:column="14">==<pos:position pos:line="1212" pos:column="16"/></operator><operator pos:line="1212" pos:column="16">-<pos:position pos:line="1212" pos:column="17"/></operator><literal type="number" pos:line="1212" pos:column="17">1<pos:position pos:line="1212" pos:column="18"/></literal></expr>)<pos:position pos:line="1212" pos:column="19"/></condition><then pos:line="1212" pos:column="19">   <block type="pseudo"><return pos:line="1212" pos:column="22">return <expr><literal type="null" pos:line="1212" pos:column="29">null<pos:position pos:line="1212" pos:column="33"/></literal></expr>;<pos:position pos:line="1212" pos:column="34"/></return></block></then></if>
        <return pos:line="1213" pos:column="9">return <expr><call><name><name pos:line="1213" pos:column="16">that<pos:position pos:line="1213" pos:column="20"/></name><operator pos:line="1213" pos:column="20">.<pos:position pos:line="1213" pos:column="21"/></operator><name pos:line="1213" pos:column="21">getBuildByNumber<pos:position pos:line="1213" pos:column="37"/></name></name><argument_list pos:line="1213" pos:column="37">(<argument><expr><name pos:line="1213" pos:column="38">n<pos:position pos:line="1213" pos:column="39"/></name></expr></argument>)<pos:position pos:line="1213" pos:column="40"/></argument_list></call></expr>;<pos:position pos:line="1213" pos:column="41"/></return>
    }<pos:position pos:line="1214" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1216" pos:column="5">/**
     * Gets the downstream builds of this build, which are the builds of the
     * downstream projects that use artifacts of this build.
     *
     * @return
     *      For each project with fingerprinting enabled, returns the range
     *      of builds (which can be empty if no build uses the artifact from this build or downstream is not {@link AbstractProject#isFingerprintConfigured}.)
     */</comment>
    <function><specifier pos:line="1224" pos:column="5">public<pos:position pos:line="1224" pos:column="11"/></specifier> <type><name><name pos:line="1224" pos:column="12">Map<pos:position pos:line="1224" pos:column="15"/></name><argument_list type="generic" pos:line="1224" pos:column="15">&lt;<argument><name pos:line="1224" pos:column="16">AbstractProject<pos:position pos:line="1224" pos:column="31"/></name></argument>,<argument><name pos:line="1224" pos:column="32">RangeSet<pos:position pos:line="1224" pos:column="40"/></name></argument>&gt;<pos:position pos:line="1224" pos:column="44"/></argument_list></name></type> <name pos:line="1224" pos:column="42">getDownstreamBuilds<pos:position pos:line="1224" pos:column="61"/></name><parameter_list pos:line="1224" pos:column="61">()<pos:position pos:line="1224" pos:column="63"/></parameter_list> <block pos:line="1224" pos:column="64">{
        <decl_stmt><decl><type><name><name pos:line="1225" pos:column="9">Map<pos:position pos:line="1225" pos:column="12"/></name><argument_list type="generic" pos:line="1225" pos:column="12">&lt;<argument><name pos:line="1225" pos:column="13">AbstractProject<pos:position pos:line="1225" pos:column="28"/></name></argument>,<argument><name pos:line="1225" pos:column="29">RangeSet<pos:position pos:line="1225" pos:column="37"/></name></argument>&gt;<pos:position pos:line="1225" pos:column="41"/></argument_list></name></type> <name pos:line="1225" pos:column="39">r<pos:position pos:line="1225" pos:column="40"/></name> <init pos:line="1225" pos:column="41">= <expr><operator pos:line="1225" pos:column="43">new<pos:position pos:line="1225" pos:column="46"/></operator> <call><name><name pos:line="1225" pos:column="47">HashMap<pos:position pos:line="1225" pos:column="54"/></name><argument_list type="generic" pos:line="1225" pos:column="54">&lt;<argument><name pos:line="1225" pos:column="55">AbstractProject<pos:position pos:line="1225" pos:column="70"/></name></argument>,<argument><name pos:line="1225" pos:column="71">RangeSet<pos:position pos:line="1225" pos:column="79"/></name></argument>&gt;<pos:position pos:line="1225" pos:column="83"/></argument_list></name><argument_list pos:line="1225" pos:column="80">()<pos:position pos:line="1225" pos:column="82"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1225" pos:column="83"/></decl_stmt>
        <for pos:line="1226" pos:column="9">for <control pos:line="1226" pos:column="13">(<init><decl><type><name pos:line="1226" pos:column="14">AbstractProject<pos:position pos:line="1226" pos:column="29"/></name></type> <name pos:line="1226" pos:column="30">p<pos:position pos:line="1226" pos:column="31"/></name> <range pos:line="1226" pos:column="32">: <expr><call><name pos:line="1226" pos:column="34">getParent<pos:position pos:line="1226" pos:column="43"/></name><argument_list pos:line="1226" pos:column="43">()<pos:position pos:line="1226" pos:column="45"/></argument_list></call><operator pos:line="1226" pos:column="45">.<pos:position pos:line="1226" pos:column="46"/></operator><call><name pos:line="1226" pos:column="46">getDownstreamProjects<pos:position pos:line="1226" pos:column="67"/></name><argument_list pos:line="1226" pos:column="67">()<pos:position pos:line="1226" pos:column="69"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="1226" pos:column="70"/></control> <block pos:line="1226" pos:column="71">{
            <if pos:line="1227" pos:column="13">if <condition pos:line="1227" pos:column="16">(<expr><call><name><name pos:line="1227" pos:column="17">p<pos:position pos:line="1227" pos:column="18"/></name><operator pos:line="1227" pos:column="18">.<pos:position pos:line="1227" pos:column="19"/></operator><name pos:line="1227" pos:column="19">isFingerprintConfigured<pos:position pos:line="1227" pos:column="42"/></name></name><argument_list pos:line="1227" pos:column="42">()<pos:position pos:line="1227" pos:column="44"/></argument_list></call></expr>)<pos:position pos:line="1227" pos:column="45"/></condition><then pos:line="1227" pos:column="45">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="1228" pos:column="17">r<pos:position pos:line="1228" pos:column="18"/></name><operator pos:line="1228" pos:column="18">.<pos:position pos:line="1228" pos:column="19"/></operator><name pos:line="1228" pos:column="19">put<pos:position pos:line="1228" pos:column="22"/></name></name><argument_list pos:line="1228" pos:column="22">(<argument><expr><name pos:line="1228" pos:column="23">p<pos:position pos:line="1228" pos:column="24"/></name></expr></argument>,<argument><expr><call><name pos:line="1228" pos:column="25">getDownstreamRelationship<pos:position pos:line="1228" pos:column="50"/></name><argument_list pos:line="1228" pos:column="50">(<argument><expr><name pos:line="1228" pos:column="51">p<pos:position pos:line="1228" pos:column="52"/></name></expr></argument>)<pos:position pos:line="1228" pos:column="53"/></argument_list></call></expr></argument>)<pos:position pos:line="1228" pos:column="54"/></argument_list></call></expr>;<pos:position pos:line="1228" pos:column="55"/></expr_stmt></block></then></if>
        }<pos:position pos:line="1229" pos:column="10"/></block></for>
        <return pos:line="1230" pos:column="9">return <expr><name pos:line="1230" pos:column="16">r<pos:position pos:line="1230" pos:column="17"/></name></expr>;<pos:position pos:line="1230" pos:column="18"/></return>
    }<pos:position pos:line="1231" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1233" pos:column="5">/**
     * Gets the upstream builds of this build, which are the builds of the
     * upstream projects whose artifacts feed into this build.
     * @return empty if there is no {@link FingerprintAction} (even if there is an {@link Cause.UpstreamCause})
     * @see #getTransitiveUpstreamBuilds()
     */</comment>
    <function><specifier pos:line="1239" pos:column="5">public<pos:position pos:line="1239" pos:column="11"/></specifier> <type><name><name pos:line="1239" pos:column="12">Map<pos:position pos:line="1239" pos:column="15"/></name><argument_list type="generic" pos:line="1239" pos:column="15">&lt;<argument><name pos:line="1239" pos:column="16">AbstractProject<pos:position pos:line="1239" pos:column="31"/></name></argument>,<argument><name pos:line="1239" pos:column="32">Integer<pos:position pos:line="1239" pos:column="39"/></name></argument>&gt;<pos:position pos:line="1239" pos:column="43"/></argument_list></name></type> <name pos:line="1239" pos:column="41">getUpstreamBuilds<pos:position pos:line="1239" pos:column="58"/></name><parameter_list pos:line="1239" pos:column="58">()<pos:position pos:line="1239" pos:column="60"/></parameter_list> <block pos:line="1239" pos:column="61">{
        <return pos:line="1240" pos:column="9">return <expr><call><name pos:line="1240" pos:column="16">_getUpstreamBuilds<pos:position pos:line="1240" pos:column="34"/></name><argument_list pos:line="1240" pos:column="34">(<argument><expr><call><name pos:line="1240" pos:column="35">getParent<pos:position pos:line="1240" pos:column="44"/></name><argument_list pos:line="1240" pos:column="44">()<pos:position pos:line="1240" pos:column="46"/></argument_list></call><operator pos:line="1240" pos:column="46">.<pos:position pos:line="1240" pos:column="47"/></operator><call><name pos:line="1240" pos:column="47">getUpstreamProjects<pos:position pos:line="1240" pos:column="66"/></name><argument_list pos:line="1240" pos:column="66">()<pos:position pos:line="1240" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="1240" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="1240" pos:column="70"/></return>
    }<pos:position pos:line="1241" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1243" pos:column="5">/**
     * Works like {@link #getUpstreamBuilds()}  but also includes all the transitive
     * dependencies as well.
     */</comment>
    <function><specifier pos:line="1247" pos:column="5">public<pos:position pos:line="1247" pos:column="11"/></specifier> <type><name><name pos:line="1247" pos:column="12">Map<pos:position pos:line="1247" pos:column="15"/></name><argument_list type="generic" pos:line="1247" pos:column="15">&lt;<argument><name pos:line="1247" pos:column="16">AbstractProject<pos:position pos:line="1247" pos:column="31"/></name></argument>,<argument><name pos:line="1247" pos:column="32">Integer<pos:position pos:line="1247" pos:column="39"/></name></argument>&gt;<pos:position pos:line="1247" pos:column="43"/></argument_list></name></type> <name pos:line="1247" pos:column="41">getTransitiveUpstreamBuilds<pos:position pos:line="1247" pos:column="68"/></name><parameter_list pos:line="1247" pos:column="68">()<pos:position pos:line="1247" pos:column="70"/></parameter_list> <block pos:line="1247" pos:column="71">{
        <return pos:line="1248" pos:column="9">return <expr><call><name pos:line="1248" pos:column="16">_getUpstreamBuilds<pos:position pos:line="1248" pos:column="34"/></name><argument_list pos:line="1248" pos:column="34">(<argument><expr><call><name pos:line="1248" pos:column="35">getParent<pos:position pos:line="1248" pos:column="44"/></name><argument_list pos:line="1248" pos:column="44">()<pos:position pos:line="1248" pos:column="46"/></argument_list></call><operator pos:line="1248" pos:column="46">.<pos:position pos:line="1248" pos:column="47"/></operator><call><name pos:line="1248" pos:column="47">getTransitiveUpstreamProjects<pos:position pos:line="1248" pos:column="76"/></name><argument_list pos:line="1248" pos:column="76">()<pos:position pos:line="1248" pos:column="78"/></argument_list></call></expr></argument>)<pos:position pos:line="1248" pos:column="79"/></argument_list></call></expr>;<pos:position pos:line="1248" pos:column="80"/></return>
    }<pos:position pos:line="1249" pos:column="6"/></block></function>

    <function><specifier pos:line="1251" pos:column="5">private<pos:position pos:line="1251" pos:column="12"/></specifier> <type><name><name pos:line="1251" pos:column="13">Map<pos:position pos:line="1251" pos:column="16"/></name><argument_list type="generic" pos:line="1251" pos:column="16">&lt;<argument><name pos:line="1251" pos:column="17">AbstractProject<pos:position pos:line="1251" pos:column="32"/></name></argument>, <argument><name pos:line="1251" pos:column="34">Integer<pos:position pos:line="1251" pos:column="41"/></name></argument>&gt;<pos:position pos:line="1251" pos:column="45"/></argument_list></name></type> <name pos:line="1251" pos:column="43">_getUpstreamBuilds<pos:position pos:line="1251" pos:column="61"/></name><parameter_list pos:line="1251" pos:column="61">(<parameter><decl><type><name><name pos:line="1251" pos:column="62">Collection<pos:position pos:line="1251" pos:column="72"/></name><argument_list type="generic" pos:line="1251" pos:column="72">&lt;<argument><name pos:line="1251" pos:column="73">AbstractProject<pos:position pos:line="1251" pos:column="88"/></name></argument>&gt;<pos:position pos:line="1251" pos:column="92"/></argument_list></name></type> <name pos:line="1251" pos:column="90">projects<pos:position pos:line="1251" pos:column="98"/></name></decl></parameter>)<pos:position pos:line="1251" pos:column="99"/></parameter_list> <block pos:line="1251" pos:column="100">{
        <decl_stmt><decl><type><name><name pos:line="1252" pos:column="9">Map<pos:position pos:line="1252" pos:column="12"/></name><argument_list type="generic" pos:line="1252" pos:column="12">&lt;<argument><name pos:line="1252" pos:column="13">AbstractProject<pos:position pos:line="1252" pos:column="28"/></name></argument>,<argument><name pos:line="1252" pos:column="29">Integer<pos:position pos:line="1252" pos:column="36"/></name></argument>&gt;<pos:position pos:line="1252" pos:column="40"/></argument_list></name></type> <name pos:line="1252" pos:column="38">r<pos:position pos:line="1252" pos:column="39"/></name> <init pos:line="1252" pos:column="40">= <expr><operator pos:line="1252" pos:column="42">new<pos:position pos:line="1252" pos:column="45"/></operator> <call><name><name pos:line="1252" pos:column="46">HashMap<pos:position pos:line="1252" pos:column="53"/></name><argument_list type="generic" pos:line="1252" pos:column="53">&lt;<argument><name pos:line="1252" pos:column="54">AbstractProject<pos:position pos:line="1252" pos:column="69"/></name></argument>,<argument><name pos:line="1252" pos:column="70">Integer<pos:position pos:line="1252" pos:column="77"/></name></argument>&gt;<pos:position pos:line="1252" pos:column="81"/></argument_list></name><argument_list pos:line="1252" pos:column="78">()<pos:position pos:line="1252" pos:column="80"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1252" pos:column="81"/></decl_stmt>
        <for pos:line="1253" pos:column="9">for <control pos:line="1253" pos:column="13">(<init><decl><type><name pos:line="1253" pos:column="14">AbstractProject<pos:position pos:line="1253" pos:column="29"/></name></type> <name pos:line="1253" pos:column="30">p<pos:position pos:line="1253" pos:column="31"/></name> <range pos:line="1253" pos:column="32">: <expr><name pos:line="1253" pos:column="34">projects<pos:position pos:line="1253" pos:column="42"/></name></expr></range></decl></init>)<pos:position pos:line="1253" pos:column="43"/></control> <block pos:line="1253" pos:column="44">{
            <decl_stmt><decl><type><name pos:line="1254" pos:column="13">int<pos:position pos:line="1254" pos:column="16"/></name></type> <name pos:line="1254" pos:column="17">n<pos:position pos:line="1254" pos:column="18"/></name> <init pos:line="1254" pos:column="19">= <expr><call><name pos:line="1254" pos:column="21">getUpstreamRelationship<pos:position pos:line="1254" pos:column="44"/></name><argument_list pos:line="1254" pos:column="44">(<argument><expr><name pos:line="1254" pos:column="45">p<pos:position pos:line="1254" pos:column="46"/></name></expr></argument>)<pos:position pos:line="1254" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1254" pos:column="48"/></decl_stmt>
            <if pos:line="1255" pos:column="13">if <condition pos:line="1255" pos:column="16">(<expr><name pos:line="1255" pos:column="17">n<pos:position pos:line="1255" pos:column="18"/></name><operator pos:line="1255" pos:column="18">&gt;=<pos:position pos:line="1255" pos:column="23"/></operator><literal type="number" pos:line="1255" pos:column="20">0<pos:position pos:line="1255" pos:column="21"/></literal></expr>)<pos:position pos:line="1255" pos:column="22"/></condition><then pos:line="1255" pos:column="22">
                <block type="pseudo"><expr_stmt><expr><call><name><name pos:line="1256" pos:column="17">r<pos:position pos:line="1256" pos:column="18"/></name><operator pos:line="1256" pos:column="18">.<pos:position pos:line="1256" pos:column="19"/></operator><name pos:line="1256" pos:column="19">put<pos:position pos:line="1256" pos:column="22"/></name></name><argument_list pos:line="1256" pos:column="22">(<argument><expr><name pos:line="1256" pos:column="23">p<pos:position pos:line="1256" pos:column="24"/></name></expr></argument>,<argument><expr><name pos:line="1256" pos:column="25">n<pos:position pos:line="1256" pos:column="26"/></name></expr></argument>)<pos:position pos:line="1256" pos:column="27"/></argument_list></call></expr>;<pos:position pos:line="1256" pos:column="28"/></expr_stmt></block></then></if>
        }<pos:position pos:line="1257" pos:column="10"/></block></for>
        <return pos:line="1258" pos:column="9">return <expr><name pos:line="1258" pos:column="16">r<pos:position pos:line="1258" pos:column="17"/></name></expr>;<pos:position pos:line="1258" pos:column="18"/></return>
    }<pos:position pos:line="1259" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1261" pos:column="5">/**
     * Gets the changes in the dependency between the given build and this build.
     * @return empty if there is no {@link FingerprintAction}
     */</comment>
    <function><specifier pos:line="1265" pos:column="5">public<pos:position pos:line="1265" pos:column="11"/></specifier> <type><name><name pos:line="1265" pos:column="12">Map<pos:position pos:line="1265" pos:column="15"/></name><argument_list type="generic" pos:line="1265" pos:column="15">&lt;<argument><name pos:line="1265" pos:column="16">AbstractProject<pos:position pos:line="1265" pos:column="31"/></name></argument>,<argument><name pos:line="1265" pos:column="32">DependencyChange<pos:position pos:line="1265" pos:column="48"/></name></argument>&gt;<pos:position pos:line="1265" pos:column="52"/></argument_list></name></type> <name pos:line="1265" pos:column="50">getDependencyChanges<pos:position pos:line="1265" pos:column="70"/></name><parameter_list pos:line="1265" pos:column="70">(<parameter><decl><type><name pos:line="1265" pos:column="71">AbstractBuild<pos:position pos:line="1265" pos:column="84"/></name></type> <name pos:line="1265" pos:column="85">from<pos:position pos:line="1265" pos:column="89"/></name></decl></parameter>)<pos:position pos:line="1265" pos:column="90"/></parameter_list> <block pos:line="1265" pos:column="91">{
        <if pos:line="1266" pos:column="9">if <condition pos:line="1266" pos:column="12">(<expr><name pos:line="1266" pos:column="13">from<pos:position pos:line="1266" pos:column="17"/></name><operator pos:line="1266" pos:column="17">==<pos:position pos:line="1266" pos:column="19"/></operator><literal type="null" pos:line="1266" pos:column="19">null<pos:position pos:line="1266" pos:column="23"/></literal></expr>)<pos:position pos:line="1266" pos:column="24"/></condition><then pos:line="1266" pos:column="24">             <block type="pseudo"><return pos:line="1266" pos:column="37">return <expr><call><name><name pos:line="1266" pos:column="44">Collections<pos:position pos:line="1266" pos:column="55"/></name><operator pos:line="1266" pos:column="55">.<pos:position pos:line="1266" pos:column="56"/></operator><name pos:line="1266" pos:column="56">emptyMap<pos:position pos:line="1266" pos:column="64"/></name></name><argument_list pos:line="1266" pos:column="64">()<pos:position pos:line="1266" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="1266" pos:column="67"/></return></block></then></if> <comment type="line" pos:line="1266" pos:column="68">// make it easy to call this from views</comment>
        <decl_stmt><decl><type><name pos:line="1267" pos:column="9">FingerprintAction<pos:position pos:line="1267" pos:column="26"/></name></type> <name pos:line="1267" pos:column="27">n<pos:position pos:line="1267" pos:column="28"/></name> <init pos:line="1267" pos:column="29">= <expr><call><name><name pos:line="1267" pos:column="31">this<pos:position pos:line="1267" pos:column="35"/></name><operator pos:line="1267" pos:column="35">.<pos:position pos:line="1267" pos:column="36"/></operator><name pos:line="1267" pos:column="36">getAction<pos:position pos:line="1267" pos:column="45"/></name></name><argument_list pos:line="1267" pos:column="45">(<argument><expr><name><name pos:line="1267" pos:column="46">FingerprintAction<pos:position pos:line="1267" pos:column="63"/></name><operator pos:line="1267" pos:column="63">.<pos:position pos:line="1267" pos:column="64"/></operator><name pos:line="1267" pos:column="64">class<pos:position pos:line="1267" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="1267" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1267" pos:column="71"/></decl_stmt>
        <decl_stmt><decl><type><name pos:line="1268" pos:column="9">FingerprintAction<pos:position pos:line="1268" pos:column="26"/></name></type> <name pos:line="1268" pos:column="27">o<pos:position pos:line="1268" pos:column="28"/></name> <init pos:line="1268" pos:column="29">= <expr><call><name><name pos:line="1268" pos:column="31">from<pos:position pos:line="1268" pos:column="35"/></name><operator pos:line="1268" pos:column="35">.<pos:position pos:line="1268" pos:column="36"/></operator><name pos:line="1268" pos:column="36">getAction<pos:position pos:line="1268" pos:column="45"/></name></name><argument_list pos:line="1268" pos:column="45">(<argument><expr><name><name pos:line="1268" pos:column="46">FingerprintAction<pos:position pos:line="1268" pos:column="63"/></name><operator pos:line="1268" pos:column="63">.<pos:position pos:line="1268" pos:column="64"/></operator><name pos:line="1268" pos:column="64">class<pos:position pos:line="1268" pos:column="69"/></name></name></expr></argument>)<pos:position pos:line="1268" pos:column="70"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1268" pos:column="71"/></decl_stmt>
        <if pos:line="1269" pos:column="9">if <condition pos:line="1269" pos:column="12">(<expr><name pos:line="1269" pos:column="13">n<pos:position pos:line="1269" pos:column="14"/></name><operator pos:line="1269" pos:column="14">==<pos:position pos:line="1269" pos:column="16"/></operator><literal type="null" pos:line="1269" pos:column="16">null<pos:position pos:line="1269" pos:column="20"/></literal> <operator pos:line="1269" pos:column="21">||<pos:position pos:line="1269" pos:column="23"/></operator> <name pos:line="1269" pos:column="24">o<pos:position pos:line="1269" pos:column="25"/></name><operator pos:line="1269" pos:column="25">==<pos:position pos:line="1269" pos:column="27"/></operator><literal type="null" pos:line="1269" pos:column="27">null<pos:position pos:line="1269" pos:column="31"/></literal></expr>)<pos:position pos:line="1269" pos:column="32"/></condition><then pos:line="1269" pos:column="32">     <block type="pseudo"><return pos:line="1269" pos:column="37">return <expr><call><name><name pos:line="1269" pos:column="44">Collections<pos:position pos:line="1269" pos:column="55"/></name><operator pos:line="1269" pos:column="55">.<pos:position pos:line="1269" pos:column="56"/></operator><name pos:line="1269" pos:column="56">emptyMap<pos:position pos:line="1269" pos:column="64"/></name></name><argument_list pos:line="1269" pos:column="64">()<pos:position pos:line="1269" pos:column="66"/></argument_list></call></expr>;<pos:position pos:line="1269" pos:column="67"/></return></block></then></if>

        <decl_stmt><decl><type><name><name pos:line="1271" pos:column="9">Map<pos:position pos:line="1271" pos:column="12"/></name><argument_list type="generic" pos:line="1271" pos:column="12">&lt;<argument><name pos:line="1271" pos:column="13">AbstractProject<pos:position pos:line="1271" pos:column="28"/></name></argument>,<argument><name pos:line="1271" pos:column="29">Integer<pos:position pos:line="1271" pos:column="36"/></name></argument>&gt;<pos:position pos:line="1271" pos:column="40"/></argument_list></name></type> <name pos:line="1271" pos:column="38">ndep<pos:position pos:line="1271" pos:column="42"/></name> <init pos:line="1271" pos:column="43">= <expr><call><name><name pos:line="1271" pos:column="45">n<pos:position pos:line="1271" pos:column="46"/></name><operator pos:line="1271" pos:column="46">.<pos:position pos:line="1271" pos:column="47"/></operator><name pos:line="1271" pos:column="47">getDependencies<pos:position pos:line="1271" pos:column="62"/></name></name><argument_list pos:line="1271" pos:column="62">(<argument><expr><literal type="boolean" pos:line="1271" pos:column="63">true<pos:position pos:line="1271" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="1271" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1271" pos:column="69"/></decl_stmt>
        <decl_stmt><decl><type><name><name pos:line="1272" pos:column="9">Map<pos:position pos:line="1272" pos:column="12"/></name><argument_list type="generic" pos:line="1272" pos:column="12">&lt;<argument><name pos:line="1272" pos:column="13">AbstractProject<pos:position pos:line="1272" pos:column="28"/></name></argument>,<argument><name pos:line="1272" pos:column="29">Integer<pos:position pos:line="1272" pos:column="36"/></name></argument>&gt;<pos:position pos:line="1272" pos:column="40"/></argument_list></name></type> <name pos:line="1272" pos:column="38">odep<pos:position pos:line="1272" pos:column="42"/></name> <init pos:line="1272" pos:column="43">= <expr><call><name><name pos:line="1272" pos:column="45">o<pos:position pos:line="1272" pos:column="46"/></name><operator pos:line="1272" pos:column="46">.<pos:position pos:line="1272" pos:column="47"/></operator><name pos:line="1272" pos:column="47">getDependencies<pos:position pos:line="1272" pos:column="62"/></name></name><argument_list pos:line="1272" pos:column="62">(<argument><expr><literal type="boolean" pos:line="1272" pos:column="63">true<pos:position pos:line="1272" pos:column="67"/></literal></expr></argument>)<pos:position pos:line="1272" pos:column="68"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1272" pos:column="69"/></decl_stmt>

        <decl_stmt><decl><type><name><name pos:line="1274" pos:column="9">Map<pos:position pos:line="1274" pos:column="12"/></name><argument_list type="generic" pos:line="1274" pos:column="12">&lt;<argument><name pos:line="1274" pos:column="13">AbstractProject<pos:position pos:line="1274" pos:column="28"/></name></argument>,<argument><name pos:line="1274" pos:column="29">DependencyChange<pos:position pos:line="1274" pos:column="45"/></name></argument>&gt;<pos:position pos:line="1274" pos:column="49"/></argument_list></name></type> <name pos:line="1274" pos:column="47">r<pos:position pos:line="1274" pos:column="48"/></name> <init pos:line="1274" pos:column="49">= <expr><operator pos:line="1274" pos:column="51">new<pos:position pos:line="1274" pos:column="54"/></operator> <call><name><name pos:line="1274" pos:column="55">HashMap<pos:position pos:line="1274" pos:column="62"/></name><argument_list type="generic" pos:line="1274" pos:column="62">&lt;<argument><name pos:line="1274" pos:column="63">AbstractProject<pos:position pos:line="1274" pos:column="78"/></name></argument>,<argument><name pos:line="1274" pos:column="79">DependencyChange<pos:position pos:line="1274" pos:column="95"/></name></argument>&gt;<pos:position pos:line="1274" pos:column="99"/></argument_list></name><argument_list pos:line="1274" pos:column="96">()<pos:position pos:line="1274" pos:column="98"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1274" pos:column="99"/></decl_stmt>

        <for pos:line="1276" pos:column="9">for <control pos:line="1276" pos:column="13">(<init><decl><type><name><name pos:line="1276" pos:column="14">Map<pos:position pos:line="1276" pos:column="17"/></name><operator pos:line="1276" pos:column="17">.<pos:position pos:line="1276" pos:column="18"/></operator><name><name pos:line="1276" pos:column="18">Entry<pos:position pos:line="1276" pos:column="23"/></name><argument_list type="generic" pos:line="1276" pos:column="23">&lt;<argument><name pos:line="1276" pos:column="24">AbstractProject<pos:position pos:line="1276" pos:column="39"/></name></argument>,<argument><name pos:line="1276" pos:column="40">Integer<pos:position pos:line="1276" pos:column="47"/></name></argument>&gt;<pos:position pos:line="1276" pos:column="51"/></argument_list></name></name></type> <name pos:line="1276" pos:column="49">entry<pos:position pos:line="1276" pos:column="54"/></name> <range pos:line="1276" pos:column="55">: <expr><call><name><name pos:line="1276" pos:column="57">odep<pos:position pos:line="1276" pos:column="61"/></name><operator pos:line="1276" pos:column="61">.<pos:position pos:line="1276" pos:column="62"/></operator><name pos:line="1276" pos:column="62">entrySet<pos:position pos:line="1276" pos:column="70"/></name></name><argument_list pos:line="1276" pos:column="70">()<pos:position pos:line="1276" pos:column="72"/></argument_list></call></expr></range></decl></init>)<pos:position pos:line="1276" pos:column="73"/></control> <block pos:line="1276" pos:column="74">{
            <decl_stmt><decl><type><name pos:line="1277" pos:column="13">AbstractProject<pos:position pos:line="1277" pos:column="28"/></name></type> <name pos:line="1277" pos:column="29">p<pos:position pos:line="1277" pos:column="30"/></name> <init pos:line="1277" pos:column="31">= <expr><call><name><name pos:line="1277" pos:column="33">entry<pos:position pos:line="1277" pos:column="38"/></name><operator pos:line="1277" pos:column="38">.<pos:position pos:line="1277" pos:column="39"/></operator><name pos:line="1277" pos:column="39">getKey<pos:position pos:line="1277" pos:column="45"/></name></name><argument_list pos:line="1277" pos:column="45">()<pos:position pos:line="1277" pos:column="47"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1277" pos:column="48"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="1278" pos:column="13">Integer<pos:position pos:line="1278" pos:column="20"/></name></type> <name pos:line="1278" pos:column="21">oldNumber<pos:position pos:line="1278" pos:column="30"/></name> <init pos:line="1278" pos:column="31">= <expr><call><name><name pos:line="1278" pos:column="33">entry<pos:position pos:line="1278" pos:column="38"/></name><operator pos:line="1278" pos:column="38">.<pos:position pos:line="1278" pos:column="39"/></operator><name pos:line="1278" pos:column="39">getValue<pos:position pos:line="1278" pos:column="47"/></name></name><argument_list pos:line="1278" pos:column="47">()<pos:position pos:line="1278" pos:column="49"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1278" pos:column="50"/></decl_stmt>
            <decl_stmt><decl><type><name pos:line="1279" pos:column="13">Integer<pos:position pos:line="1279" pos:column="20"/></name></type> <name pos:line="1279" pos:column="21">newNumber<pos:position pos:line="1279" pos:column="30"/></name> <init pos:line="1279" pos:column="31">= <expr><call><name><name pos:line="1279" pos:column="33">ndep<pos:position pos:line="1279" pos:column="37"/></name><operator pos:line="1279" pos:column="37">.<pos:position pos:line="1279" pos:column="38"/></operator><name pos:line="1279" pos:column="38">get<pos:position pos:line="1279" pos:column="41"/></name></name><argument_list pos:line="1279" pos:column="41">(<argument><expr><name pos:line="1279" pos:column="42">p<pos:position pos:line="1279" pos:column="43"/></name></expr></argument>)<pos:position pos:line="1279" pos:column="44"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1279" pos:column="45"/></decl_stmt>
            <if pos:line="1280" pos:column="13">if <condition pos:line="1280" pos:column="16">(<expr><name pos:line="1280" pos:column="17">newNumber<pos:position pos:line="1280" pos:column="26"/></name><operator pos:line="1280" pos:column="26">!=<pos:position pos:line="1280" pos:column="28"/></operator><literal type="null" pos:line="1280" pos:column="28">null<pos:position pos:line="1280" pos:column="32"/></literal> <operator pos:line="1280" pos:column="33">&amp;&amp;<pos:position pos:line="1280" pos:column="43"/></operator> <call><name><name pos:line="1280" pos:column="36">oldNumber<pos:position pos:line="1280" pos:column="45"/></name><operator pos:line="1280" pos:column="45">.<pos:position pos:line="1280" pos:column="46"/></operator><name pos:line="1280" pos:column="46">compareTo<pos:position pos:line="1280" pos:column="55"/></name></name><argument_list pos:line="1280" pos:column="55">(<argument><expr><name pos:line="1280" pos:column="56">newNumber<pos:position pos:line="1280" pos:column="65"/></name></expr></argument>)<pos:position pos:line="1280" pos:column="66"/></argument_list></call><operator pos:line="1280" pos:column="66">&lt;<pos:position pos:line="1280" pos:column="70"/></operator><literal type="number" pos:line="1280" pos:column="67">0<pos:position pos:line="1280" pos:column="68"/></literal></expr>)<pos:position pos:line="1280" pos:column="69"/></condition><then pos:line="1280" pos:column="69"> <block pos:line="1280" pos:column="70">{
                <expr_stmt><expr><call><name><name pos:line="1281" pos:column="17">r<pos:position pos:line="1281" pos:column="18"/></name><operator pos:line="1281" pos:column="18">.<pos:position pos:line="1281" pos:column="19"/></operator><name pos:line="1281" pos:column="19">put<pos:position pos:line="1281" pos:column="22"/></name></name><argument_list pos:line="1281" pos:column="22">(<argument><expr><name pos:line="1281" pos:column="23">p<pos:position pos:line="1281" pos:column="24"/></name></expr></argument>,<argument><expr><operator pos:line="1281" pos:column="25">new<pos:position pos:line="1281" pos:column="28"/></operator> <call><name pos:line="1281" pos:column="29">DependencyChange<pos:position pos:line="1281" pos:column="45"/></name><argument_list pos:line="1281" pos:column="45">(<argument><expr><name pos:line="1281" pos:column="46">p<pos:position pos:line="1281" pos:column="47"/></name></expr></argument>,<argument><expr><name pos:line="1281" pos:column="48">oldNumber<pos:position pos:line="1281" pos:column="57"/></name></expr></argument>,<argument><expr><name pos:line="1281" pos:column="58">newNumber<pos:position pos:line="1281" pos:column="67"/></name></expr></argument>)<pos:position pos:line="1281" pos:column="68"/></argument_list></call></expr></argument>)<pos:position pos:line="1281" pos:column="69"/></argument_list></call></expr>;<pos:position pos:line="1281" pos:column="70"/></expr_stmt>
            }<pos:position pos:line="1282" pos:column="14"/></block></then></if>
        }<pos:position pos:line="1283" pos:column="10"/></block></for>

        <return pos:line="1285" pos:column="9">return <expr><name pos:line="1285" pos:column="16">r<pos:position pos:line="1285" pos:column="17"/></name></expr>;<pos:position pos:line="1285" pos:column="18"/></return>
    }<pos:position pos:line="1286" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1288" pos:column="5">/**
     * Represents a change in the dependency.
     */</comment>
    <class><specifier pos:line="1291" pos:column="5">public<pos:position pos:line="1291" pos:column="11"/></specifier> <specifier pos:line="1291" pos:column="12">static<pos:position pos:line="1291" pos:column="18"/></specifier> <specifier pos:line="1291" pos:column="19">final<pos:position pos:line="1291" pos:column="24"/></specifier> class <name pos:line="1291" pos:column="31">DependencyChange<pos:position pos:line="1291" pos:column="47"/></name> <block pos:line="1291" pos:column="48">{
        <comment type="block" format="javadoc" pos:line="1292" pos:column="9">/**
         * The dependency project.
         */</comment>
        <decl_stmt><decl><specifier pos:line="1295" pos:column="9">public<pos:position pos:line="1295" pos:column="15"/></specifier> <type><specifier pos:line="1295" pos:column="16">final<pos:position pos:line="1295" pos:column="21"/></specifier> <name pos:line="1295" pos:column="22">AbstractProject<pos:position pos:line="1295" pos:column="37"/></name></type> <name pos:line="1295" pos:column="38">project<pos:position pos:line="1295" pos:column="45"/></name></decl>;<pos:position pos:line="1295" pos:column="46"/></decl_stmt>
        <comment type="block" format="javadoc" pos:line="1296" pos:column="9">/**
         * Version of the dependency project used in the previous build.
         */</comment>
        <decl_stmt><decl><specifier pos:line="1299" pos:column="9">public<pos:position pos:line="1299" pos:column="15"/></specifier> <type><specifier pos:line="1299" pos:column="16">final<pos:position pos:line="1299" pos:column="21"/></specifier> <name pos:line="1299" pos:column="22">int<pos:position pos:line="1299" pos:column="25"/></name></type> <name pos:line="1299" pos:column="26">fromId<pos:position pos:line="1299" pos:column="32"/></name></decl>;<pos:position pos:line="1299" pos:column="33"/></decl_stmt>
        <comment type="block" format="javadoc" pos:line="1300" pos:column="9">/**
         * {@link Build} object for {@link #fromId}. Can be null if the log is gone.
         */</comment>
        <decl_stmt><decl><specifier pos:line="1303" pos:column="9">public<pos:position pos:line="1303" pos:column="15"/></specifier> <type><specifier pos:line="1303" pos:column="16">final<pos:position pos:line="1303" pos:column="21"/></specifier> <name pos:line="1303" pos:column="22">AbstractBuild<pos:position pos:line="1303" pos:column="35"/></name></type> <name pos:line="1303" pos:column="36">from<pos:position pos:line="1303" pos:column="40"/></name></decl>;<pos:position pos:line="1303" pos:column="41"/></decl_stmt>
        <comment type="block" format="javadoc" pos:line="1304" pos:column="9">/**
         * Version of the dependency project used in this build.
         */</comment>
        <decl_stmt><decl><specifier pos:line="1307" pos:column="9">public<pos:position pos:line="1307" pos:column="15"/></specifier> <type><specifier pos:line="1307" pos:column="16">final<pos:position pos:line="1307" pos:column="21"/></specifier> <name pos:line="1307" pos:column="22">int<pos:position pos:line="1307" pos:column="25"/></name></type> <name pos:line="1307" pos:column="26">toId<pos:position pos:line="1307" pos:column="30"/></name></decl>;<pos:position pos:line="1307" pos:column="31"/></decl_stmt>

        <decl_stmt><decl><specifier pos:line="1309" pos:column="9">public<pos:position pos:line="1309" pos:column="15"/></specifier> <type><specifier pos:line="1309" pos:column="16">final<pos:position pos:line="1309" pos:column="21"/></specifier> <name pos:line="1309" pos:column="22">AbstractBuild<pos:position pos:line="1309" pos:column="35"/></name></type> <name pos:line="1309" pos:column="36">to<pos:position pos:line="1309" pos:column="38"/></name></decl>;<pos:position pos:line="1309" pos:column="39"/></decl_stmt>

        <constructor><specifier pos:line="1311" pos:column="9">public<pos:position pos:line="1311" pos:column="15"/></specifier> <name pos:line="1311" pos:column="16">DependencyChange<pos:position pos:line="1311" pos:column="32"/></name><parameter_list pos:line="1311" pos:column="32">(<parameter><decl><type><name><name pos:line="1311" pos:column="33">AbstractProject<pos:position pos:line="1311" pos:column="48"/></name><argument_list type="generic" pos:line="1311" pos:column="48">&lt;<argument><name pos:line="1311" pos:column="49">?<pos:position pos:line="1311" pos:column="50"/></name></argument>,<argument><name pos:line="1311" pos:column="51">?<pos:position pos:line="1311" pos:column="52"/></name></argument>&gt;<pos:position pos:line="1311" pos:column="56"/></argument_list></name></type> <name pos:line="1311" pos:column="54">project<pos:position pos:line="1311" pos:column="61"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1311" pos:column="63">int<pos:position pos:line="1311" pos:column="66"/></name></type> <name pos:line="1311" pos:column="67">fromId<pos:position pos:line="1311" pos:column="73"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1311" pos:column="75">int<pos:position pos:line="1311" pos:column="78"/></name></type> <name pos:line="1311" pos:column="79">toId<pos:position pos:line="1311" pos:column="83"/></name></decl></parameter>)<pos:position pos:line="1311" pos:column="84"/></parameter_list> <block pos:line="1311" pos:column="85">{
            <expr_stmt><expr><name><name pos:line="1312" pos:column="13">this<pos:position pos:line="1312" pos:column="17"/></name><operator pos:line="1312" pos:column="17">.<pos:position pos:line="1312" pos:column="18"/></operator><name pos:line="1312" pos:column="18">project<pos:position pos:line="1312" pos:column="25"/></name></name> <operator pos:line="1312" pos:column="26">=<pos:position pos:line="1312" pos:column="27"/></operator> <name pos:line="1312" pos:column="28">project<pos:position pos:line="1312" pos:column="35"/></name></expr>;<pos:position pos:line="1312" pos:column="36"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="1313" pos:column="13">this<pos:position pos:line="1313" pos:column="17"/></name><operator pos:line="1313" pos:column="17">.<pos:position pos:line="1313" pos:column="18"/></operator><name pos:line="1313" pos:column="18">fromId<pos:position pos:line="1313" pos:column="24"/></name></name> <operator pos:line="1313" pos:column="25">=<pos:position pos:line="1313" pos:column="26"/></operator> <name pos:line="1313" pos:column="27">fromId<pos:position pos:line="1313" pos:column="33"/></name></expr>;<pos:position pos:line="1313" pos:column="34"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="1314" pos:column="13">this<pos:position pos:line="1314" pos:column="17"/></name><operator pos:line="1314" pos:column="17">.<pos:position pos:line="1314" pos:column="18"/></operator><name pos:line="1314" pos:column="18">toId<pos:position pos:line="1314" pos:column="22"/></name></name> <operator pos:line="1314" pos:column="23">=<pos:position pos:line="1314" pos:column="24"/></operator> <name pos:line="1314" pos:column="25">toId<pos:position pos:line="1314" pos:column="29"/></name></expr>;<pos:position pos:line="1314" pos:column="30"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="1315" pos:column="13">this<pos:position pos:line="1315" pos:column="17"/></name><operator pos:line="1315" pos:column="17">.<pos:position pos:line="1315" pos:column="18"/></operator><name pos:line="1315" pos:column="18">from<pos:position pos:line="1315" pos:column="22"/></name></name> <operator pos:line="1315" pos:column="23">=<pos:position pos:line="1315" pos:column="24"/></operator> <call><name><name pos:line="1315" pos:column="25">project<pos:position pos:line="1315" pos:column="32"/></name><operator pos:line="1315" pos:column="32">.<pos:position pos:line="1315" pos:column="33"/></operator><name pos:line="1315" pos:column="33">getBuildByNumber<pos:position pos:line="1315" pos:column="49"/></name></name><argument_list pos:line="1315" pos:column="49">(<argument><expr><name pos:line="1315" pos:column="50">fromId<pos:position pos:line="1315" pos:column="56"/></name></expr></argument>)<pos:position pos:line="1315" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1315" pos:column="58"/></expr_stmt>
            <expr_stmt><expr><name><name pos:line="1316" pos:column="13">this<pos:position pos:line="1316" pos:column="17"/></name><operator pos:line="1316" pos:column="17">.<pos:position pos:line="1316" pos:column="18"/></operator><name pos:line="1316" pos:column="18">to<pos:position pos:line="1316" pos:column="20"/></name></name> <operator pos:line="1316" pos:column="21">=<pos:position pos:line="1316" pos:column="22"/></operator> <call><name><name pos:line="1316" pos:column="23">project<pos:position pos:line="1316" pos:column="30"/></name><operator pos:line="1316" pos:column="30">.<pos:position pos:line="1316" pos:column="31"/></operator><name pos:line="1316" pos:column="31">getBuildByNumber<pos:position pos:line="1316" pos:column="47"/></name></name><argument_list pos:line="1316" pos:column="47">(<argument><expr><name pos:line="1316" pos:column="48">toId<pos:position pos:line="1316" pos:column="52"/></name></expr></argument>)<pos:position pos:line="1316" pos:column="53"/></argument_list></call></expr>;<pos:position pos:line="1316" pos:column="54"/></expr_stmt>
        }<pos:position pos:line="1317" pos:column="10"/></block></constructor>

        <comment type="block" format="javadoc" pos:line="1319" pos:column="9">/**
         * Gets the {@link AbstractBuild} objects (fromId,toId].
         * &lt;p&gt;
         * This method returns all such available builds in the ascending order
         * of IDs, but due to log rotations, some builds may be already unavailable.
         */</comment>
        <function><specifier pos:line="1325" pos:column="9">public<pos:position pos:line="1325" pos:column="15"/></specifier> <type><name><name pos:line="1325" pos:column="16">List<pos:position pos:line="1325" pos:column="20"/></name><argument_list type="generic" pos:line="1325" pos:column="20">&lt;<argument><name pos:line="1325" pos:column="21">AbstractBuild<pos:position pos:line="1325" pos:column="34"/></name></argument>&gt;<pos:position pos:line="1325" pos:column="38"/></argument_list></name></type> <name pos:line="1325" pos:column="36">getBuilds<pos:position pos:line="1325" pos:column="45"/></name><parameter_list pos:line="1325" pos:column="45">()<pos:position pos:line="1325" pos:column="47"/></parameter_list> <block pos:line="1325" pos:column="48">{
            <decl_stmt><decl><type><name><name pos:line="1326" pos:column="13">List<pos:position pos:line="1326" pos:column="17"/></name><argument_list type="generic" pos:line="1326" pos:column="17">&lt;<argument><name pos:line="1326" pos:column="18">AbstractBuild<pos:position pos:line="1326" pos:column="31"/></name></argument>&gt;<pos:position pos:line="1326" pos:column="35"/></argument_list></name></type> <name pos:line="1326" pos:column="33">r<pos:position pos:line="1326" pos:column="34"/></name> <init pos:line="1326" pos:column="35">= <expr><operator pos:line="1326" pos:column="37">new<pos:position pos:line="1326" pos:column="40"/></operator> <call><name><name pos:line="1326" pos:column="41">ArrayList<pos:position pos:line="1326" pos:column="50"/></name><argument_list type="generic" pos:line="1326" pos:column="50">&lt;<argument><name pos:line="1326" pos:column="51">AbstractBuild<pos:position pos:line="1326" pos:column="64"/></name></argument>&gt;<pos:position pos:line="1326" pos:column="68"/></argument_list></name><argument_list pos:line="1326" pos:column="65">()<pos:position pos:line="1326" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1326" pos:column="68"/></decl_stmt>

            <decl_stmt><decl><type><name><name pos:line="1328" pos:column="13">AbstractBuild<pos:position pos:line="1328" pos:column="26"/></name><argument_list type="generic" pos:line="1328" pos:column="26">&lt;<argument><name pos:line="1328" pos:column="27">?<pos:position pos:line="1328" pos:column="28"/></name></argument>,<argument><name pos:line="1328" pos:column="29">?<pos:position pos:line="1328" pos:column="30"/></name></argument>&gt;<pos:position pos:line="1328" pos:column="34"/></argument_list></name></type> <name pos:line="1328" pos:column="32">b<pos:position pos:line="1328" pos:column="33"/></name> <init pos:line="1328" pos:column="34">= <expr><call><name><name pos:line="1328" pos:column="36">project<pos:position pos:line="1328" pos:column="43"/></name><operator pos:line="1328" pos:column="43">.<pos:position pos:line="1328" pos:column="44"/></operator><name pos:line="1328" pos:column="44">getNearestBuild<pos:position pos:line="1328" pos:column="59"/></name></name><argument_list pos:line="1328" pos:column="59">(<argument><expr><name pos:line="1328" pos:column="60">fromId<pos:position pos:line="1328" pos:column="66"/></name></expr></argument>)<pos:position pos:line="1328" pos:column="67"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1328" pos:column="68"/></decl_stmt>
            <if pos:line="1329" pos:column="13">if <condition pos:line="1329" pos:column="16">(<expr><name pos:line="1329" pos:column="17">b<pos:position pos:line="1329" pos:column="18"/></name><operator pos:line="1329" pos:column="18">!=<pos:position pos:line="1329" pos:column="20"/></operator><literal type="null" pos:line="1329" pos:column="20">null<pos:position pos:line="1329" pos:column="24"/></literal> <operator pos:line="1329" pos:column="25">&amp;&amp;<pos:position pos:line="1329" pos:column="35"/></operator> <call><name><name pos:line="1329" pos:column="28">b<pos:position pos:line="1329" pos:column="29"/></name><operator pos:line="1329" pos:column="29">.<pos:position pos:line="1329" pos:column="30"/></operator><name pos:line="1329" pos:column="30">getNumber<pos:position pos:line="1329" pos:column="39"/></name></name><argument_list pos:line="1329" pos:column="39">()<pos:position pos:line="1329" pos:column="41"/></argument_list></call><operator pos:line="1329" pos:column="41">==<pos:position pos:line="1329" pos:column="43"/></operator><name pos:line="1329" pos:column="43">fromId<pos:position pos:line="1329" pos:column="49"/></name></expr>)<pos:position pos:line="1329" pos:column="50"/></condition><then pos:line="1329" pos:column="50">
                <block type="pseudo"><expr_stmt><expr><name pos:line="1330" pos:column="17">b<pos:position pos:line="1330" pos:column="18"/></name> <operator pos:line="1330" pos:column="19">=<pos:position pos:line="1330" pos:column="20"/></operator> <call><name><name pos:line="1330" pos:column="21">b<pos:position pos:line="1330" pos:column="22"/></name><operator pos:line="1330" pos:column="22">.<pos:position pos:line="1330" pos:column="23"/></operator><name pos:line="1330" pos:column="23">getNextBuild<pos:position pos:line="1330" pos:column="35"/></name></name><argument_list pos:line="1330" pos:column="35">()<pos:position pos:line="1330" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1330" pos:column="38"/></expr_stmt></block></then></if> <comment type="line" pos:line="1330" pos:column="39">// fromId exclusive</comment>

            <while pos:line="1332" pos:column="13">while <condition pos:line="1332" pos:column="19">(<expr><name pos:line="1332" pos:column="20">b<pos:position pos:line="1332" pos:column="21"/></name><operator pos:line="1332" pos:column="21">!=<pos:position pos:line="1332" pos:column="23"/></operator><literal type="null" pos:line="1332" pos:column="23">null<pos:position pos:line="1332" pos:column="27"/></literal> <operator pos:line="1332" pos:column="28">&amp;&amp;<pos:position pos:line="1332" pos:column="38"/></operator> <call><name><name pos:line="1332" pos:column="31">b<pos:position pos:line="1332" pos:column="32"/></name><operator pos:line="1332" pos:column="32">.<pos:position pos:line="1332" pos:column="33"/></operator><name pos:line="1332" pos:column="33">getNumber<pos:position pos:line="1332" pos:column="42"/></name></name><argument_list pos:line="1332" pos:column="42">()<pos:position pos:line="1332" pos:column="44"/></argument_list></call><operator pos:line="1332" pos:column="44">&lt;=<pos:position pos:line="1332" pos:column="49"/></operator><name pos:line="1332" pos:column="46">toId<pos:position pos:line="1332" pos:column="50"/></name></expr>)<pos:position pos:line="1332" pos:column="51"/></condition> <block pos:line="1332" pos:column="52">{
                <expr_stmt><expr><call><name><name pos:line="1333" pos:column="17">r<pos:position pos:line="1333" pos:column="18"/></name><operator pos:line="1333" pos:column="18">.<pos:position pos:line="1333" pos:column="19"/></operator><name pos:line="1333" pos:column="19">add<pos:position pos:line="1333" pos:column="22"/></name></name><argument_list pos:line="1333" pos:column="22">(<argument><expr><name pos:line="1333" pos:column="23">b<pos:position pos:line="1333" pos:column="24"/></name></expr></argument>)<pos:position pos:line="1333" pos:column="25"/></argument_list></call></expr>;<pos:position pos:line="1333" pos:column="26"/></expr_stmt>
                <expr_stmt><expr><name pos:line="1334" pos:column="17">b<pos:position pos:line="1334" pos:column="18"/></name> <operator pos:line="1334" pos:column="19">=<pos:position pos:line="1334" pos:column="20"/></operator> <call><name><name pos:line="1334" pos:column="21">b<pos:position pos:line="1334" pos:column="22"/></name><operator pos:line="1334" pos:column="22">.<pos:position pos:line="1334" pos:column="23"/></operator><name pos:line="1334" pos:column="23">getNextBuild<pos:position pos:line="1334" pos:column="35"/></name></name><argument_list pos:line="1334" pos:column="35">()<pos:position pos:line="1334" pos:column="37"/></argument_list></call></expr>;<pos:position pos:line="1334" pos:column="38"/></expr_stmt>
            }<pos:position pos:line="1335" pos:column="14"/></block></while>

            <return pos:line="1337" pos:column="13">return <expr><name pos:line="1337" pos:column="20">r<pos:position pos:line="1337" pos:column="21"/></name></expr>;<pos:position pos:line="1337" pos:column="22"/></return>
        }<pos:position pos:line="1338" pos:column="10"/></block></function>
    }<pos:position pos:line="1339" pos:column="6"/></block></class>

    <comment type="line" pos:line="1341" pos:column="5">//</comment>
    <comment type="line" pos:line="1342" pos:column="5">// web methods</comment>
    <comment type="line" pos:line="1343" pos:column="5">//</comment>

    <comment type="block" format="javadoc" pos:line="1345" pos:column="5">/**
     * @deprecated as of 1.489
     *      Use {@link #doStop()}
     */</comment>
    <function><annotation pos:line="1349" pos:column="5">@<name pos:line="1349" pos:column="6">Deprecated<pos:position pos:line="1349" pos:column="16"/></name></annotation>
    <annotation pos:line="1350" pos:column="5">@<name pos:line="1350" pos:column="6">RequirePOST<pos:position pos:line="1350" pos:column="17"/></name></annotation> <comment type="line" pos:line="1350" pos:column="18">// #doStop() should be preferred, but better to be safe</comment>
    <specifier pos:line="1351" pos:column="5">public<pos:position pos:line="1351" pos:column="11"/></specifier> <type><name pos:line="1351" pos:column="12">void<pos:position pos:line="1351" pos:column="16"/></name></type> <name pos:line="1351" pos:column="17">doStop<pos:position pos:line="1351" pos:column="23"/></name><parameter_list pos:line="1351" pos:column="23">(<parameter><decl><type><name pos:line="1351" pos:column="24">StaplerRequest<pos:position pos:line="1351" pos:column="38"/></name></type> <name pos:line="1351" pos:column="39">req<pos:position pos:line="1351" pos:column="42"/></name></decl></parameter>, <parameter><decl><type><name pos:line="1351" pos:column="44">StaplerResponse<pos:position pos:line="1351" pos:column="59"/></name></type> <name pos:line="1351" pos:column="60">rsp<pos:position pos:line="1351" pos:column="63"/></name></decl></parameter>)<pos:position pos:line="1351" pos:column="64"/></parameter_list> <throws pos:line="1351" pos:column="65">throws <argument><expr><name pos:line="1351" pos:column="72">IOException<pos:position pos:line="1351" pos:column="83"/></name></expr></argument>, <argument><expr><name pos:line="1351" pos:column="85">ServletException<pos:position pos:line="1351" pos:column="101"/></name></expr></argument></throws> <block pos:line="1351" pos:column="102">{
        <expr_stmt><expr><call><name pos:line="1352" pos:column="9">doStop<pos:position pos:line="1352" pos:column="15"/></name><argument_list pos:line="1352" pos:column="15">()<pos:position pos:line="1352" pos:column="17"/></argument_list></call><operator pos:line="1352" pos:column="17">.<pos:position pos:line="1352" pos:column="18"/></operator><call><name pos:line="1352" pos:column="18">generateResponse<pos:position pos:line="1352" pos:column="34"/></name><argument_list pos:line="1352" pos:column="34">(<argument><expr><name pos:line="1352" pos:column="35">req<pos:position pos:line="1352" pos:column="38"/></name></expr></argument>,<argument><expr><name pos:line="1352" pos:column="39">rsp<pos:position pos:line="1352" pos:column="42"/></name></expr></argument>,<argument><expr><name pos:line="1352" pos:column="43">this<pos:position pos:line="1352" pos:column="47"/></name></expr></argument>)<pos:position pos:line="1352" pos:column="48"/></argument_list></call></expr>;<pos:position pos:line="1352" pos:column="49"/></expr_stmt>
    }<pos:position pos:line="1353" pos:column="6"/></block></function>

    <comment type="block" format="javadoc" pos:line="1355" pos:column="5">/**
     * Stops this build if it's still going.
     *
     * If we use this/executor/stop URL, it causes 404 if the build is already killed,
     * as {@link #getExecutor()} returns null.
     * 
     * @since 1.489
     */</comment>
    <function><annotation pos:line="1363" pos:column="5">@<name pos:line="1363" pos:column="6">RequirePOST<pos:position pos:line="1363" pos:column="17"/></name></annotation>
    <specifier pos:line="1364" pos:column="5">public<pos:position pos:line="1364" pos:column="11"/></specifier> <specifier pos:line="1364" pos:column="12">synchronized<pos:position pos:line="1364" pos:column="24"/></specifier> <type><name pos:line="1364" pos:column="25">HttpResponse<pos:position pos:line="1364" pos:column="37"/></name></type> <name pos:line="1364" pos:column="38">doStop<pos:position pos:line="1364" pos:column="44"/></name><parameter_list pos:line="1364" pos:column="44">()<pos:position pos:line="1364" pos:column="46"/></parameter_list> <throws pos:line="1364" pos:column="47">throws <argument><expr><name pos:line="1364" pos:column="54">IOException<pos:position pos:line="1364" pos:column="65"/></name></expr></argument>, <argument><expr><name pos:line="1364" pos:column="67">ServletException<pos:position pos:line="1364" pos:column="83"/></name></expr></argument></throws> <block pos:line="1364" pos:column="84">{
        <decl_stmt><decl><type><name pos:line="1365" pos:column="9">Executor<pos:position pos:line="1365" pos:column="17"/></name></type> <name pos:line="1365" pos:column="18">e<pos:position pos:line="1365" pos:column="19"/></name> <init pos:line="1365" pos:column="20">= <expr><call><name pos:line="1365" pos:column="22">getExecutor<pos:position pos:line="1365" pos:column="33"/></name><argument_list pos:line="1365" pos:column="33">()<pos:position pos:line="1365" pos:column="35"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1365" pos:column="36"/></decl_stmt>
        <if pos:line="1366" pos:column="9">if <condition pos:line="1366" pos:column="12">(<expr><name pos:line="1366" pos:column="13">e<pos:position pos:line="1366" pos:column="14"/></name><operator pos:line="1366" pos:column="14">==<pos:position pos:line="1366" pos:column="16"/></operator><literal type="null" pos:line="1366" pos:column="16">null<pos:position pos:line="1366" pos:column="20"/></literal></expr>)<pos:position pos:line="1366" pos:column="21"/></condition><then pos:line="1366" pos:column="21">
            <block type="pseudo"><expr_stmt><expr><name pos:line="1367" pos:column="13">e<pos:position pos:line="1367" pos:column="14"/></name> <operator pos:line="1367" pos:column="15">=<pos:position pos:line="1367" pos:column="16"/></operator> <call><name pos:line="1367" pos:column="17">getOneOffExecutor<pos:position pos:line="1367" pos:column="34"/></name><argument_list pos:line="1367" pos:column="34">()<pos:position pos:line="1367" pos:column="36"/></argument_list></call></expr>;<pos:position pos:line="1367" pos:column="37"/></expr_stmt></block></then></if>
        <if pos:line="1368" pos:column="9">if <condition pos:line="1368" pos:column="12">(<expr><name pos:line="1368" pos:column="13">e<pos:position pos:line="1368" pos:column="14"/></name><operator pos:line="1368" pos:column="14">!=<pos:position pos:line="1368" pos:column="16"/></operator><literal type="null" pos:line="1368" pos:column="16">null<pos:position pos:line="1368" pos:column="20"/></literal></expr>)<pos:position pos:line="1368" pos:column="21"/></condition><then pos:line="1368" pos:column="21">
            <block type="pseudo"><return pos:line="1369" pos:column="13">return <expr><call><name><name pos:line="1369" pos:column="20">e<pos:position pos:line="1369" pos:column="21"/></name><operator pos:line="1369" pos:column="21">.<pos:position pos:line="1369" pos:column="22"/></operator><name pos:line="1369" pos:column="22">doStop<pos:position pos:line="1369" pos:column="28"/></name></name><argument_list pos:line="1369" pos:column="28">()<pos:position pos:line="1369" pos:column="30"/></argument_list></call></expr>;<pos:position pos:line="1369" pos:column="31"/></return></block></then>
        <else pos:line="1370" pos:column="9">else
            <comment type="line" pos:line="1371" pos:column="13">// nothing is building</comment>
            <block type="pseudo"><return pos:line="1372" pos:column="13">return <expr><call><name><name pos:line="1372" pos:column="20">HttpResponses<pos:position pos:line="1372" pos:column="33"/></name><operator pos:line="1372" pos:column="33">.<pos:position pos:line="1372" pos:column="34"/></operator><name pos:line="1372" pos:column="34">forwardToPreviousPage<pos:position pos:line="1372" pos:column="55"/></name></name><argument_list pos:line="1372" pos:column="55">()<pos:position pos:line="1372" pos:column="57"/></argument_list></call></expr>;<pos:position pos:line="1372" pos:column="58"/></return></block></else></if>
    }<pos:position pos:line="1373" pos:column="6"/></block></function>

    <decl_stmt><decl><specifier pos:line="1375" pos:column="5">private<pos:position pos:line="1375" pos:column="12"/></specifier> <specifier pos:line="1375" pos:column="13">static<pos:position pos:line="1375" pos:column="19"/></specifier> <type><specifier pos:line="1375" pos:column="20">final<pos:position pos:line="1375" pos:column="25"/></specifier> <name pos:line="1375" pos:column="26">Logger<pos:position pos:line="1375" pos:column="32"/></name></type> <name pos:line="1375" pos:column="33">LOGGER<pos:position pos:line="1375" pos:column="39"/></name> <init pos:line="1375" pos:column="40">= <expr><call><name><name pos:line="1375" pos:column="42">Logger<pos:position pos:line="1375" pos:column="48"/></name><operator pos:line="1375" pos:column="48">.<pos:position pos:line="1375" pos:column="49"/></operator><name pos:line="1375" pos:column="49">getLogger<pos:position pos:line="1375" pos:column="58"/></name></name><argument_list pos:line="1375" pos:column="58">(<argument><expr><call><name><name pos:line="1375" pos:column="59">AbstractBuild<pos:position pos:line="1375" pos:column="72"/></name><operator pos:line="1375" pos:column="72">.<pos:position pos:line="1375" pos:column="73"/></operator><name><name pos:line="1375" pos:column="73">class<pos:position pos:line="1375" pos:column="78"/></name><operator pos:line="1375" pos:column="78">.<pos:position pos:line="1375" pos:column="79"/></operator><name pos:line="1375" pos:column="79">getName<pos:position pos:line="1375" pos:column="86"/></name></name></name><argument_list pos:line="1375" pos:column="86">()<pos:position pos:line="1375" pos:column="88"/></argument_list></call></expr></argument>)<pos:position pos:line="1375" pos:column="89"/></argument_list></call></expr></init></decl>;<pos:position pos:line="1375" pos:column="90"/></decl_stmt>
}<pos:position pos:line="1376" pos:column="2"/></block></class>


</unit>

